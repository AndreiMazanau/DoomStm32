<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F769I_DISCOVERY\Exe\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F769I_DISCOVERY\Exe\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sun Dec 16 02:54:24 2018
<BR><P>
<H3>Maximum Stack Usage =       2064 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; d_main &rArr; D_DoomMain &rArr; D_DoomLoop &rArr; D_Display &rArr; R_RenderPlayerView &rArr; R_DrawMasked &rArr; R_DrawSprite &rArr; R_RenderMaskedSegRange &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b7]">PVD_IRQHandler</a>
 <LI><a href="#[b8]">TAMP_STAMP_IRQHandler</a>
 <LI><a href="#[b9]">RTC_WKUP_IRQHandler</a>
 <LI><a href="#[ba]">FLASH_IRQHandler</a>
 <LI><a href="#[bb]">RCC_IRQHandler</a>
 <LI><a href="#[bc]">EXTI0_IRQHandler</a>
 <LI><a href="#[c1]">DMA1_Stream0_IRQHandler</a>
 <LI><a href="#[bd]">EXTI1_IRQHandler</a>
 <LI><a href="#[be]">EXTI2_IRQHandler</a>
 <LI><a href="#[bf]">EXTI3_IRQHandler</a>
 <LI><a href="#[c0]">EXTI4_IRQHandler</a>
 <LI><a href="#[c2]">DMA1_Stream1_IRQHandler</a>
 <LI><a href="#[c3]">DMA1_Stream2_IRQHandler</a>
 <LI><a href="#[c4]">DMA1_Stream3_IRQHandler</a>
 <LI><a href="#[c5]">DMA1_Stream4_IRQHandler</a>
 <LI><a href="#[c6]">DMA1_Stream5_IRQHandler</a>
 <LI><a href="#[c7]">DMA1_Stream6_IRQHandler</a>
 <LI><a href="#[c8]">ADC_IRQHandler</a>
 <LI><a href="#[c9]">CAN1_TX_IRQHandler</a>
 <LI><a href="#[ca]">CAN1_RX0_IRQHandler</a>
 <LI><a href="#[cb]">CAN1_RX1_IRQHandler</a>
 <LI><a href="#[cc]">CAN1_SCE_IRQHandler</a>
 <LI><a href="#[cd]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[ce]">TIM1_BRK_TIM9_IRQHandler</a>
 <LI><a href="#[cf]">TIM1_UP_TIM10_IRQHandler</a>
 <LI><a href="#[d0]">TIM1_TRG_COM_TIM11_IRQHandler</a>
 <LI><a href="#[d1]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[d2]">TIM2_IRQHandler</a>
 <LI><a href="#[d3]">TIM3_IRQHandler</a>
 <LI><a href="#[d4]">TIM4_IRQHandler</a>
 <LI><a href="#[d5]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[d6]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[d7]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[d8]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[d9]">SPI1_IRQHandler</a>
 <LI><a href="#[da]">SPI2_IRQHandler</a>
 <LI><a href="#[db]">USART1_IRQHandler</a>
 <LI><a href="#[dc]">USART2_IRQHandler</a>
 <LI><a href="#[dd]">USART3_IRQHandler</a>
 <LI><a href="#[de]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[df]">RTC_Alarm_IRQHandler</a>
 <LI><a href="#[e0]">OTG_FS_WKUP_IRQHandler</a>
 <LI><a href="#[e1]">TIM8_BRK_TIM12_IRQHandler</a>
 <LI><a href="#[e2]">TIM8_UP_TIM13_IRQHandler</a>
 <LI><a href="#[e3]">TIM8_TRG_COM_TIM14_IRQHandler</a>
 <LI><a href="#[e4]">TIM8_CC_IRQHandler</a>
 <LI><a href="#[e5]">DMA1_Stream7_IRQHandler</a>
 <LI><a href="#[e6]">FMC_IRQHandler</a>
 <LI><a href="#[e7]">SDMMC1_IRQHandler</a>
 <LI><a href="#[e8]">TIM5_IRQHandler</a>
 <LI><a href="#[e9]">SPI3_IRQHandler</a>
 <LI><a href="#[ea]">UART4_IRQHandler</a>
 <LI><a href="#[eb]">UART5_IRQHandler</a>
 <LI><a href="#[ec]">TIM6_DAC_IRQHandler</a>
 <LI><a href="#[ed]">TIM7_IRQHandler</a>
 <LI><a href="#[f0]">DMA2_Stream2_IRQHandler</a>
 <LI><a href="#[f1]">DMA2_Stream3_IRQHandler</a>
 <LI><a href="#[f3]">ETH_IRQHandler</a>
 <LI><a href="#[f4]">ETH_WKUP_IRQHandler</a>
 <LI><a href="#[f5]">CAN2_TX_IRQHandler</a>
 <LI><a href="#[f6]">CAN2_RX0_IRQHandler</a>
 <LI><a href="#[f7]">CAN2_RX1_IRQHandler</a>
 <LI><a href="#[f8]">CAN2_SCE_IRQHandler</a>
 <LI><a href="#[f9]">OTG_FS_IRQHandler</a>
 <LI><a href="#[fc]">DMA2_Stream7_IRQHandler</a>
 <LI><a href="#[fd]">USART6_IRQHandler</a>
 <LI><a href="#[fe]">I2C3_EV_IRQHandler</a>
 <LI><a href="#[ff]">I2C3_ER_IRQHandler</a>
 <LI><a href="#[100]">OTG_HS_EP1_OUT_IRQHandler</a>
 <LI><a href="#[101]">OTG_HS_EP1_IN_IRQHandler</a>
 <LI><a href="#[102]">OTG_HS_WKUP_IRQHandler</a>
 <LI><a href="#[104]">DCMI_IRQHandler</a>
 <LI><a href="#[105]">RNG_IRQHandler</a>
 <LI><a href="#[106]">FPU_IRQHandler</a>
 <LI><a href="#[107]">UART7_IRQHandler</a>
 <LI><a href="#[108]">UART8_IRQHandler</a>
 <LI><a href="#[109]">SPI4_IRQHandler</a>
 <LI><a href="#[10a]">SPI5_IRQHandler</a>
 <LI><a href="#[10b]">SPI6_IRQHandler</a>
 <LI><a href="#[10c]">SAI1_IRQHandler</a>
 <LI><a href="#[10d]">LTDC_IRQHandler</a>
 <LI><a href="#[10e]">LTDC_ER_IRQHandler</a>
 <LI><a href="#[110]">SAI2_IRQHandler</a>
 <LI><a href="#[111]">QUADSPI_IRQHandler</a>
 <LI><a href="#[112]">LPTIM1_IRQHandler</a>
 <LI><a href="#[113]">CEC_IRQHandler</a>
 <LI><a href="#[114]">I2C4_EV_IRQHandler</a>
 <LI><a href="#[115]">I2C4_ER_IRQHandler</a>
 <LI><a href="#[116]">SPDIF_RX_IRQHandler</a>
 <LI><a href="#[117]">DSI_IRQHandler</a>
 <LI><a href="#[118]">DFSDM1_FLT0_IRQHandler</a>
 <LI><a href="#[119]">DFSDM1_FLT1_IRQHandler</a>
 <LI><a href="#[11a]">DFSDM1_FLT2_IRQHandler</a>
 <LI><a href="#[11b]">DFSDM1_FLT3_IRQHandler</a>
 <LI><a href="#[11d]">CAN3_TX_IRQHandler</a>
 <LI><a href="#[11e]">CAN3_RX0_IRQHandler</a>
 <LI><a href="#[11f]">CAN3_RX1_IRQHandler</a>
 <LI><a href="#[120]">CAN3_SCE_IRQHandler</a>
 <LI><a href="#[121]">JPEG_IRQHandler</a>
 <LI><a href="#[122]">MDIOS_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b6]">WWDG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6]">WWDG_IRQHandler</a><BR>
 <LI><a href="#[b7]">PVD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b7]">PVD_IRQHandler</a><BR>
 <LI><a href="#[b8]">TAMP_STAMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b8]">TAMP_STAMP_IRQHandler</a><BR>
 <LI><a href="#[b9]">RTC_WKUP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b9]">RTC_WKUP_IRQHandler</a><BR>
 <LI><a href="#[ba]">FLASH_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ba]">FLASH_IRQHandler</a><BR>
 <LI><a href="#[bb]">RCC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bb]">RCC_IRQHandler</a><BR>
 <LI><a href="#[bc]">EXTI0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc]">EXTI0_IRQHandler</a><BR>
 <LI><a href="#[c1]">DMA1_Stream0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c1]">DMA1_Stream0_IRQHandler</a><BR>
 <LI><a href="#[c2]">DMA1_Stream1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c2]">DMA1_Stream1_IRQHandler</a><BR>
 <LI><a href="#[c3]">DMA1_Stream2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">DMA1_Stream2_IRQHandler</a><BR>
 <LI><a href="#[c4]">DMA1_Stream3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">DMA1_Stream3_IRQHandler</a><BR>
 <LI><a href="#[c5]">DMA1_Stream4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">DMA1_Stream4_IRQHandler</a><BR>
 <LI><a href="#[c6]">DMA1_Stream5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c6]">DMA1_Stream5_IRQHandler</a><BR>
 <LI><a href="#[c7]">DMA1_Stream6_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c7]">DMA1_Stream6_IRQHandler</a><BR>
 <LI><a href="#[c8]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8]">ADC_IRQHandler</a><BR>
 <LI><a href="#[c9]">CAN1_TX_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c9]">CAN1_TX_IRQHandler</a><BR>
 <LI><a href="#[ca]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ca]">CAN1_RX0_IRQHandler</a><BR>
 <LI><a href="#[cb]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cb]">CAN1_RX1_IRQHandler</a><BR>
 <LI><a href="#[cc]">CAN1_SCE_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cc]">CAN1_SCE_IRQHandler</a><BR>
 <LI><a href="#[cd]">EXTI9_5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cd]">EXTI9_5_IRQHandler</a><BR>
 <LI><a href="#[ce]">TIM1_BRK_TIM9_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ce]">TIM1_BRK_TIM9_IRQHandler</a><BR>
 <LI><a href="#[cf]">TIM1_UP_TIM10_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cf]">TIM1_UP_TIM10_IRQHandler</a><BR>
 <LI><a href="#[d0]">TIM1_TRG_COM_TIM11_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">TIM1_TRG_COM_TIM11_IRQHandler</a><BR>
 <LI><a href="#[d1]">TIM1_CC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d1]">TIM1_CC_IRQHandler</a><BR>
 <LI><a href="#[d2]">TIM2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">TIM2_IRQHandler</a><BR>
 <LI><a href="#[d3]">TIM3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d3]">TIM3_IRQHandler</a><BR>
 <LI><a href="#[d4]">TIM4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d4]">TIM4_IRQHandler</a><BR>
 <LI><a href="#[d5]">I2C1_EV_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d5]">I2C1_EV_IRQHandler</a><BR>
 <LI><a href="#[d6]">I2C1_ER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d6]">I2C1_ER_IRQHandler</a><BR>
 <LI><a href="#[d7]">I2C2_EV_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d7]">I2C2_EV_IRQHandler</a><BR>
 <LI><a href="#[d8]">I2C2_ER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8]">I2C2_ER_IRQHandler</a><BR>
 <LI><a href="#[d9]">SPI1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d9]">SPI1_IRQHandler</a><BR>
 <LI><a href="#[da]">SPI2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[da]">SPI2_IRQHandler</a><BR>
 <LI><a href="#[db]">USART1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[db]">USART1_IRQHandler</a><BR>
 <LI><a href="#[dc]">USART2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[dc]">USART2_IRQHandler</a><BR>
 <LI><a href="#[dd]">USART3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[dd]">USART3_IRQHandler</a><BR>
 <LI><a href="#[de]">EXTI15_10_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[de]">EXTI15_10_IRQHandler</a><BR>
 <LI><a href="#[df]">RTC_Alarm_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[df]">RTC_Alarm_IRQHandler</a><BR>
 <LI><a href="#[e0]">OTG_FS_WKUP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e0]">OTG_FS_WKUP_IRQHandler</a><BR>
 <LI><a href="#[e1]">TIM8_BRK_TIM12_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e1]">TIM8_BRK_TIM12_IRQHandler</a><BR>
 <LI><a href="#[e2]">TIM8_UP_TIM13_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e2]">TIM8_UP_TIM13_IRQHandler</a><BR>
 <LI><a href="#[e3]">TIM8_TRG_COM_TIM14_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e3]">TIM8_TRG_COM_TIM14_IRQHandler</a><BR>
 <LI><a href="#[e4]">TIM8_CC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e4]">TIM8_CC_IRQHandler</a><BR>
 <LI><a href="#[e5]">DMA1_Stream7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e5]">DMA1_Stream7_IRQHandler</a><BR>
 <LI><a href="#[e6]">FMC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e6]">FMC_IRQHandler</a><BR>
 <LI><a href="#[e7]">SDMMC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e7]">SDMMC1_IRQHandler</a><BR>
 <LI><a href="#[e8]">TIM5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e8]">TIM5_IRQHandler</a><BR>
 <LI><a href="#[e9]">SPI3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e9]">SPI3_IRQHandler</a><BR>
 <LI><a href="#[ea]">UART4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ea]">UART4_IRQHandler</a><BR>
 <LI><a href="#[eb]">UART5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[eb]">UART5_IRQHandler</a><BR>
 <LI><a href="#[ec]">TIM6_DAC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ec]">TIM6_DAC_IRQHandler</a><BR>
 <LI><a href="#[ed]">TIM7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ed]">TIM7_IRQHandler</a><BR>
 <LI><a href="#[f0]">DMA2_Stream2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f0]">DMA2_Stream2_IRQHandler</a><BR>
 <LI><a href="#[f1]">DMA2_Stream3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f1]">DMA2_Stream3_IRQHandler</a><BR>
 <LI><a href="#[f3]">ETH_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f3]">ETH_IRQHandler</a><BR>
 <LI><a href="#[f4]">ETH_WKUP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f4]">ETH_WKUP_IRQHandler</a><BR>
 <LI><a href="#[f5]">CAN2_TX_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f5]">CAN2_TX_IRQHandler</a><BR>
 <LI><a href="#[f6]">CAN2_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f6]">CAN2_RX0_IRQHandler</a><BR>
 <LI><a href="#[f7]">CAN2_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f7]">CAN2_RX1_IRQHandler</a><BR>
 <LI><a href="#[f8]">CAN2_SCE_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8]">CAN2_SCE_IRQHandler</a><BR>
 <LI><a href="#[f9]">OTG_FS_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f9]">OTG_FS_IRQHandler</a><BR>
 <LI><a href="#[fc]">DMA2_Stream7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fc]">DMA2_Stream7_IRQHandler</a><BR>
 <LI><a href="#[fd]">USART6_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fd]">USART6_IRQHandler</a><BR>
 <LI><a href="#[fe]">I2C3_EV_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe]">I2C3_EV_IRQHandler</a><BR>
 <LI><a href="#[ff]">I2C3_ER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ff]">I2C3_ER_IRQHandler</a><BR>
 <LI><a href="#[100]">OTG_HS_EP1_OUT_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[100]">OTG_HS_EP1_OUT_IRQHandler</a><BR>
 <LI><a href="#[101]">OTG_HS_EP1_IN_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[101]">OTG_HS_EP1_IN_IRQHandler</a><BR>
 <LI><a href="#[102]">OTG_HS_WKUP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[102]">OTG_HS_WKUP_IRQHandler</a><BR>
 <LI><a href="#[104]">DCMI_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[104]">DCMI_IRQHandler</a><BR>
 <LI><a href="#[105]">RNG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">RNG_IRQHandler</a><BR>
 <LI><a href="#[106]">FPU_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[106]">FPU_IRQHandler</a><BR>
 <LI><a href="#[107]">UART7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[107]">UART7_IRQHandler</a><BR>
 <LI><a href="#[108]">UART8_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[108]">UART8_IRQHandler</a><BR>
 <LI><a href="#[109]">SPI4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[109]">SPI4_IRQHandler</a><BR>
 <LI><a href="#[10a]">SPI5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10a]">SPI5_IRQHandler</a><BR>
 <LI><a href="#[10b]">SPI6_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10b]">SPI6_IRQHandler</a><BR>
 <LI><a href="#[10c]">SAI1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10c]">SAI1_IRQHandler</a><BR>
 <LI><a href="#[10d]">LTDC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10d]">LTDC_IRQHandler</a><BR>
 <LI><a href="#[10e]">LTDC_ER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10e]">LTDC_ER_IRQHandler</a><BR>
 <LI><a href="#[110]">SAI2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[110]">SAI2_IRQHandler</a><BR>
 <LI><a href="#[111]">QUADSPI_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[111]">QUADSPI_IRQHandler</a><BR>
 <LI><a href="#[112]">LPTIM1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[112]">LPTIM1_IRQHandler</a><BR>
 <LI><a href="#[113]">CEC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[113]">CEC_IRQHandler</a><BR>
 <LI><a href="#[114]">I2C4_EV_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[114]">I2C4_EV_IRQHandler</a><BR>
 <LI><a href="#[115]">I2C4_ER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">I2C4_ER_IRQHandler</a><BR>
 <LI><a href="#[116]">SPDIF_RX_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[116]">SPDIF_RX_IRQHandler</a><BR>
 <LI><a href="#[117]">DSI_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[117]">DSI_IRQHandler</a><BR>
 <LI><a href="#[118]">DFSDM1_FLT0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[118]">DFSDM1_FLT0_IRQHandler</a><BR>
 <LI><a href="#[119]">DFSDM1_FLT1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[119]">DFSDM1_FLT1_IRQHandler</a><BR>
 <LI><a href="#[11a]">DFSDM1_FLT2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11a]">DFSDM1_FLT2_IRQHandler</a><BR>
 <LI><a href="#[11b]">DFSDM1_FLT3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11b]">DFSDM1_FLT3_IRQHandler</a><BR>
 <LI><a href="#[11d]">CAN3_TX_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11d]">CAN3_TX_IRQHandler</a><BR>
 <LI><a href="#[11e]">CAN3_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11e]">CAN3_RX0_IRQHandler</a><BR>
 <LI><a href="#[11f]">CAN3_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">CAN3_RX1_IRQHandler</a><BR>
 <LI><a href="#[120]">CAN3_SCE_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[120]">CAN3_SCE_IRQHandler</a><BR>
 <LI><a href="#[121]">JPEG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[121]">JPEG_IRQHandler</a><BR>
 <LI><a href="#[122]">MDIOS_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[122]">MDIOS_IRQHandler</a><BR>
 <LI><a href="#[472]">P_CrossBSPNode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[472]">P_CrossBSPNode</a><BR>
 <LI><a href="#[4a5]">P_RecursiveSound</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a5]">P_RecursiveSound</a><BR>
 <LI><a href="#[52f]">SHA1_Update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52f]">SHA1_Update</a><BR>
 <LI><a href="#[506]">R_RenderBSPNode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[506]">R_RenderBSPNode</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c8]">ADC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4d]">A_BFGSpray</a> from p_pspr.o(i.A_BFGSpray) referenced 2 times from info.o(.data)
 <LI><a href="#[4b]">A_BFGsound</a> from p_pspr.o(i.A_BFGsound) referenced 2 times from info.o(.data)
 <LI><a href="#[72]">A_BabyMetal</a> from p_enemy.o(i.A_BabyMetal) referenced 4 times from info.o(.data)
 <LI><a href="#[68]">A_BossDeath</a> from p_enemy.o(i.A_BossDeath) referenced 10 times from info.o(.data)
 <LI><a href="#[7c]">A_BrainAwake</a> from p_enemy.o(i.A_BrainAwake) referenced 2 times from info.o(.data)
 <LI><a href="#[7b]">A_BrainDie</a> from p_enemy.o(i.A_BrainDie) referenced 2 times from info.o(.data)
 <LI><a href="#[80]">A_BrainExplode</a> from p_enemy.o(i.A_BrainExplode) referenced 2 times from info.o(.data)
 <LI><a href="#[79]">A_BrainPain</a> from p_enemy.o(i.A_BrainPain) referenced 2 times from info.o(.data)
 <LI><a href="#[7a]">A_BrainScream</a> from p_enemy.o(i.A_BrainScream) referenced 2 times from info.o(.data)
 <LI><a href="#[7d]">A_BrainSpit</a> from p_enemy.o(i.A_BrainSpit) referenced 2 times from info.o(.data)
 <LI><a href="#[6e]">A_BruisAttack</a> from p_enemy.o(i.A_BruisAttack) referenced 4 times from info.o(.data)
 <LI><a href="#[73]">A_BspiAttack</a> from p_enemy.o(i.A_BspiAttack) referenced 2 times from info.o(.data)
 <LI><a href="#[69]">A_CPosAttack</a> from p_enemy.o(i.A_CPosAttack) referenced 8 times from info.o(.data)
 <LI><a href="#[6a]">A_CPosRefire</a> from p_enemy.o(i.A_CPosRefire) referenced 4 times from info.o(.data)
 <LI><a href="#[54]">A_Chase</a> from p_enemy.o(i.A_Chase) referenced 244 times from info.o(.data)
 <LI><a href="#[42]">A_CheckReload</a> from p_pspr.o(i.A_CheckReload) referenced 2 times from info.o(.data)
 <LI><a href="#[45]">A_CloseShotgun2</a> from p_enemy.o(i.A_CloseShotgun2) referenced 2 times from info.o(.data)
 <LI><a href="#[75]">A_CyberAttack</a> from p_enemy.o(i.A_CyberAttack) referenced 6 times from info.o(.data)
 <LI><a href="#[4e]">A_Explode</a> from p_enemy.o(i.A_Explode) referenced 4 times from info.o(.data)
 <LI><a href="#[55]">A_FaceTarget</a> from p_enemy.o(i.A_FaceTarget) referenced 86 times from info.o(.data)
 <LI><a href="#[51]">A_Fall</a> from p_enemy.o(i.A_Fall) referenced 46 times from info.o(.data)
 <LI><a href="#[65]">A_FatAttack1</a> from p_enemy.o(i.A_FatAttack1) referenced 2 times from info.o(.data)
 <LI><a href="#[66]">A_FatAttack2</a> from p_enemy.o(i.A_FatAttack2) referenced 2 times from info.o(.data)
 <LI><a href="#[67]">A_FatAttack3</a> from p_enemy.o(i.A_FatAttack3) referenced 2 times from info.o(.data)
 <LI><a href="#[64]">A_FatRaise</a> from p_enemy.o(i.A_FatRaise) referenced 2 times from info.o(.data)
 <LI><a href="#[5e]">A_Fire</a> from p_enemy.o(i.A_Fire) referenced 70 times from info.o(.data)
 <LI><a href="#[4c]">A_FireBFG</a> from p_pspr.o(i.A_FireBFG) referenced 2 times from info.o(.data)
 <LI><a href="#[46]">A_FireCGun</a> from p_pspr.o(i.A_FireCGun) referenced 4 times from info.o(.data)
 <LI><a href="#[5f]">A_FireCrackle</a> from p_enemy.o(i.A_FireCrackle) referenced 4 times from info.o(.data)
 <LI><a href="#[48]">A_FireMissile</a> from p_pspr.o(i.A_FireMissile) referenced 2 times from info.o(.data)
 <LI><a href="#[3d]">A_FirePistol</a> from p_pspr.o(i.A_FirePistol) referenced 2 times from info.o(.data)
 <LI><a href="#[4a]">A_FirePlasma</a> from p_pspr.o(i.A_FirePlasma) referenced 2 times from info.o(.data)
 <LI><a href="#[3f]">A_FireShotgun</a> from p_pspr.o(i.A_FireShotgun) referenced 2 times from info.o(.data)
 <LI><a href="#[41]">A_FireShotgun2</a> from p_pspr.o(i.A_FireShotgun2) referenced 2 times from info.o(.data)
 <LI><a href="#[47]">A_GunFlash</a> from p_pspr.o(i.A_GunFlash) referenced 4 times from info.o(.data)
 <LI><a href="#[6d]">A_HeadAttack</a> from p_enemy.o(i.A_HeadAttack) referenced 2 times from info.o(.data)
 <LI><a href="#[74]">A_Hoof</a> from p_enemy.o(i.A_Hoof) referenced 2 times from info.o(.data)
 <LI><a href="#[78]">A_KeenDie</a> from p_enemy.o(i.A_KeenDie) referenced 2 times from info.o(.data)
 <LI><a href="#[37]">A_Light0</a> from p_pspr.o(i.A_Light0) referenced 2 times from info.o(.data)
 <LI><a href="#[3e]">A_Light1</a> from p_pspr.o(i.A_Light1) referenced 16 times from info.o(.data)
 <LI><a href="#[40]">A_Light2</a> from p_pspr.o(i.A_Light2) referenced 12 times from info.o(.data)
 <LI><a href="#[44]">A_LoadShotgun2</a> from p_enemy.o(i.A_LoadShotgun2) referenced 2 times from info.o(.data)
 <LI><a href="#[53]">A_Look</a> from p_enemy.o(i.A_Look) referenced 66 times from info.o(.data)
 <LI><a href="#[39]">A_Lower</a> from p_pspr.o(i.A_Lower) referenced 18 times from info.o(.data)
 <LI><a href="#[70]">A_Metal</a> from p_enemy.o(i.A_Metal) referenced 8 times from info.o(.data)
 <LI><a href="#[43]">A_OpenShotgun2</a> from p_enemy.o(i.A_OpenShotgun2) referenced 2 times from info.o(.data)
 <LI><a href="#[4f]">A_Pain</a> from p_enemy.o(i.A_Pain) referenced 38 times from info.o(.data)
 <LI><a href="#[76]">A_PainAttack</a> from p_enemy.o(i.A_PainAttack) referenced 2 times from info.o(.data)
 <LI><a href="#[77]">A_PainDie</a> from p_enemy.o(i.A_PainDie) referenced 2 times from info.o(.data)
 <LI><a href="#[50]">A_PlayerScream</a> from p_enemy.o(i.A_PlayerScream) referenced 2 times from info.o(.data)
 <LI><a href="#[56]">A_PosAttack</a> from p_enemy.o(i.A_PosAttack) referenced 2 times from info.o(.data)
 <LI><a href="#[3b]">A_Punch</a> from p_pspr.o(i.A_Punch) referenced 2 times from info.o(.data)
 <LI><a href="#[3a]">A_Raise</a> from p_pspr.o(i.A_Raise) referenced 18 times from info.o(.data)
 <LI><a href="#[3c]">A_ReFire</a> from p_pspr.o(i.A_ReFire) referenced 18 times from info.o(.data)
 <LI><a href="#[58]">A_SPosAttack</a> from p_enemy.o(i.A_SPosAttack) referenced 6 times from info.o(.data)
 <LI><a href="#[6c]">A_SargAttack</a> from p_enemy.o(i.A_SargAttack) referenced 2 times from info.o(.data)
 <LI><a href="#[49]">A_Saw</a> from p_pspr.o(i.A_Saw) referenced 4 times from info.o(.data)
 <LI><a href="#[57]">A_Scream</a> from p_enemy.o(i.A_Scream) referenced 38 times from info.o(.data)
 <LI><a href="#[62]">A_SkelFist</a> from p_enemy.o(i.A_SkelFist) referenced 2 times from info.o(.data)
 <LI><a href="#[63]">A_SkelMissile</a> from p_enemy.o(i.A_SkelMissile) referenced 2 times from info.o(.data)
 <LI><a href="#[61]">A_SkelWhoosh</a> from p_enemy.o(i.A_SkelWhoosh) referenced 2 times from info.o(.data)
 <LI><a href="#[6f]">A_SkullAttack</a> from p_enemy.o(i.A_SkullAttack) referenced 2 times from info.o(.data)
 <LI><a href="#[7f]">A_SpawnFly</a> from p_enemy.o(i.A_SpawnFly) referenced 6 times from info.o(.data)
 <LI><a href="#[7e]">A_SpawnSound</a> from p_enemy.o(i.A_SpawnSound) referenced 2 times from info.o(.data)
 <LI><a href="#[71]">A_SpidRefire</a> from p_enemy.o(i.A_SpidRefire) referenced 4 times from info.o(.data)
 <LI><a href="#[5d]">A_StartFire</a> from p_enemy.o(i.A_StartFire) referenced 2 times from info.o(.data)
 <LI><a href="#[60]">A_Tracer</a> from p_enemy.o(i.A_Tracer) referenced 4 times from info.o(.data)
 <LI><a href="#[6b]">A_TroopAttack</a> from p_enemy.o(i.A_TroopAttack) referenced 2 times from info.o(.data)
 <LI><a href="#[5c]">A_VileAttack</a> from p_enemy.o(i.A_VileAttack) referenced 2 times from info.o(.data)
 <LI><a href="#[59]">A_VileChase</a> from p_enemy.o(i.A_VileChase) referenced 24 times from info.o(.data)
 <LI><a href="#[5a]">A_VileStart</a> from p_enemy.o(i.A_VileStart) referenced 2 times from info.o(.data)
 <LI><a href="#[5b]">A_VileTarget</a> from p_enemy.o(i.A_VileTarget) referenced 2 times from info.o(.data)
 <LI><a href="#[38]">A_WeaponReady</a> from p_pspr.o(i.A_WeaponReady) referenced 20 times from info.o(.data)
 <LI><a href="#[52]">A_XScream</a> from p_enemy.o(i.A_XScream) referenced 12 times from info.o(.data)
 <LI><a href="#[b0]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[ca]">CAN1_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[cb]">CAN1_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[cc]">CAN1_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c9]">CAN1_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f6]">CAN2_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f7]">CAN2_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f8]">CAN2_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f5]">CAN2_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[11e]">CAN3_RX0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[11f]">CAN3_RX1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[120]">CAN3_SCE_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[11d]">CAN3_TX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[113]">CEC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[104]">DCMI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[118]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[119]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[11a]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[11b]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c1]">DMA1_Stream0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c2]">DMA1_Stream1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c3]">DMA1_Stream2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c4]">DMA1_Stream3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c5]">DMA1_Stream4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c6]">DMA1_Stream5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c7]">DMA1_Stream6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e5]">DMA1_Stream7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[10f]">DMA2D_IRQHandler</a> from stm32f7xx_it.o(i.DMA2D_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[ee]">DMA2_Stream0_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[ef]">DMA2_Stream1_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f0]">DMA2_Stream2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f1]">DMA2_Stream3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f2]">DMA2_Stream4_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream4_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[fa]">DMA2_Stream5_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[fb]">DMA2_Stream6_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[fc]">DMA2_Stream7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[117]">DSI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[12e]">D_Endoom</a> from d_main.o(i.D_Endoom) referenced from d_main.o(i.D_DoomMain)
 <LI><a href="#[12c]">D_ForeachFileHdlr</a> from d_main.o(i.D_ForeachFileHdlr) referenced from d_main.o(i.D_AddPwads)
 <LI><a href="#[145]">D_ForeachFileHdlr</a> from m_menu.o(i.D_ForeachFileHdlr) referenced from m_menu.o(i.M_SetLevel)
 <LI><a href="#[12d]">D_GrabMouseCallback</a> from d_main.o(i.D_GrabMouseCallback) referenced from d_main.o(i.D_DoomLoop)
 <LI><a href="#[2d]">D_ProcessEvents</a> from d_main.o(i.D_ProcessEvents) referenced 2 times from d_net.o(.data)
 <LI><a href="#[132]">D_QuitNetGame</a> from d_loop.o(i.D_QuitNetGame) referenced from d_loop.o(i.D_InitNetGame)
 <LI><a href="#[b3]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f3]">ETH_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f4]">ETH_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[bc]">EXTI0_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[de]">EXTI15_10_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[bd]">EXTI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[be]">EXTI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[bf]">EXTI3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[c0]">EXTI4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[cd]">EXTI9_5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[13f]">ExpandSoundData_SDL</a> from i_sdlsound.o(i.ExpandSoundData_SDL) referenced from i_sdlsound.o(i.I_SDL_InitSound)
 <LI><a href="#[ba]">FLASH_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e6]">FMC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[106]">FPU_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2e]">G_BuildTiccmd</a> from g_game.o(i.G_BuildTiccmd) referenced 2 times from d_net.o(.data)
 <LI><a href="#[130]">G_CheckDemoStatus</a> from g_game.o(i.G_CheckDemoStatus) referenced from d_main.o(i.D_DoomMain)
 <LI><a href="#[ae]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d6]">I2C1_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d5]">I2C1_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d8]">I2C2_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d7]">I2C2_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[ff]">I2C3_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[fe]">I2C3_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[115]">I2C4_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[114]">I2C4_EV_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[4]">I_SDL_GetSfxLumpNum</a> from i_sdlsound.o(i.I_SDL_GetSfxLumpNum) referenced 2 times from i_sdlsound.o(.data)
 <LI><a href="#[2]">I_SDL_InitSound</a> from i_sdlsound.o(i.I_SDL_InitSound) referenced 2 times from i_sdlsound.o(.data)
 <LI><a href="#[a]">I_SDL_PrecacheSounds</a> from i_sdlsound.o(i.I_SDL_PrecacheSounds) referenced 2 times from i_sdlsound.o(.data)
 <LI><a href="#[3]">I_SDL_ShutdownSound</a> from i_sdlsound.o(i.I_SDL_ShutdownSound) referenced 2 times from i_sdlsound.o(.data)
 <LI><a href="#[9]">I_SDL_SoundIsPlaying</a> from i_sdlsound.o(i.I_SDL_SoundIsPlaying) referenced 2 times from i_sdlsound.o(.data)
 <LI><a href="#[7]">I_SDL_StartSound</a> from i_sdlsound.o(i.I_SDL_StartSound) referenced 2 times from i_sdlsound.o(.data)
 <LI><a href="#[8]">I_SDL_StopSound</a> from i_sdlsound.o(i.I_SDL_StopSound) referenced 2 times from i_sdlsound.o(.data)
 <LI><a href="#[5]">I_SDL_UpdateSound</a> from i_sdlsound.o(i.I_SDL_UpdateSound) referenced 2 times from i_sdlsound.o(.data)
 <LI><a href="#[6]">I_SDL_UpdateSoundParams</a> from i_sdlsound.o(i.I_SDL_UpdateSoundParams) referenced 2 times from i_sdlsound.o(.data)
 <LI><a href="#[121]">JPEG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[112]">LPTIM1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[10e]">LTDC_ER_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[10d]">LTDC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[122]">MDIOS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[90]">M_ChangeDetail</a> from m_menu.o(i.M_ChangeDetail) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[8f]">M_ChangeMessages</a> from m_menu.o(i.M_ChangeMessages) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[8a]">M_ChooseSkill</a> from m_menu.o(i.M_ChooseSkill) referenced 10 times from m_menu.o(.data)
 <LI><a href="#[89]">M_DrawEpisode</a> from m_menu.o(i.M_DrawEpisode) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[9d]">M_DrawLoad</a> from m_menu.o(i.M_DrawLoad) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[87]">M_DrawMainMenu</a> from m_menu.o(i.M_DrawMainMenu) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[8b]">M_DrawNewGame</a> from m_menu.o(i.M_DrawNewGame) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[8d]">M_DrawNewLevel</a> from m_menu.o(i.M_DrawNewLevel) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[94]">M_DrawOptions</a> from m_menu.o(i.M_DrawOptions) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[96]">M_DrawReadThis1</a> from m_menu.o(i.M_DrawReadThis1) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[98]">M_DrawReadThis2</a> from m_menu.o(i.M_DrawReadThis2) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[9f]">M_DrawSave</a> from m_menu.o(i.M_DrawSave) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[9b]">M_DrawSound</a> from m_menu.o(i.M_DrawSound) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[8e]">M_EndGame</a> from m_menu.o(i.M_EndGame) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[141]">M_EndGameResponse</a> from m_menu.o(i.M_EndGameResponse) referenced from m_menu.o(i.M_EndGame)
 <LI><a href="#[88]">M_Episode</a> from m_menu.o(i.M_Episode) referenced 8 times from m_menu.o(.data)
 <LI><a href="#[97]">M_FinishReadThis</a> from m_menu.o(i.M_FinishReadThis) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[83]">M_LoadGame</a> from m_menu.o(i.M_LoadGame) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[9c]">M_LoadSelect</a> from m_menu.o(i.M_LoadSelect) referenced 12 times from m_menu.o(.data)
 <LI><a href="#[92]">M_MouseStub</a> from m_menu.o(i.M_MouseStub) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[9a]">M_MusicVol</a> from m_menu.o(i.M_MusicVol) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[81]">M_NewGame</a> from m_menu.o(i.M_NewGame) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[82]">M_Options</a> from m_menu.o(i.M_Options) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[142]">M_QuickLoadResponse</a> from m_menu.o(i.M_QuickLoadResponse) referenced from m_menu.o(i.M_QuickLoad)
 <LI><a href="#[143]">M_QuickSaveResponse</a> from m_menu.o(i.M_QuickSaveResponse) referenced from m_menu.o(i.M_QuickSave)
 <LI><a href="#[86]">M_QuitDOOM</a> from m_menu.o(i.M_QuitDOOM) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[144]">M_QuitResponse</a> from m_menu.o(i.M_QuitResponse) referenced from m_menu.o(i.M_QuitDOOM)
 <LI><a href="#[144]">M_QuitResponse</a> from m_menu.o(i.M_QuitResponse) referenced from m_menu.o(i.M_Responder)
 <LI><a href="#[85]">M_ReadThis</a> from m_menu.o(i.M_ReadThis) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[95]">M_ReadThis2</a> from m_menu.o(i.M_ReadThis2) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[12f]">M_SaveDefaults</a> from m_config.o(i.M_SaveDefaults) referenced from d_main.o(i.D_DoomMain)
 <LI><a href="#[84]">M_SaveGame</a> from m_menu.o(i.M_SaveGame) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[9e]">M_SaveSelect</a> from m_menu.o(i.M_SaveSelect) referenced 12 times from m_menu.o(.data)
 <LI><a href="#[8c]">M_SetLevel</a> from m_menu.o(i.M_SetLevel) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[99]">M_SfxVol</a> from m_menu.o(i.M_SfxVol) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[91]">M_SizeDisplay</a> from m_menu.o(i.M_SizeDisplay) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[93]">M_Sound</a> from m_menu.o(i.M_Sound) referenced 2 times from m_menu.o(.data)
 <LI><a href="#[30]">M_Ticker</a> from m_menu.o(i.M_Ticker) referenced 2 times from d_net.o(.data)
 <LI><a href="#[140]">M_VerifyNightmare</a> from m_menu.o(i.M_VerifyNightmare) referenced from m_menu.o(i.M_ChooseSkill)
 <LI><a href="#[af]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[ad]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[f9]">OTG_FS_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e0]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[101]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[100]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[103]">OTG_HS_IRQHandler</a> from stm32f7xx_it.o(i.OTG_HS_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[102]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[14f]">PIT_AddLineIntercepts</a> from p_maputl.o(i.PIT_AddLineIntercepts) referenced from p_maputl.o(i.P_PathTraverse)
 <LI><a href="#[150]">PIT_AddThingIntercepts</a> from p_maputl.o(i.PIT_AddThingIntercepts) referenced from p_maputl.o(i.P_PathTraverse)
 <LI><a href="#[14a]">PIT_ChangeSector</a> from p_map.o(i.PIT_ChangeSector) referenced from p_map.o(i.P_ChangeSector)
 <LI><a href="#[14c]">PIT_CheckLine</a> from p_map.o(i.PIT_CheckLine) referenced from p_map.o(i.P_CheckPosition)
 <LI><a href="#[14b]">PIT_CheckThing</a> from p_map.o(i.PIT_CheckThing) referenced from p_map.o(i.P_CheckPosition)
 <LI><a href="#[151]">PIT_RadiusAttack</a> from p_map.o(i.PIT_RadiusAttack) referenced from p_map.o(i.P_RadiusAttack)
 <LI><a href="#[155]">PIT_StompThing</a> from p_map.o(i.PIT_StompThing) referenced from p_map.o(i.P_TeleportMove)
 <LI><a href="#[12b]">PIT_VileCheck</a> from p_enemy.o(i.PIT_VileCheck) referenced from p_enemy.o(i.A_VileChase)
 <LI><a href="#[146]">PTR_AimTraverse</a> from p_map.o(i.PTR_AimTraverse) referenced from p_map.o(i.P_AimLineAttack)
 <LI><a href="#[14d]">PTR_ShootTraverse</a> from p_map.o(i.PTR_ShootTraverse) referenced from p_map.o(i.P_LineAttack)
 <LI><a href="#[153]">PTR_SlideTraverse</a> from p_map.o(i.PTR_SlideTraverse) referenced from p_map.o(i.P_SlideMove)
 <LI><a href="#[156]">PTR_UseTraverse</a> from p_map.o(i.PTR_UseTraverse) referenced from p_map.o(i.P_UseLines)
 <LI><a href="#[b7]">PVD_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[12a]">P_MobjThinker</a> from p_mobj.o(i.P_MobjThinker) referenced from p_enemy.o(i.A_BossDeath)
 <LI><a href="#[12a]">P_MobjThinker</a> from p_mobj.o(i.P_MobjThinker) referenced from p_enemy.o(i.A_BrainAwake)
 <LI><a href="#[12a]">P_MobjThinker</a> from p_mobj.o(i.P_MobjThinker) referenced from p_enemy.o(i.A_KeenDie)
 <LI><a href="#[12a]">P_MobjThinker</a> from p_mobj.o(i.P_MobjThinker) referenced from p_enemy.o(i.A_PainShootSkull)
 <LI><a href="#[12a]">P_MobjThinker</a> from p_mobj.o(i.P_MobjThinker) referenced from p_telept.o(i.EV_Teleport)
 <LI><a href="#[12a]">P_MobjThinker</a> from p_mobj.o(i.P_MobjThinker) referenced from p_saveg.o(i.P_ArchiveThinkers)
 <LI><a href="#[12a]">P_MobjThinker</a> from p_mobj.o(i.P_MobjThinker) referenced from p_mobj.o(i.P_SpawnMobj)
 <LI><a href="#[12a]">P_MobjThinker</a> from p_mobj.o(i.P_MobjThinker) referenced from p_saveg.o(i.P_UnArchiveThinkers)
 <LI><a href="#[12a]">P_MobjThinker</a> from p_mobj.o(i.P_MobjThinker) referenced from r_data.o(i.R_PrecacheLevel)
 <LI><a href="#[b4]">PendSV_Handler</a> from stm32f7xx_it.o(i.PendSV_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[111]">QUADSPI_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[bb]">RCC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[105]">RNG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[df]">RTC_Alarm_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[b9]">RTC_WKUP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[157]">R_DrawColumn</a> from r_draw.o(i.R_DrawColumn) referenced from r_main.o(i.R_ExecuteSetViewSize)
 <LI><a href="#[15b]">R_DrawColumnLow</a> from r_draw.o(i.R_DrawColumnLow) referenced from r_main.o(i.R_ExecuteSetViewSize)
 <LI><a href="#[158]">R_DrawFuzzColumn</a> from r_draw.o(i.R_DrawFuzzColumn) referenced from r_main.o(i.R_ExecuteSetViewSize)
 <LI><a href="#[15c]">R_DrawFuzzColumnLow</a> from r_draw.o(i.R_DrawFuzzColumnLow) referenced from r_main.o(i.R_ExecuteSetViewSize)
 <LI><a href="#[15a]">R_DrawSpan</a> from r_draw.o(i.R_DrawSpan) referenced from r_main.o(i.R_ExecuteSetViewSize)
 <LI><a href="#[15e]">R_DrawSpanLow</a> from r_draw.o(i.R_DrawSpanLow) referenced from r_main.o(i.R_ExecuteSetViewSize)
 <LI><a href="#[159]">R_DrawTranslatedColumn</a> from r_draw.o(i.R_DrawTranslatedColumn) referenced from r_main.o(i.R_ExecuteSetViewSize)
 <LI><a href="#[15d]">R_DrawTranslatedColumnLow</a> from r_draw.o(i.R_DrawTranslatedColumnLow) referenced from r_main.o(i.R_ExecuteSetViewSize)
 <LI><a href="#[ac]">Reset_Handler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[2f]">RunTic</a> from d_net.o(i.RunTic) referenced 2 times from d_net.o(.data)
 <LI><a href="#[10c]">SAI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[110]">SAI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[139]">SAI_DMAError</a> from stm32f7xx_hal_sai.o(i.SAI_DMAError) referenced from stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[138]">SAI_DMATxCplt</a> from stm32f7xx_hal_sai.o(i.SAI_DMATxCplt) referenced from stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[137]">SAI_DMATxHalfCplt</a> from stm32f7xx_hal_sai.o(i.SAI_DMATxHalfCplt) referenced from stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
 <LI><a href="#[e7]">SDMMC1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[11c]">SDMMC2_IRQHandler</a> from stm32f7xx_it.o(i.SDMMC2_IRQHandler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[13d]">SD_DMAError</a> from stm32f7xx_hal_sd.o(i.SD_DMAError) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[13d]">SD_DMAError</a> from stm32f7xx_hal_sd.o(i.SD_DMAError) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[13c]">SD_DMAReceiveCplt</a> from stm32f7xx_hal_sd.o(i.SD_DMAReceiveCplt) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[13b]">SD_DMARxAbort</a> from stm32f7xx_hal_sd.o(i.SD_DMARxAbort) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[13e]">SD_DMATransmitCplt</a> from stm32f7xx_hal_sd.o(i.SD_DMATransmitCplt) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[13a]">SD_DMATxAbort</a> from stm32f7xx_hal_sd.o(i.SD_DMATxAbort) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[16c]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[170]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[16e]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[16d]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[16f]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[116]">SPDIF_RX_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d9]">SPI1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[da]">SPI2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e9]">SPI3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[109]">SPI4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[10a]">SPI5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[10b]">SPI6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[15f]">ST_loadCallback</a> from st_stuff.o(i.ST_loadCallback) referenced from st_stuff.o(i.ST_loadGraphics)
 <LI><a href="#[b2]">SVC_Handler</a> from stm32f7xx_it.o(i.SVC_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[160]">S_Shutdown</a> from s_sound.o(i.S_Shutdown) referenced from s_sound.o(i.S_Init)
 <LI><a href="#[131]">StatDump</a> from statdump.o(i.StatDump) referenced from d_main.o(i.D_DoomMain)
 <LI><a href="#[b5]">SysTick_Handler</a> from stm32f7xx_it.o(i.SysTick_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[124]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f769xx.o(.text)
 <LI><a href="#[b8]">TAMP_STAMP_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[ce]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d1]">TIM1_CC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d0]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[cf]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d2]">TIM2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d3]">TIM3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[d4]">TIM4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e8]">TIM5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[ec]">TIM6_DAC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[ed]">TIM7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e1]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e4]">TIM8_CC_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e3]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[e2]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[154]">T_FireFlicker</a> from p_lights.o(i.T_FireFlicker) referenced from p_lights.o(i.P_SpawnFireFlicker)
 <LI><a href="#[149]">T_Glow</a> from p_lights.o(i.T_Glow) referenced from p_saveg.o(i.P_ArchiveSpecials)
 <LI><a href="#[149]">T_Glow</a> from p_lights.o(i.T_Glow) referenced from p_lights.o(i.P_SpawnGlowingLight)
 <LI><a href="#[149]">T_Glow</a> from p_lights.o(i.T_Glow) referenced from p_saveg.o(i.P_UnArchiveSpecials)
 <LI><a href="#[147]">T_LightFlash</a> from p_lights.o(i.T_LightFlash) referenced from p_saveg.o(i.P_ArchiveSpecials)
 <LI><a href="#[147]">T_LightFlash</a> from p_lights.o(i.T_LightFlash) referenced from p_lights.o(i.P_SpawnLightFlash)
 <LI><a href="#[147]">T_LightFlash</a> from p_lights.o(i.T_LightFlash) referenced from p_saveg.o(i.P_UnArchiveSpecials)
 <LI><a href="#[134]">T_MoveCeiling</a> from p_ceilng.o(i.T_MoveCeiling) referenced from p_ceilng.o(i.EV_DoCeiling)
 <LI><a href="#[134]">T_MoveCeiling</a> from p_ceilng.o(i.T_MoveCeiling) referenced from p_ceilng.o(i.P_ActivateInStasisCeiling)
 <LI><a href="#[134]">T_MoveCeiling</a> from p_ceilng.o(i.T_MoveCeiling) referenced from p_saveg.o(i.P_ArchiveSpecials)
 <LI><a href="#[134]">T_MoveCeiling</a> from p_ceilng.o(i.T_MoveCeiling) referenced from p_saveg.o(i.P_UnArchiveSpecials)
 <LI><a href="#[133]">T_MoveFloor</a> from p_floor.o(i.T_MoveFloor) referenced from p_floor.o(i.EV_BuildStairs)
 <LI><a href="#[133]">T_MoveFloor</a> from p_floor.o(i.T_MoveFloor) referenced from p_spec.o(i.EV_DoDonut)
 <LI><a href="#[133]">T_MoveFloor</a> from p_floor.o(i.T_MoveFloor) referenced from p_floor.o(i.EV_DoFloor)
 <LI><a href="#[133]">T_MoveFloor</a> from p_floor.o(i.T_MoveFloor) referenced from p_saveg.o(i.P_ArchiveSpecials)
 <LI><a href="#[133]">T_MoveFloor</a> from p_floor.o(i.T_MoveFloor) referenced from p_saveg.o(i.P_UnArchiveSpecials)
 <LI><a href="#[136]">T_PlatRaise</a> from p_plats.o(i.T_PlatRaise) referenced from p_plats.o(i.EV_DoPlat)
 <LI><a href="#[136]">T_PlatRaise</a> from p_plats.o(i.T_PlatRaise) referenced from p_doors.o(i.EV_VerticalDoor)
 <LI><a href="#[136]">T_PlatRaise</a> from p_plats.o(i.T_PlatRaise) referenced from p_plats.o(i.P_ActivateInStasis)
 <LI><a href="#[136]">T_PlatRaise</a> from p_plats.o(i.T_PlatRaise) referenced from p_saveg.o(i.P_ArchiveSpecials)
 <LI><a href="#[136]">T_PlatRaise</a> from p_plats.o(i.T_PlatRaise) referenced from p_saveg.o(i.P_UnArchiveSpecials)
 <LI><a href="#[148]">T_StrobeFlash</a> from p_lights.o(i.T_StrobeFlash) referenced from p_saveg.o(i.P_ArchiveSpecials)
 <LI><a href="#[148]">T_StrobeFlash</a> from p_lights.o(i.T_StrobeFlash) referenced from p_lights.o(i.P_SpawnStrobeFlash)
 <LI><a href="#[148]">T_StrobeFlash</a> from p_lights.o(i.T_StrobeFlash) referenced from p_saveg.o(i.P_UnArchiveSpecials)
 <LI><a href="#[135]">T_VerticalDoor</a> from p_doors.o(i.T_VerticalDoor) referenced from p_doors.o(i.EV_DoDoor)
 <LI><a href="#[135]">T_VerticalDoor</a> from p_doors.o(i.T_VerticalDoor) referenced from p_doors.o(i.EV_VerticalDoor)
 <LI><a href="#[135]">T_VerticalDoor</a> from p_doors.o(i.T_VerticalDoor) referenced from p_saveg.o(i.P_ArchiveSpecials)
 <LI><a href="#[135]">T_VerticalDoor</a> from p_doors.o(i.T_VerticalDoor) referenced from p_doors.o(i.P_SpawnDoorCloseIn30)
 <LI><a href="#[135]">T_VerticalDoor</a> from p_doors.o(i.T_VerticalDoor) referenced from p_doors.o(i.P_SpawnDoorRaiseIn5Mins)
 <LI><a href="#[135]">T_VerticalDoor</a> from p_doors.o(i.T_VerticalDoor) referenced from p_saveg.o(i.P_UnArchiveSpecials)
 <LI><a href="#[ea]">UART4_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[eb]">UART5_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[107]">UART7_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[108]">UART8_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[db]">USART1_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[dc]">USART2_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[dd]">USART3_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[fd]">USART6_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[a9]">USBH_HID_ClassRequest</a> from usbh_hid.o(i.USBH_HID_ClassRequest) referenced 2 times from usbh_hid.o(.data)
 <LI><a href="#[163]">USBH_HID_GamepadInit</a> from usb_hid_gamepad.o(i.USBH_HID_GamepadInit) referenced from usbh_hid.o(i.USBH_HID_InterfaceInit)
 <LI><a href="#[a8]">USBH_HID_InterfaceDeInit</a> from usbh_hid.o(i.USBH_HID_InterfaceDeInit) referenced 2 times from usbh_hid.o(.data)
 <LI><a href="#[a7]">USBH_HID_InterfaceInit</a> from usbh_hid.o(i.USBH_HID_InterfaceInit) referenced 2 times from usbh_hid.o(.data)
 <LI><a href="#[161]">USBH_HID_KeybdInit</a> from usbh_hid_keybd.o(i.USBH_HID_KeybdInit) referenced from usbh_hid.o(i.USBH_HID_InterfaceInit)
 <LI><a href="#[162]">USBH_HID_MouseInit</a> from usbh_hid_mouse.o(i.USBH_HID_MouseInit) referenced from usbh_hid.o(i.USBH_HID_InterfaceInit)
 <LI><a href="#[aa]">USBH_HID_Process</a> from usbh_hid.o(i.USBH_HID_Process) referenced 2 times from usbh_hid.o(.data)
 <LI><a href="#[ab]">USBH_HID_SOFProcess</a> from usbh_hid.o(i.USBH_HID_SOFProcess) referenced 2 times from usbh_hid.o(.data)
 <LI><a href="#[168]">USBH_UserProcess</a> from usb_hid_gamepad.o(i.USBH_UserProcess) referenced from usb_hid_gamepad.o(i.gamepad_init)
 <LI><a href="#[b1]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[164]">WI_loadCallback</a> from wi_stuff.o(i.WI_loadCallback) referenced from wi_stuff.o(i.WI_loadData)
 <LI><a href="#[165]">WI_unloadCallback</a> from wi_stuff.o(i.WI_unloadCallback) referenced from wi_stuff.o(i.WI_unloadData)
 <LI><a href="#[b6]">WWDG_IRQHandler</a> from startup_stm32f769xx.o(.text) referenced from startup_stm32f769xx.o(RESET)
 <LI><a href="#[a3]">W_StdC_CloseFile</a> from w_file_stdc.o(i.W_StdC_CloseFile) referenced 2 times from w_file_stdc.o(.data)
 <LI><a href="#[a6]">W_StdC_Foreach</a> from w_file_stdc.o(i.W_StdC_Foreach) referenced 2 times from w_file_stdc.o(.data)
 <LI><a href="#[a5]">W_StdC_MMapFile</a> from w_file_stdc.o(i.W_StdC_MMapFile) referenced 2 times from w_file_stdc.o(.data)
 <LI><a href="#[a2]">W_StdC_OpenFile</a> from w_file_stdc.o(i.W_StdC_OpenFile) referenced 2 times from w_file_stdc.o(.data)
 <LI><a href="#[a4]">W_StdC_Read</a> from w_file_stdc.o(i.W_StdC_Read) referenced 2 times from w_file_stdc.o(.data)
 <LI><a href="#[125]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f769xx.o(.text)
 <LI><a href="#[127]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[128]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[126]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[166]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[166]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[167]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[b]">adv7533_AudioInit</a> from adv7533.o(i.adv7533_AudioInit) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[c]">adv7533_DeInit</a> from adv7533.o(i.adv7533_DeInit) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[f]">adv7533_Pause</a> from adv7533.o(i.adv7533_Pause) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[e]">adv7533_Play</a> from adv7533.o(i.adv7533_Play) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[d]">adv7533_ReadID</a> from adv7533.o(i.adv7533_ReadID) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[16]">adv7533_Reset</a> from adv7533.o(i.adv7533_Reset) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[10]">adv7533_Resume</a> from adv7533.o(i.adv7533_Resume) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[12]">adv7533_SetFrequency</a> from adv7533.o(i.adv7533_SetFrequency) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[14]">adv7533_SetMute</a> from adv7533.o(i.adv7533_SetMute) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[15]">adv7533_SetOutputMode</a> from adv7533.o(i.adv7533_SetOutputMode) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[13]">adv7533_SetVolume</a> from adv7533.o(i.adv7533_SetVolume) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[11]">adv7533_Stop</a> from adv7533.o(i.adv7533_Stop) referenced 2 times from adv7533.o(.data)
 <LI><a href="#[17]">ft6x06_Init</a> from ft6x06.o(i.ft6x06_Init) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[18]">ft6x06_ReadID</a> from ft6x06.o(i.ft6x06_ReadID) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[19]">ft6x06_Reset</a> from ft6x06.o(i.ft6x06_Reset) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1e]">ft6x06_TS_ClearIT</a> from ft6x06.o(i.ft6x06_TS_ClearIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1b]">ft6x06_TS_DetectTouch</a> from ft6x06.o(i.ft6x06_TS_DetectTouch) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[20]">ft6x06_TS_DisableIT</a> from ft6x06.o(i.ft6x06_TS_DisableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1d]">ft6x06_TS_EnableIT</a> from ft6x06.o(i.ft6x06_TS_EnableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1c]">ft6x06_TS_GetXY</a> from ft6x06.o(i.ft6x06_TS_GetXY) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1f]">ft6x06_TS_ITStatus</a> from ft6x06.o(i.ft6x06_TS_ITStatus) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1a]">ft6x06_TS_Start</a> from ft6x06.o(i.ft6x06_TS_Start) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[129]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[169]">ll_ready_empty_handle</a> from audio_main.o(i.ll_ready_empty_handle) referenced from audio_main.o(i.ll_init)
 <LI><a href="#[16a]">ll_ready_first_link_handle</a> from audio_main.o(i.ll_ready_first_link_handle) referenced from audio_main.o(i.ll_init)
 <LI><a href="#[16b]">ll_ready_remove_handle</a> from audio_main.o(i.ll_ready_remove_handle) referenced from audio_main.o(i.ll_init)
 <LI><a href="#[123]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[14e]">saveg_read8_buf</a> from p_saveg.o(i.saveg_read8_buf) referenced from p_saveg.o(i.P_LoadBegin)
 <LI><a href="#[a1]">saveg_read8_file</a> from p_saveg.o(i.saveg_read8_file) referenced 2 times from p_saveg.o(.data)
 <LI><a href="#[a1]">saveg_read8_file</a> from p_saveg.o(i.saveg_read8_file) referenced from p_saveg.o(i.P_LoadEnd)
 <LI><a href="#[152]">saveg_write8_buf</a> from p_saveg.o(i.saveg_write8_buf) referenced from p_saveg.o(i.P_SaveBegin)
 <LI><a href="#[a0]">saveg_write8_file</a> from p_saveg.o(i.saveg_write8_file) referenced 2 times from p_saveg.o(.data)
 <LI><a href="#[a0]">saveg_write8_file</a> from p_saveg.o(i.saveg_write8_file) referenced from p_saveg.o(i.P_SaveEnd)
 <LI><a href="#[32]">wipe_doColorXForm</a> from f_wipe.o(i.wipe_doColorXForm) referenced 2 times from f_wipe.o(.data)
 <LI><a href="#[35]">wipe_doMelt</a> from f_wipe.o(i.wipe_doMelt) referenced 2 times from f_wipe.o(.data)
 <LI><a href="#[33]">wipe_exitColorXForm</a> from f_wipe.o(i.wipe_exitColorXForm) referenced 2 times from f_wipe.o(.data)
 <LI><a href="#[36]">wipe_exitMelt</a> from f_wipe.o(i.wipe_exitMelt) referenced 2 times from f_wipe.o(.data)
 <LI><a href="#[31]">wipe_initColorXForm</a> from f_wipe.o(i.wipe_initColorXForm) referenced 2 times from f_wipe.o(.data)
 <LI><a href="#[34]">wipe_initMelt</a> from f_wipe.o(i.wipe_initMelt) referenced 2 times from f_wipe.o(.data)
 <LI><a href="#[22]">wm8994_DeInit</a> from wm8994.o(i.wm8994_DeInit) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[21]">wm8994_Init</a> from wm8994.o(i.wm8994_Init) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[25]">wm8994_Pause</a> from wm8994.o(i.wm8994_Pause) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[24]">wm8994_Play</a> from wm8994.o(i.wm8994_Play) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[23]">wm8994_ReadID</a> from wm8994.o(i.wm8994_ReadID) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[2c]">wm8994_Reset</a> from wm8994.o(i.wm8994_Reset) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[26]">wm8994_Resume</a> from wm8994.o(i.wm8994_Resume) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[28]">wm8994_SetFrequency</a> from wm8994.o(i.wm8994_SetFrequency) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[2a]">wm8994_SetMute</a> from wm8994.o(i.wm8994_SetMute) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[2b]">wm8994_SetOutputMode</a> from wm8994.o(i.wm8994_SetOutputMode) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[29]">wm8994_SetVolume</a> from wm8994.o(i.wm8994_SetVolume) referenced 2 times from wm8994.o(.data)
 <LI><a href="#[27]">wm8994_Stop</a> from wm8994.o(i.wm8994_Stop) referenced 2 times from wm8994.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[125]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(.text)
</UL>
<P><STRONG><a name="[666]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[171]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[667]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[668]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[669]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[66a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[66b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ac]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMP_STAMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMP_STAMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WKUP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WKUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_ER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_EP1_OUT_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_EP1_OUT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_EP1_IN_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_EP1_IN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_WKUP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_WKUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_ER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUADSPI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUADSPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_ER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_RX_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_RX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>DSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM1_FLT0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM1_FLT0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM1_FLT1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM1_FLT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM1_FLT2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM1_FLT2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM1_FLT3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM1_FLT3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_TX_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_SCE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_SCE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f769xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIOS_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDIOS_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandSoundData_SDL
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[176]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGameName
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[129]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[30a]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_TextWrite
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastPrint
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_keyInIText
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_drawTextLine
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ExtractFileBase
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteText
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringWidth
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpNameHash
</UL>

<P><STRONG><a name="[66c]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_read
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawBlock
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ReadScreen
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_shittyColMajorXform
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_initMelt
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_initColorXForm
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_TextWrite
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FillBackScreen
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_VideoErase
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseDemoBuffer
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cht_GetParam
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawColumnInCache
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_StoreWallRange
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_CopyRect
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[24a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildNewTic
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_PostEvent
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatCopy
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_key_up
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Start
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteDefs
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawLF
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtendLumpInfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_OpenFile
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_MMapFile
</UL>

<P><STRONG><a name="[35b]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGameName
</UL>

<P><STRONG><a name="[4db]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClipSolidWallSegment
</UL>

<P><STRONG><a name="[66d]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_clearFB
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FindPlane
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadRejectArray
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteDefs
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_CheckPlane
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[66e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[66f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_reset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetLevel
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateLookup
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PrecacheLevel
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePCXfile
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildNewTic
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_init
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_invalidate
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_reset
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_BuildTiccmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GenerateHashTable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PlayerReborn
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PlayerFinishLevel
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadLevel
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTextureHashTable
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UpdateSpecials
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnSpecials
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSubsectors
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSideDefs
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSegs
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSectors
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadLineDefs
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadBlockMap
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSectorAtNullAddress
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClearPlanes
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtendLumpInfo
</UL>

<P><STRONG><a name="[670]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[43d]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ext_sound
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snd_cache_set_name
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_MakeDirectory
</UL>

<P><STRONG><a name="[432]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawOPLDev
</UL>

<P><STRONG><a name="[2e1]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGameName
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringJoin
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirIsFile
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cht_CheckCheat
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Ticker
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveGameFile
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringEndsWith
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Drawer
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_PrintBanner
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_RecordDemo
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringConcat
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ExtractFileBase
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringWidth
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringHeight
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SaveSelect
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_MakeDirectory
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_UpdateString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_Foreach
</UL>

<P><STRONG><a name="[259]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGameVersion
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDirectoryHasIWAD
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringEndsWith
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetConfigDir
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_GetSaveGameDir
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ReadSaveGameHeader
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SaveSelect
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCollection
</UL>

<P><STRONG><a name="[65e]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
</UL>

<P><STRONG><a name="[5ca]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_Foreach
</UL>

<P><STRONG><a name="[424]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyIWADByName
</UL>

<P><STRONG><a name="[17a]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMissionForPackName
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyIWADByName
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirIsFile
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoAdvanceDemo
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetMemoryValue
</UL>

<P><STRONG><a name="[17c]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_IdentifyVersion
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_CheckTextureNumForName
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteDefs
</UL>

<P><STRONG><a name="[17d]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StrToInt
</UL>

<P><STRONG><a name="[17f]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[181]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_RecordDemo
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ZoneBase
</UL>

<P><STRONG><a name="[671]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5de]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[672]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[673]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[180]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[17e]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[126]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[183]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[674]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5db]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[172]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[675]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[676]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[185]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[189]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[188]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[677]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[678]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>ADV7533_Configure</STRONG> (Thumb, 434 bytes, Stack size 16 bytes, adv7533.o(i.ADV7533_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ADV7533_Configure &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[193]"></a>ADV7533_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, adv7533.o(i.ADV7533_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ADV7533_Init &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[195]"></a>ADV7533_PowerOn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adv7533.o(i.ADV7533_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ADV7533_PowerOn &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[196]"></a>AM_Drawer</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, am_map.o(i.AM_Drawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AM_Drawer &rArr; AM_drawThings &rArr; AM_drawLineCharacter &rArr; AM_drawMline &rArr; AM_clipMline &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_MarkRect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawWalls
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawThings
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawPlayers
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawMarks
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawGrid
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawCrosshair
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_clearFB
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[19f]"></a>AM_LevelInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, am_map.o(i.AM_LevelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AM_LevelInit &rArr; AM_findMinMaxBoundaries
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_findMinMaxBoundaries
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_clearMarks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Start
</UL>

<P><STRONG><a name="[1a3]"></a>AM_Responder</STRONG> (Thumb, 674 bytes, Stack size 24 bytes, am_map.o(i.AM_Responder))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = AM_Responder &rArr; AM_Start &rArr; AM_initVariables &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cht_CheckCheat
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_saveScaleAndLoc
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_restoreScaleAndLoc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_minOutWindowScale
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_clearMarks
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_addMark
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Stop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Start
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Responder
</UL>

<P><STRONG><a name="[1a4]"></a>AM_Start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, am_map.o(i.AM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = AM_Start &rArr; AM_initVariables &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_loadPics
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_initVariables
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Stop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_LevelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
</UL>

<P><STRONG><a name="[1a6]"></a>AM_Stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, am_map.o(i.AM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Responder
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_unloadPics
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Start
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoCompleted
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_KillMobj
</UL>

<P><STRONG><a name="[1b1]"></a>AM_Ticker</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, am_map.o(i.AM_Ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AM_Ticker &rArr; AM_changeWindowScale &rArr; AM_minOutWindowScale &rArr; AM_activateNewScale &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_doFollowPlayer
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_changeWindowScale
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_changeWindowLoc
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[1b5]"></a>AM_activateNewScale</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, am_map.o(i.AM_activateNewScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AM_activateNewScale &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_minOutWindowScale
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_maxOutWindowScale
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_changeWindowScale
</UL>

<P><STRONG><a name="[1ab]"></a>AM_addMark</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, am_map.o(i.AM_addMark))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
</UL>

<P><STRONG><a name="[1b4]"></a>AM_changeWindowLoc</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, am_map.o(i.AM_changeWindowLoc))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_initVariables
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Ticker
</UL>

<P><STRONG><a name="[1b3]"></a>AM_changeWindowScale</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, am_map.o(i.AM_changeWindowScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AM_changeWindowScale &rArr; AM_minOutWindowScale &rArr; AM_activateNewScale &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_minOutWindowScale
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_maxOutWindowScale
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_activateNewScale
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Ticker
</UL>

<P><STRONG><a name="[197]"></a>AM_clearFB</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, am_map.o(i.AM_clearFB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AM_clearFB
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Drawer
</UL>

<P><STRONG><a name="[1a0]"></a>AM_clearMarks</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, am_map.o(i.AM_clearMarks))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_LevelInit
</UL>

<P><STRONG><a name="[1b7]"></a>AM_clipMline</STRONG> (Thumb, 750 bytes, Stack size 40 bytes, am_map.o(i.AM_clipMline))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AM_clipMline &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawMline
</UL>

<P><STRONG><a name="[1b2]"></a>AM_doFollowPlayer</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, am_map.o(i.AM_doFollowPlayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AM_doFollowPlayer &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Ticker
</UL>

<P><STRONG><a name="[19c]"></a>AM_drawCrosshair</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, am_map.o(i.AM_drawCrosshair))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AM_drawCrosshair
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Drawer
</UL>

<P><STRONG><a name="[1bc]"></a>AM_drawFline</STRONG> (Thumb, 330 bytes, Stack size 36 bytes, am_map.o(i.AM_drawFline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AM_drawFline
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawMline
</UL>

<P><STRONG><a name="[198]"></a>AM_drawGrid</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, am_map.o(i.AM_drawGrid))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AM_drawGrid &rArr; AM_drawMline &rArr; AM_clipMline &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawMline
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Drawer
</UL>

<P><STRONG><a name="[1b9]"></a>AM_drawLineCharacter</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, am_map.o(i.AM_drawLineCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AM_drawLineCharacter &rArr; AM_drawMline &rArr; AM_clipMline &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_rotate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawMline
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawThings
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawPlayers
</UL>

<P><STRONG><a name="[19d]"></a>AM_drawMarks</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, am_map.o(i.AM_drawMarks))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AM_drawMarks &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Drawer
</UL>

<P><STRONG><a name="[1b8]"></a>AM_drawMline</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, am_map.o(i.AM_drawMline))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AM_drawMline &rArr; AM_clipMline &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawFline
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_clipMline
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawWalls
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawLineCharacter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawGrid
</UL>

<P><STRONG><a name="[19a]"></a>AM_drawPlayers</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, am_map.o(i.AM_drawPlayers))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AM_drawPlayers &rArr; AM_drawLineCharacter &rArr; AM_drawMline &rArr; AM_clipMline &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawLineCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Drawer
</UL>

<P><STRONG><a name="[19b]"></a>AM_drawThings</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, am_map.o(i.AM_drawThings))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AM_drawThings &rArr; AM_drawLineCharacter &rArr; AM_drawMline &rArr; AM_clipMline &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawLineCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Drawer
</UL>

<P><STRONG><a name="[199]"></a>AM_drawWalls</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, am_map.o(i.AM_drawWalls))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AM_drawWalls &rArr; AM_drawMline &rArr; AM_clipMline &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawMline
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Drawer
</UL>

<P><STRONG><a name="[1a1]"></a>AM_findMinMaxBoundaries</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, am_map.o(i.AM_findMinMaxBoundaries))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AM_findMinMaxBoundaries
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_LevelInit
</UL>

<P><STRONG><a name="[1ad]"></a>AM_initVariables</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, am_map.o(i.AM_initVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = AM_initVariables &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Responder
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_changeWindowLoc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Start
</UL>

<P><STRONG><a name="[1ae]"></a>AM_loadPics</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, am_map.o(i.AM_loadPics))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AM_loadPics &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Start
</UL>

<P><STRONG><a name="[1b6]"></a>AM_maxOutWindowScale</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, am_map.o(i.AM_maxOutWindowScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AM_maxOutWindowScale &rArr; AM_activateNewScale &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_activateNewScale
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_changeWindowScale
</UL>

<P><STRONG><a name="[1a8]"></a>AM_minOutWindowScale</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, am_map.o(i.AM_minOutWindowScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AM_minOutWindowScale &rArr; AM_activateNewScale &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_activateNewScale
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_changeWindowScale
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
</UL>

<P><STRONG><a name="[1a9]"></a>AM_restoreScaleAndLoc</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, am_map.o(i.AM_restoreScaleAndLoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AM_restoreScaleAndLoc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
</UL>

<P><STRONG><a name="[1ba]"></a>AM_rotate</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, am_map.o(i.AM_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AM_rotate &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawLineCharacter
</UL>

<P><STRONG><a name="[1a7]"></a>AM_saveScaleAndLoc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, am_map.o(i.AM_saveScaleAndLoc))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
</UL>

<P><STRONG><a name="[1af]"></a>AM_unloadPics</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, am_map.o(i.AM_unloadPics))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AM_unloadPics &rArr; W_ReleaseLumpName &rArr; W_GetNumForName &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpName
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Stop
</UL>

<P><STRONG><a name="[5df]"></a>AUDIO_IO_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f769i_discovery.o(i.AUDIO_IO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_DeInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_DeInit
</UL>

<P><STRONG><a name="[1c0]"></a>AUDIO_IO_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.AUDIO_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AUDIO_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Init
</UL>

<P><STRONG><a name="[1c2]"></a>AUDIO_IO_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.AUDIO_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AUDIO_IO_Init &rArr; I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_ReadID
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Init
</UL>

<P><STRONG><a name="[1c4]"></a>AUDIO_IO_Read</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.AUDIO_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AUDIO_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_ReadID
</UL>

<P><STRONG><a name="[1c6]"></a>AUDIO_IO_Write</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f769i_discovery.o(i.AUDIO_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>

<P><STRONG><a name="[4d]"></a>A_BFGSpray</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, p_pspr.o(i.A_BFGSpray))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = A_BFGSpray &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AimLineAttack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>A_BFGsound</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, p_pspr.o(i.A_BFGsound))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = A_BFGsound &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>A_BabyMetal</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, p_enemy.o(i.A_BabyMetal))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = A_BabyMetal &rArr; A_Chase &rArr; P_NewChaseDir &rArr; P_TryWalk &rArr; P_Move &rArr; P_UseSpecialLine &rArr; EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>A_BossDeath</STRONG> (Thumb, 318 bytes, Stack size 88 bytes, p_enemy.o(i.A_BossDeath))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = A_BossDeath &rArr; EV_DoFloor &rArr; P_FindNextHighestFloor
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ExitLevel
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBossEnd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>A_BrainAwake</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, p_enemy.o(i.A_BrainAwake))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = A_BrainAwake &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>A_BrainDie</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, p_enemy.o(i.A_BrainDie))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = A_BrainDie
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ExitLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>A_BrainExplode</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, p_enemy.o(i.A_BrainExplode))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = A_BrainExplode &rArr; P_SpawnMobj &rArr; P_SetThingPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>A_BrainPain</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, p_enemy.o(i.A_BrainPain))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = A_BrainPain &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>A_BrainScream</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, p_enemy.o(i.A_BrainScream))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = A_BrainScream &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>A_BrainSpit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, p_enemy.o(i.A_BrainSpit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = A_BrainSpit &rArr; P_SpawnMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>A_BruisAttack</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, p_enemy.o(i.A_BruisAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = A_BruisAttack &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMeleeRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>A_BspiAttack</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, p_enemy.o(i.A_BspiAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = A_BspiAttack &rArr; P_SpawnMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>A_CPosAttack</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, p_enemy.o(i.A_CPosAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = A_CPosAttack &rArr; P_LineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineAttack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AimLineAttack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>A_CPosRefire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, p_enemy.o(i.A_CPosRefire))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = A_CPosRefire &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>A_Chase</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, p_enemy.o(i.A_Chase))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = A_Chase &rArr; P_NewChaseDir &rArr; P_TryWalk &rArr; P_Move &rArr; P_UseSpecialLine &rArr; EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NewChaseDir
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Move
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LookForPlayers
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMissileRange
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMeleeRange
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileChase
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Metal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Hoof
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BabyMetal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>A_CheckReload</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, p_pspr.o(i.A_CheckReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = A_CheckReload &rArr; P_CheckAmmo &rArr; P_SetPsprite
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckAmmo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>A_CloseShotgun2</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, p_enemy.o(i.A_CloseShotgun2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = A_CloseShotgun2 &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_ReFire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>A_CyberAttack</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, p_enemy.o(i.A_CyberAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = A_CyberAttack &rArr; P_SpawnMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>A_Explode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, p_enemy.o(i.A_Explode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = A_Explode &rArr; P_RadiusAttack &rArr; P_BlockThingsIterator
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RadiusAttack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>A_FaceTarget</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, p_enemy.o(i.A_FaceTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = A_FaceTarget &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileTarget
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileChase
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileAttack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_TroopAttack
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpidRefire
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkullAttack
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkelWhoosh
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkelMissile
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkelFist
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SargAttack
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SPosAttack
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PosAttack
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainAttack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_HeadAttack
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatRaise
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack3
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CyberAttack
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CPosRefire
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CPosAttack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BspiAttack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>A_Fall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, p_enemy.o(i.A_Fall))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainDie
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KeenDie
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>A_FatAttack1</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, p_enemy.o(i.A_FatAttack1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = A_FatAttack1 &rArr; P_SpawnMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SubstNullMobj
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>A_FatAttack2</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, p_enemy.o(i.A_FatAttack2))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = A_FatAttack2 &rArr; P_SpawnMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SubstNullMobj
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>A_FatAttack3</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, p_enemy.o(i.A_FatAttack3))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = A_FatAttack3 &rArr; P_SpawnMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SubstNullMobj
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>A_FatRaise</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, p_enemy.o(i.A_FatRaise))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = A_FatRaise &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>A_Fire</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, p_enemy.o(i.A_Fire))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = A_Fire &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnsetThingPosition
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SubstNullMobj
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetThingPosition
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileTarget
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_StartFire
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireCrackle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>A_FireBFG</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, p_pspr.o(i.A_FireBFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = A_FireBFG &rArr; P_SpawnPlayerMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseAmmo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayerMissile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>A_FireCGun</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, p_pspr.o(i.A_FireCGun))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = A_FireCGun &rArr; P_GunShot &rArr; P_LineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GunShot
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BulletSlope
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseAmmo
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>A_FireCrackle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, p_enemy.o(i.A_FireCrackle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = A_FireCrackle &rArr; A_Fire &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Fire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>A_FireMissile</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, p_pspr.o(i.A_FireMissile))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = A_FireMissile &rArr; P_SpawnPlayerMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseAmmo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayerMissile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>A_FirePistol</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, p_pspr.o(i.A_FirePistol))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = A_FirePistol &rArr; P_GunShot &rArr; P_LineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GunShot
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BulletSlope
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseAmmo
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>A_FirePlasma</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, p_pspr.o(i.A_FirePlasma))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = A_FirePlasma &rArr; P_SpawnPlayerMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseAmmo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayerMissile
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>A_FireShotgun</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, p_pspr.o(i.A_FireShotgun))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = A_FireShotgun &rArr; P_GunShot &rArr; P_LineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GunShot
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BulletSlope
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseAmmo
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>A_FireShotgun2</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, p_pspr.o(i.A_FireShotgun2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = A_FireShotgun2 &rArr; P_BulletSlope &rArr; P_AimLineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BulletSlope
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseAmmo
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineAttack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>A_GunFlash</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, p_pspr.o(i.A_GunFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = A_GunFlash &rArr; P_SetMobjState &rArr; P_RemoveMobj &rArr; S_StopSound &rArr; S_StopChannel &rArr; I_StopSound
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>A_HeadAttack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, p_enemy.o(i.A_HeadAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = A_HeadAttack &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMeleeRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>A_Hoof</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, p_enemy.o(i.A_Hoof))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = A_Hoof &rArr; A_Chase &rArr; P_NewChaseDir &rArr; P_TryWalk &rArr; P_Move &rArr; P_UseSpecialLine &rArr; EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>A_KeenDie</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, p_enemy.o(i.A_KeenDie))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = A_KeenDie &rArr; EV_DoDoor &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Fall
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>A_Light0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, p_pspr.o(i.A_Light0))
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>A_Light1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, p_pspr.o(i.A_Light1))
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>A_Light2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, p_pspr.o(i.A_Light2))
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>A_LoadShotgun2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, p_enemy.o(i.A_LoadShotgun2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = A_LoadShotgun2 &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>A_Look</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, p_enemy.o(i.A_Look))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = A_Look &rArr; P_LookForPlayers &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LookForPlayers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>A_Lower</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, p_pspr.o(i.A_Lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = A_Lower &rArr; P_BringUpWeapon &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BringUpWeapon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>A_Metal</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, p_enemy.o(i.A_Metal))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = A_Metal &rArr; A_Chase &rArr; P_NewChaseDir &rArr; P_TryWalk &rArr; P_Move &rArr; P_UseSpecialLine &rArr; EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>A_OpenShotgun2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, p_enemy.o(i.A_OpenShotgun2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = A_OpenShotgun2 &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>A_Pain</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, p_enemy.o(i.A_Pain))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = A_Pain &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>A_PainAttack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, p_enemy.o(i.A_PainAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = A_PainAttack &rArr; A_PainShootSkull &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainShootSkull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>A_PainDie</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, p_enemy.o(i.A_PainDie))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = A_PainDie &rArr; A_PainShootSkull &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Fall
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainShootSkull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[1ea]"></a>A_PainShootSkull</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, p_enemy.o(i.A_PainShootSkull))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = A_PainShootSkull &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkullAttack
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryMove
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainDie
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainAttack
</UL>

<P><STRONG><a name="[50]"></a>A_PlayerScream</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, p_enemy.o(i.A_PlayerScream))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = A_PlayerScream &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>A_PosAttack</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, p_enemy.o(i.A_PosAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = A_PosAttack &rArr; P_LineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineAttack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AimLineAttack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>A_Punch</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, p_pspr.o(i.A_Punch))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = A_Punch &rArr; P_LineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineAttack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AimLineAttack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>A_Raise</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, p_pspr.o(i.A_Raise))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = A_Raise &rArr; P_SetPsprite
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>A_ReFire</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, p_pspr.o(i.A_ReFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = A_ReFire &rArr; P_FireWeapon &rArr; P_SetMobjState &rArr; P_RemoveMobj &rArr; S_StopSound &rArr; S_StopChannel &rArr; I_StopSound
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FireWeapon
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckAmmo
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CloseShotgun2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>A_SPosAttack</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, p_enemy.o(i.A_SPosAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = A_SPosAttack &rArr; P_LineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineAttack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AimLineAttack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>A_SargAttack</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, p_enemy.o(i.A_SargAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = A_SargAttack &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMeleeRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>A_Saw</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, p_pspr.o(i.A_Saw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = A_Saw &rArr; P_LineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineAttack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AimLineAttack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>A_Scream</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, p_enemy.o(i.A_Scream))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = A_Scream &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>A_SkelFist</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, p_enemy.o(i.A_SkelFist))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = A_SkelFist &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMeleeRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>A_SkelMissile</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, p_enemy.o(i.A_SkelMissile))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = A_SkelMissile &rArr; P_SpawnMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>A_SkelWhoosh</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, p_enemy.o(i.A_SkelWhoosh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = A_SkelWhoosh &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>A_SkullAttack</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, p_enemy.o(i.A_SkullAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = A_SkullAttack &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AproxDistance
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainShootSkull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>A_SpawnFly</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, p_enemy.o(i.A_SpawnFly))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = A_SpawnFly &rArr; P_LookForPlayers &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TeleportMove
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SubstNullMobj
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LookForPlayers
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>A_SpawnSound</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, p_enemy.o(i.A_SpawnSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = A_SpawnSound &rArr; A_SpawnFly &rArr; P_LookForPlayers &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnFly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>A_SpidRefire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, p_enemy.o(i.A_SpidRefire))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = A_SpidRefire &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>A_StartFire</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, p_enemy.o(i.A_StartFire))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = A_StartFire &rArr; A_Fire &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Fire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>A_Tracer</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, p_enemy.o(i.A_Tracer))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = A_Tracer &rArr; P_SpawnPuff &rArr; P_SpawnMobj &rArr; P_SetThingPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPuff
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AproxDistance
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>A_TroopAttack</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, p_enemy.o(i.A_TroopAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = A_TroopAttack &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMeleeRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>A_VileAttack</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, p_enemy.o(i.A_VileAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = A_VileAttack &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RadiusAttack
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>A_VileChase</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, p_enemy.o(i.A_VileChase))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = A_VileChase &rArr; A_Chase &rArr; P_NewChaseDir &rArr; P_TryWalk &rArr; P_Move &rArr; P_UseSpecialLine &rArr; EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BlockThingsIterator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>A_VileStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, p_enemy.o(i.A_VileStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = A_VileStart &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>A_VileTarget</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, p_enemy.o(i.A_VileTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = A_VileTarget &rArr; A_Fire &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Fire
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>A_WeaponReady</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, p_pspr.o(i.A_WeaponReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = A_WeaponReady &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FireWeapon
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>A_XScream</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, p_enemy.o(i.A_XScream))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = A_XScream &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> info.o(.data)
</UL>
<P><STRONG><a name="[3bd]"></a>BSP_AUDIO_IN_Error_CallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_IN_Error_CallBack))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
</UL>

<P><STRONG><a name="[1fa]"></a>BSP_AUDIO_OUT_ClockConfig</STRONG> (Thumb, 102 bytes, Stack size 160 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[1fd]"></a>BSP_AUDIO_OUT_Error_CallBack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio_main.o(i.BSP_AUDIO_OUT_Error_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_AUDIO_OUT_Error_CallBack &rArr; mute_all &rArr; ll_stop &rArr; BSP_AUDIO_OUT_Stop &rArr; HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute_all
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
</UL>

<P><STRONG><a name="[200]"></a>BSP_AUDIO_OUT_HalfTransfer_CallBack</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, audio_main.o(i.BSP_AUDIO_OUT_HalfTransfer_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_AUDIO_OUT_HalfTransfer_CallBack &rArr; chan_mix_all_helper &rArr; chan_proc_all_to_buf &rArr; mus_play &rArr; music_get_next_chunk &rArr; song_next_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_mix_all_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxHalfCpltCallback
</UL>

<P><STRONG><a name="[1c9]"></a>BSP_AUDIO_OUT_Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_AUDIO_OUT_Init &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_GetState
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_Out_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_Out_DeInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_InitApplication
</UL>

<P><STRONG><a name="[204]"></a>BSP_AUDIO_OUT_MspInit</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_AUDIO_OUT_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[20b]"></a>BSP_AUDIO_OUT_Play</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_AUDIO_OUT_Play &rArr; HAL_SAI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_play
</UL>

<P><STRONG><a name="[1ca]"></a>BSP_AUDIO_OUT_SetAudioFrameSlot</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_SetAudioFrameSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_AUDIO_OUT_SetAudioFrameSlot &rArr; HAL_SAI_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_InitApplication
</UL>

<P><STRONG><a name="[20e]"></a>BSP_AUDIO_OUT_Stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.BSP_AUDIO_OUT_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_AUDIO_OUT_Stop &rArr; HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_stop
</UL>

<P><STRONG><a name="[210]"></a>BSP_AUDIO_OUT_TransferComplete_CallBack</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, audio_main.o(i.BSP_AUDIO_OUT_TransferComplete_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_AUDIO_OUT_TransferComplete_CallBack &rArr; chan_mix_all_helper &rArr; chan_proc_all_to_buf &rArr; mus_play &rArr; music_get_next_chunk &rArr; song_next_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_mix_all_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxCpltCallback
</UL>

<P><STRONG><a name="[211]"></a>BSP_LCD_Clear</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LCD_Clear &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfx_clear_screen
</UL>

<P><STRONG><a name="[213]"></a>BSP_LCD_GetXSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_GetXSize))
<BR><BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[212]"></a>BSP_LCD_GetYSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_GetYSize))
<BR><BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[215]"></a>BSP_LCD_HDMIInitEx</STRONG> (Thumb, 1084 bytes, Stack size 64 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_HDMIInitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BSP_LCD_HDMIInitEx &rArr; ADV7533_Configure &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Start
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_DeInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigVideoMode
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigPhyTimer
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV7533_PowerOn
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV7533_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV7533_Configure
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[21f]"></a>BSP_LCD_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BSP_LCD_Init &rArr; BSP_LCD_InitEx &rArr; BSP_LCD_HDMIInitEx &rArr; ADV7533_Configure &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[220]"></a>BSP_LCD_InitEx</STRONG> (Thumb, 458 bytes, Stack size 64 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BSP_LCD_InitEx &rArr; BSP_LCD_HDMIInitEx &rArr; ADV7533_Configure &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDCEx_StructInitFromVideoConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Start
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_DeInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigVideoMode
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_GetID
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[216]"></a>BSP_LCD_MspInit</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[221]"></a>BSP_LCD_Reset</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_Reset &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[21e]"></a>BSP_LCD_SetFont</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[226]"></a>BSP_LCD_SetLayerVisible</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_SetLayerVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LCD_SetLayerVisible
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Reload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[228]"></a>BSP_LCD_SetTransparency</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32f769i_discovery_lcd.o(i.BSP_LCD_SetTransparency))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_LCD_SetTransparency &rArr; HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_layer
</UL>

<P><STRONG><a name="[22a]"></a>BSP_LED_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22b]"></a>BSP_LED_Off</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[22c]"></a>BSP_LED_On</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[64c]"></a>BSP_QSPI_GetInfo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f769i_discovery_qspi.o(i.BSP_QSPI_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
</UL>

<P><STRONG><a name="[22d]"></a>BSP_QSPI_Init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f769i_discovery_qspi.o(i.BSP_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BSP_QSPI_Init &rArr; QSPI_OutDrvStrengthCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterMemory_QPI
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
</UL>

<P><STRONG><a name="[22f]"></a>BSP_QSPI_MspInit</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, stm32f769i_discovery_qspi.o(i.BSP_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_QSPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[3c4]"></a>BSP_SD_AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sd_diskio.o(i.BSP_SD_AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>

<P><STRONG><a name="[236]"></a>BSP_SD_Detect_MspInit</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, stm32f769i_discovery_sd.o(i.BSP_SD_Detect_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_SD_Detect_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[237]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f769i_discovery_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[239]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f769i_discovery_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>

<P><STRONG><a name="[23b]"></a>BSP_SD_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f769i_discovery_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Detect_MspInit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[23c]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f769i_discovery_sd.o(i.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_IsDetected
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[23d]"></a>BSP_SD_MspInit</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, stm32f769i_discovery_sd.o(i.BSP_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_SD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[241]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f769i_discovery_sd.o(i.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[3da]"></a>BSP_SD_ReadCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sd_diskio.o(i.BSP_SD_ReadCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[243]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f769i_discovery_sd.o(i.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[3db]"></a>BSP_SD_WriteCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sd_diskio.o(i.BSP_SD_WriteCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>

<P><STRONG><a name="[664]"></a>BSP_TS_GetState</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, stm32f769i_discovery_ts.o(i.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_TS_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_read
</UL>

<P><STRONG><a name="[660]"></a>BSP_TS_Init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32f769i_discovery_ts.o(i.BSP_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_init
</UL>

<P><STRONG><a name="[b0]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2D_IRQHandler &rArr; HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[263]"></a>DSI_IO_WriteCmd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32f769i_discovery_lcd.o(i.DSI_IO_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DSI_IO_WriteCmd &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
</UL>

<P><STRONG><a name="[2d8]"></a>D_AdvanceDemo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, d_main.o(i.D_AdvanceDemo))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckDemoStatus
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_StartTitle
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_PageTicker
</UL>

<P><STRONG><a name="[26a]"></a>D_BindVariables</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, d_main.o(i.D_BindVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = D_BindVariables &rArr; M_BindChatControls &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindWeaponControls
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindVariable
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindMenuControls
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindMapControls
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindChatControls
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindBaseControls
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ApplyPlatformDefaults
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_BindVideoVariables
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_BindSoundVariables
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_BindJoystickVariables
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[275]"></a>D_CheckNetGame</STRONG> (Thumb, 74 bytes, Stack size 104 bytes, d_net.o(i.D_CheckNetGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = D_CheckNetGame &rArr; SaveGameSettings &rArr; M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_StartNetGame
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_RegisterLoopCallbacks
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveGameSettings
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadGameSettings
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[27b]"></a>D_ConnectNetGame</STRONG> (Thumb, 40 bytes, Stack size 72 bytes, d_net.o(i.D_ConnectNetGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = D_ConnectNetGame &rArr; InitConnectData &rArr; W_Checksum &rArr; ChecksumAddLump &rArr; SHA1_UpdateString &rArr; SHA1_Update &rArr;  SHA1_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_InitNetGame
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConnectData
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[27e]"></a>D_Display</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, d_main.o(i.D_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = D_Display &rArr; R_RenderPlayerView &rArr; R_DrawMasked &rArr; R_DrawSprite &rArr; R_RenderMaskedSegRange &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetTime
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetUpdate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Drawer
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_StartScreen
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_ScreenWipe
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_EndScreen
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Drawer
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawMouseSpeedBox
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Drawer
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderPlayerView
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FillBackScreen
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ExecuteSetViewSize
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawViewBorder
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Drawer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_UpdateNoBlit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SetPalette
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_FinishUpdate
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Erase
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Drawer
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Drawer
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_PageDrawer
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[294]"></a>D_DoAdvanceDemo</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, d_main.o(i.D_DoAdvanceDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = D_DoAdvanceDemo &rArr; S_StartMusic &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartMusic
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeferedPlayDemo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTic
</UL>

<P><STRONG><a name="[298]"></a>D_DoomLoop</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, d_main.o(i.D_DoomLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = D_DoomLoop &rArr; D_Display &rArr; R_RenderPlayerView &rArr; R_DrawMasked &rArr; R_DrawSprite &rArr; R_RenderMaskedSegRange &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_StartGameLoop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_update
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_start
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_end
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fps_update
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_process
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_RestoreBuffer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UpdateSounds
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ExecuteSetViewSize
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_StartFrame
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SetWindowTitle
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SetGrabMouseCallback
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitGraphics
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GraphicsCheckCommandLine
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EnableLoadingDisk
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_BeginRecording
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2a9]"></a>D_DoomMain</STRONG> (Thumb, 1740 bytes, Stack size 480 bytes, d_main.o(i.D_DoomMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = D_DoomMain &rArr; D_DoomLoop &rArr; D_Display &rArr; R_RenderPlayerView &rArr; R_DrawMasked &rArr; R_DrawSprite &rArr; R_RenderMaskedSegRange &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGameVersion
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_AddPwads
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_AddFile
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_AtExit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_SaveGameIWADName
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindIWAD
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ParseCommandLine
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GenerateHashTable
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveGameFile
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringEndsWith
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetConfigFilenames
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetConfigDir
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadDefaults
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_GetSaveGameDir
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_PrintStartupBanner
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_PrintDivider
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_PrintBanner
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitTimer
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitSound
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitMusic
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitJoystick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_DisplayFPSDots
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_CheckIsScreensaver
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_TimeDemo
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_RecordDemo
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_LoadGame
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_InitNew
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeferedPlayDemo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_ConnectNetGame
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_CheckNetGame
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGameVersion
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDehackedBanners
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_StartTitle
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_SetGameDescription
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_IdentifyVersion
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_main
</UL>

<P><STRONG><a name="[2b2]"></a>D_FindIWAD</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, d_iwad.o(i.D_FindIWAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = D_FindIWAD &rArr; SearchDirectoryForIWAD &rArr; CheckDirectoryHasIWAD &rArr; M_FileExists &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByName
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDirectoryForIWAD
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyIWADByName
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIWADDirList
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[269]"></a>D_FindWADByExt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, d_iwad.o(i.D_FindWADByExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = D_FindWADByExt &rArr; W_ForEach
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ForEach
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_AddPwads
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetLevel
</UL>

<P><STRONG><a name="[2d2]"></a>D_FindWADByName</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, d_iwad.o(i.D_FindWADByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = D_FindWADByName &rArr; M_FileExists &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringJoin
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_FileExists
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirIsFile
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIWADDirList
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_TryFindWADByName
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindIWAD
</UL>

<P><STRONG><a name="[12d]"></a>D_GrabMouseCallback</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, d_main.o(i.D_GrabMouseCallback))
<BR>[Address Reference Count : 1]<UL><LI> d_main.o(i.D_DoomLoop)
</UL>
<P><STRONG><a name="[2b3]"></a>D_IdentifyVersion</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, d_main.o(i.D_IdentifyVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = D_IdentifyVersion &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMissionForPackName
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[27d]"></a>D_InitNetGame</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, d_loop.o(i.D_InitNetGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = D_InitNetGame
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_AtExit
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_ConnectNetGame
</UL>

<P><STRONG><a name="[285]"></a>D_PageDrawer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, d_main.o(i.D_PageDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = D_PageDrawer &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[2d7]"></a>D_PageTicker</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, d_main.o(i.D_PageTicker))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = D_PageTicker
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_AdvanceDemo
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[2dc]"></a>D_PopEvent</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, d_event.o(i.D_PopEvent))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_ProcessEvents
</UL>

<P><STRONG><a name="[2d9]"></a>D_PostEvent</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, d_event.o(i.D_PostEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = D_PostEvent &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetEvent
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_key_up
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_event
</UL>

<P><STRONG><a name="[2d]"></a>D_ProcessEvents</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, d_main.o(i.D_ProcessEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = D_ProcessEvents &rArr; M_Responder &rArr; M_SaveGame &rArr; M_ReadSaveStrings &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_PopEvent
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Responder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> d_net.o(.data)
</UL>
<P><STRONG><a name="[132]"></a>D_QuitNetGame</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, d_loop.o(i.D_QuitNetGame))
<BR>[Address Reference Count : 1]<UL><LI> d_loop.o(i.D_InitNetGame)
</UL>
<P><STRONG><a name="[276]"></a>D_RegisterLoopCallbacks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, d_loop.o(i.D_RegisterLoopCallbacks))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_CheckNetGame
</UL>

<P><STRONG><a name="[2ba]"></a>D_SaveGameIWADName</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, d_iwad.o(i.D_SaveGameIWADName))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2b9]"></a>D_SetGameDescription</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, d_main.o(i.D_SetGameDescription))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = D_SetGameDescription &rArr; GetGameName &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGameName
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2a1]"></a>D_StartGameLoop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, d_loop.o(i.D_StartGameLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = D_StartGameLoop &rArr; GetAdjustedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdjustedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[278]"></a>D_StartNetGame</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, d_loop.o(i.D_StartNetGame))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_CheckNetGame
</UL>

<P><STRONG><a name="[2d0]"></a>D_StartTitle</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, d_main.o(i.D_StartTitle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = D_StartTitle
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_AdvanceDemo
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_EndGameResponse
</UL>

<P><STRONG><a name="[2df]"></a>D_TryFindWADByName</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, d_iwad.o(i.D_TryFindWADByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = D_TryFindWADByName &rArr; D_FindWADByName &rArr; M_FileExists &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByName
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ParseCommandLine
</UL>

<P><STRONG><a name="[b3]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2e2]"></a>Display_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_main.o(i.Display_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Display_Init &rArr; BSP_LCD_Init &rArr; BSP_LCD_InitEx &rArr; BSP_LCD_HDMIInitEx &rArr; ADV7533_Configure &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetLayerVisible
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e5]"></a>EV_BuildStairs</STRONG> (Thumb, 338 bytes, Stack size 64 bytes, p_floor.o(i.EV_BuildStairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EV_BuildStairs &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindSectorFromLineTag
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
</UL>

<P><STRONG><a name="[477]"></a>EV_CeilingCrushStop</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, p_ceilng.o(i.EV_CeilingCrushStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EV_CeilingCrushStop
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
</UL>

<P><STRONG><a name="[2e8]"></a>EV_DoCeiling</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, p_ceilng.o(i.EV_DoCeiling))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EV_DoCeiling &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindSectorFromLineTag
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindHighestCeilingSurrounding
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddActiveCeiling
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ActivateInStasisCeiling
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
</UL>

<P><STRONG><a name="[2ec]"></a>EV_DoDonut</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, p_spec.o(i.EV_DoDonut))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSector
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindSectorFromLineTag
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DonutOverrun
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
</UL>

<P><STRONG><a name="[1d2]"></a>EV_DoDoor</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, p_doors.o(i.EV_DoDoor))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EV_DoDoor &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindLowestCeilingSurrounding
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindSectorFromLineTag
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ShootSpecialLine
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_KeenDie
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BossDeath
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoLockedDoor
</UL>

<P><STRONG><a name="[1d1]"></a>EV_DoFloor</STRONG> (Thumb, 694 bytes, Stack size 40 bytes, p_floor.o(i.EV_DoFloor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EV_DoFloor &rArr; P_FindNextHighestFloor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twoSided
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSide
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSector
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindNextHighestFloor
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindLowestFloorSurrounding
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindHighestFloorSurrounding
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindLowestCeilingSurrounding
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindSectorFromLineTag
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ShootSpecialLine
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BossDeath
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
</UL>

<P><STRONG><a name="[2f5]"></a>EV_DoLockedDoor</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, p_doors.o(i.EV_DoLockedDoor))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EV_DoLockedDoor &rArr; EV_DoDoor &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
</UL>

<P><STRONG><a name="[2f6]"></a>EV_DoPlat</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, p_plats.o(i.EV_DoPlat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EV_DoPlat &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddActivePlat
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ActivateInStasis
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindNextHighestFloor
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindLowestFloorSurrounding
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindHighestFloorSurrounding
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindSectorFromLineTag
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ShootSpecialLine
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
</UL>

<P><STRONG><a name="[2f9]"></a>EV_LightTurnOn</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, p_lights.o(i.EV_LightTurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EV_LightTurnOn
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSector
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
</UL>

<P><STRONG><a name="[2fa]"></a>EV_StartLightStrobing</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, p_lights.o(i.EV_StartLightStrobing))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EV_StartLightStrobing &rArr; P_SpawnStrobeFlash &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnStrobeFlash
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindSectorFromLineTag
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
</UL>

<P><STRONG><a name="[476]"></a>EV_StopPlat</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, p_plats.o(i.EV_StopPlat))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
</UL>

<P><STRONG><a name="[2fc]"></a>EV_Teleport</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, p_telept.o(i.EV_Teleport))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TeleportMove
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
</UL>

<P><STRONG><a name="[2fd]"></a>EV_TurnTagLightsOff</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, p_lights.o(i.EV_TurnTagLightsOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EV_TurnTagLightsOff
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSector
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
</UL>

<P><STRONG><a name="[2fe]"></a>EV_VerticalDoor</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, p_doors.o(i.EV_VerticalDoor))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EV_VerticalDoor &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindLowestCeilingSurrounding
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
</UL>

<P><STRONG><a name="[302]"></a>FATFS_LinkDriver</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[303]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[305]"></a>F_BunnyScroll</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, f_finale.o(i.F_BunnyScroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = F_BunnyScroll &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_MarkRect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_DrawPatchCol
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_ArtScreenDrawer
</UL>

<P><STRONG><a name="[307]"></a>F_CastDrawer</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, f_finale.o(i.F_CastDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = F_CastDrawer &rArr; F_CastPrint &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchFlipped
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Drawer
</UL>

<P><STRONG><a name="[308]"></a>F_CastPrint</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, f_finale.o(i.F_CastPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = F_CastPrint &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastDrawer
</UL>

<P><STRONG><a name="[30b]"></a>F_CastResponder</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, f_finale.o(i.F_CastResponder))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = F_CastResponder &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Responder
</UL>

<P><STRONG><a name="[30c]"></a>F_CastTicker</STRONG> (Thumb, 866 bytes, Stack size 16 bytes, f_finale.o(i.F_CastTicker))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = F_CastTicker &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Ticker
</UL>

<P><STRONG><a name="[306]"></a>F_DrawPatchCol</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, f_finale.o(i.F_DrawPatchCol))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = F_DrawPatchCol
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_BunnyScroll
</UL>

<P><STRONG><a name="[284]"></a>F_Drawer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, f_finale.o(i.F_Drawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = F_Drawer &rArr; F_ArtScreenDrawer &rArr; F_BunnyScroll &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_TextWrite
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastDrawer
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_ArtScreenDrawer
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[30e]"></a>F_Responder</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, f_finale.o(i.F_Responder))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = F_Responder &rArr; F_CastResponder &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastResponder
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Responder
</UL>

<P><STRONG><a name="[30f]"></a>F_StartCast</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, f_finale.o(i.F_StartCast))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = F_StartCast &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ChangeMusic
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Ticker
</UL>

<P><STRONG><a name="[311]"></a>F_StartFinale</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, f_finale.o(i.F_StartFinale))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = F_StartFinale &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ChangeMusic
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_WorldDone
</UL>

<P><STRONG><a name="[30d]"></a>F_TextWrite</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, f_finale.o(i.F_TextWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = F_TextWrite &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_MarkRect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Drawer
</UL>

<P><STRONG><a name="[313]"></a>F_Ticker</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, f_finale.o(i.F_Ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = F_Ticker &rArr; F_StartCast &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_StartCast
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastTicker
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartMusic
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[299]"></a>G_BeginRecording</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, g_game.o(i.G_BeginRecording))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = G_BeginRecording &rArr; M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_VanillaVersionCode
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[2e]"></a>G_BuildTiccmd</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, g_game.o(i.G_BuildTiccmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = G_BuildTiccmd &rArr; G_NextWeapon
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_dequeueChatChar
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_NextWeapon
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> d_net.o(.data)
</UL>
<P><STRONG><a name="[130]"></a>G_CheckDemoStatus</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, g_game.o(i.G_CheckDemoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = G_CheckDemoStatus &rArr; M_WriteFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetTime
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpName
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_AdvanceDemo
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteFile
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Quit
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerQuitGame
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_WriteDemoTiccmd
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ReadDemoTiccmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> d_main.o(i.D_DoomMain)
</UL>
<P><STRONG><a name="[31b]"></a>G_CheckSpot</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, g_game.o(i.G_CheckSpot))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = G_CheckSpot &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointInSubsector
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoReborn
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeathMatchSpawnPlayer
</UL>

<P><STRONG><a name="[31e]"></a>G_DeathMatchSpawnPlayer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, g_game.o(i.G_DeathMatchSpawnPlayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = G_DeathMatchSpawnPlayer &rArr; P_SpawnPlayer &rArr; ST_Start &rArr; ST_Stop &rArr; I_SetPalette &rArr; lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayer
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckSpot
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoReborn
</UL>

<P><STRONG><a name="[42c]"></a>G_DeferedInitNew</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, g_game.o(i.G_DeferedInitNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = G_DeferedInitNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Responder
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_VerifyNightmare
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ChooseSkill
</UL>

<P><STRONG><a name="[296]"></a>G_DeferedPlayDemo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, g_game.o(i.G_DeferedPlayDemo))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoAdvanceDemo
</UL>

<P><STRONG><a name="[320]"></a>G_DoCompleted</STRONG> (Thumb, 758 bytes, Stack size 16 bytes, g_game.o(i.G_DoCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = G_DoCompleted &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Stop
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatCopy
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PlayerFinishLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[324]"></a>G_DoLoadGame</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, g_game.o(i.G_DoLoadGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = G_DoLoadGame &rArr; G_InitNew &rArr; G_DoLoadLevel &rArr; P_SetupLevel &rArr; S_Start &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FillBackScreen
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ExecuteSetViewSize
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_InitNew
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveWorld
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveThinkers
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchivePlayers
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ReadSaveGameHeader
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ReadSaveGameEOF
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadEnd
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[32d]"></a>G_DoLoadLevel</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, g_game.o(i.G_DoLoadLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = G_DoLoadLevel &rArr; P_SetupLevel &rArr; S_Start &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_CheckHeap
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FlatNumForName
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_InitNew
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoWorldDone
</UL>

<P><STRONG><a name="[331]"></a>G_DoNewGame</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, g_game.o(i.G_DoNewGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = G_DoNewGame &rArr; G_InitNew &rArr; G_DoLoadLevel &rArr; P_SetupLevel &rArr; S_Start &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_InitNew
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[332]"></a>G_DoPlayDemo</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, g_game.o(i.G_DoPlayDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = G_DoPlayDemo &rArr; G_InitNew &rArr; G_DoLoadLevel &rArr; P_SetupLevel &rArr; S_Start &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetTime
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_VanillaVersionCode
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_InitNew
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DemoVersionDescription
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[333]"></a>G_DoReborn</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, g_game.o(i.G_DoReborn))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = G_DoReborn &rArr; G_DeathMatchSpawnPlayer &rArr; P_SpawnPlayer &rArr; ST_Start &rArr; ST_Stop &rArr; I_SetPalette &rArr; lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayer
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeathMatchSpawnPlayer
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckSpot
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[334]"></a>G_DoSaveGame</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, g_game.o(i.G_DoSaveGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = G_DoSaveGame &rArr; P_SaveGameFile &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FillBackScreen
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveGameFile
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_WriteSaveGameHeader
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_WriteSaveGameEOF
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveWriteFile
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveBegin
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveWorld
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveThinkers
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveSpecials
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchivePlayers
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[33d]"></a>G_DoWorldDone</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, g_game.o(i.G_DoWorldDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = G_DoWorldDone &rArr; G_DoLoadLevel &rArr; P_SetupLevel &rArr; S_Start &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[1d3]"></a>G_ExitLevel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, g_game.o(i.G_ExitLevel))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainDie
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BossDeath
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UpdateSpecials
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerInSpecialSector
</UL>

<P><STRONG><a name="[2cf]"></a>G_InitNew</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, g_game.o(i.G_InitNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = G_InitNew &rArr; G_DoLoadLevel &rArr; P_SetupLevel &rArr; S_Start &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ResumeSound
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TextureNumForName
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ClearRandom
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoPlayDemo
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoNewGame
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[2ce]"></a>G_LoadGame</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, g_game.o(i.G_LoadGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = G_LoadGame &rArr; M_StringCopy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadSelect
</UL>

<P><STRONG><a name="[321]"></a>G_PlayerFinishLevel</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, g_game.o(i.G_PlayerFinishLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = G_PlayerFinishLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoCompleted
</UL>

<P><STRONG><a name="[342]"></a>G_PlayerReborn</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, g_game.o(i.G_PlayerReborn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = G_PlayerReborn
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayer
</UL>

<P><STRONG><a name="[343]"></a>G_ReadDemoTiccmd</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, g_game.o(i.G_ReadDemoTiccmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = G_ReadDemoTiccmd &rArr; G_CheckDemoStatus &rArr; M_WriteFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckDemoStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_WriteDemoTiccmd
</UL>

<P><STRONG><a name="[2cb]"></a>G_RecordDemo</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, g_game.o(i.G_RecordDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = G_RecordDemo &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2db]"></a>G_Responder</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, g_game.o(i.G_Responder))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = G_Responder &rArr; AM_Responder &rArr; AM_Start &rArr; AM_initVariables &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Responder
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Responder
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartControlPanel
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Responder
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_ProcessEvents
</UL>

<P><STRONG><a name="[346]"></a>G_SaveGame</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, g_game.o(i.G_SaveGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = G_SaveGame &rArr; M_StringCopy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DoSave
</UL>

<P><STRONG><a name="[447]"></a>G_ScreenShot</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, g_game.o(i.G_ScreenShot))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>

<P><STRONG><a name="[347]"></a>G_SecretExitLevel</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, g_game.o(i.G_SecretExitLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = G_SecretExitLevel &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
</UL>

<P><STRONG><a name="[348]"></a>G_Ticker</STRONG> (Thumb, 744 bytes, Stack size 16 bytes, g_game.o(i.G_Ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = G_Ticker &rArr; V_ScreenShot &rArr; WritePCXfile &rArr; M_WriteFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Ticker
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Ticker
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_StartFinale
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_PageTicker
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Ticker
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_End
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_ScreenShot
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ResumeSound
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_PauseSound
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Ticker
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Ticker
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Ticker
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_WriteDemoTiccmd
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ReadDemoTiccmd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoWorldDone
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoReborn
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoPlayDemo
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoNewGame
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadLevel
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoCompleted
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTic
</UL>

<P><STRONG><a name="[2cc]"></a>G_TimeDemo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, g_game.o(i.G_TimeDemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = G_TimeDemo &rArr; M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[316]"></a>G_VanillaVersionCode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, g_game.o(i.G_VanillaVersionCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = G_VanillaVersionCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGameName
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_BeginRecording
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_WriteSaveGameHeader
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ReadSaveGameHeader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoPlayDemo
</UL>

<P><STRONG><a name="[351]"></a>G_WorldDone</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, g_game.o(i.G_WorldDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = G_WorldDone &rArr; F_StartFinale &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_StartFinale
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateNoState
</UL>

<P><STRONG><a name="[34a]"></a>G_WriteDemoTiccmd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, g_game.o(i.G_WriteDemoTiccmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = G_WriteDemoTiccmd &rArr; G_ReadDemoTiccmd &rArr; G_CheckDemoStatus &rArr; M_WriteFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckDemoStatus
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ReadDemoTiccmd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseDemoBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[35c]"></a>GetSectorAtNullAddress</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, p_setup.o(i.GetSectorAtNullAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GetSectorAtNullAddress &rArr; I_GetMemoryValue &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetMemoryValue
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSegs
</UL>

<P><STRONG><a name="[360]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[429]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>

<P><STRONG><a name="[261]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[361]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>

<P><STRONG><a name="[35f]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[362]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[363]"></a>HAL_DMA2D_PollForTransfer</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_PollForTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_PollForTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>

<P><STRONG><a name="[365]"></a>HAL_DMA2D_Start</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>

<P><STRONG><a name="[367]"></a>HAL_DMA_Abort</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
</UL>

<P><STRONG><a name="[3d0]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[207]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
</UL>

<P><STRONG><a name="[526]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[262]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[208]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
</UL>

<P><STRONG><a name="[36a]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
</UL>

<P><STRONG><a name="[219]"></a>HAL_DSI_ConfigPhyTimer</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigPhyTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_ConfigPhyTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[21a]"></a>HAL_DSI_ConfigVideoMode</STRONG> (Thumb, 720 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ConfigVideoMode))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[217]"></a>HAL_DSI_DeInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[218]"></a>HAL_DSI_Init</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DSI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[265]"></a>HAL_DSI_LongWrite</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_LongWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ConfigPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
</UL>

<P><STRONG><a name="[36c]"></a>HAL_DSI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_DeInit
</UL>

<P><STRONG><a name="[36d]"></a>HAL_DSI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
</UL>

<P><STRONG><a name="[264]"></a>HAL_DSI_ShortWrite</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_ShortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DSI_ShortWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ConfigPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
</UL>

<P><STRONG><a name="[21b]"></a>HAL_DSI_Start</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f7xx_hal_dsi.o(i.HAL_DSI_Start))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Delay
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_IO_Delay
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Delay
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>

<P><STRONG><a name="[206]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Detect_MspInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[240]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>

<P><STRONG><a name="[225]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
</UL>

<P><STRONG><a name="[364]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[36f]"></a>HAL_HCD_Connect_Callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_conf.o(i.HAL_HCD_Connect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_Connect_Callback &rArr; USBH_LL_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[371]"></a>HAL_HCD_Disconnect_Callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_conf.o(i.HAL_HCD_Disconnect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[373]"></a>HAL_HCD_GetCurrentFrame</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_GetCurrentFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HCD_GetCurrentFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[375]"></a>HAL_HCD_GetCurrentSpeed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_GetCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetSpeed
</UL>

<P><STRONG><a name="[593]"></a>HAL_HCD_HC_GetURBState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_HC_GetURBState))
<BR><BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
</UL>

<P><STRONG><a name="[377]"></a>HAL_HCD_HC_Halt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>

<P><STRONG><a name="[379]"></a>HAL_HCD_HC_Init</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>

<P><STRONG><a name="[3de]"></a>HAL_HCD_HC_NotifyURBChange_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_HC_NotifyURBChange_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[37b]"></a>HAL_HCD_HC_SubmitRequest</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_HC_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>

<P><STRONG><a name="[37d]"></a>HAL_HCD_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_HCD_IRQHandler &rArr; HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_ReadInterrupt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_IRQHandler
</UL>

<P><STRONG><a name="[387]"></a>HAL_HCD_Init</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[388]"></a>HAL_HCD_MspInit</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, usbh_conf.o(i.HAL_HCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_HCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[3e0]"></a>HAL_HCD_PortDisabled_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_PortDisabled_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[3df]"></a>HAL_HCD_PortEnabled_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_PortEnabled_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[38d]"></a>HAL_HCD_ResetPort</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
</UL>

<P><STRONG><a name="[382]"></a>HAL_HCD_SOF_Callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_conf.o(i.HAL_HCD_SOF_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_HCD_SOF_Callback &rArr; USBH_LL_IncTimer &rArr; USBH_HandleSof
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_IncTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[390]"></a>HAL_HCD_Start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
</UL>

<P><STRONG><a name="[393]"></a>HAL_HCD_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f7xx_hal_hcd.o(i.HAL_HCD_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
</UL>

<P><STRONG><a name="[395]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[3fb]"></a>HAL_I2C_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[397]"></a>HAL_I2C_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[399]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[39e]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>

<P><STRONG><a name="[396]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[398]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[55a]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3a1]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a3]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[223]"></a>HAL_LTDCEx_StructInitFromVideoConfig</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc_ex.o(i.HAL_LTDCEx_StructInitFromVideoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[635]"></a>HAL_LTDC_ConfigCLUT</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigCLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_LTDC_ConfigCLUT
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_load_clut
</UL>

<P><STRONG><a name="[3a6]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BSP_LCD_LayerDefaultInit
</UL>

<P><STRONG><a name="[21c]"></a>HAL_LTDC_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LTDC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[636]"></a>HAL_LTDC_EnableCLUT</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_EnableCLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LTDC_EnableCLUT
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_load_clut
</UL>

<P><STRONG><a name="[21d]"></a>HAL_LTDC_Init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
</UL>

<P><STRONG><a name="[3a8]"></a>HAL_LTDC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
</UL>

<P><STRONG><a name="[3a9]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[227]"></a>HAL_LTDC_Reload</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_Reload))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetLayerVisible
</UL>

<P><STRONG><a name="[229]"></a>HAL_LTDC_SetAlpha</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTransparency
</UL>

<P><STRONG><a name="[3a4]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[5e7]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_update
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_channel
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pause
</UL>

<P><STRONG><a name="[20a]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_update
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_channel
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pause
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[209]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_MspInit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_MspInit
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[3a2]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[3ac]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[3ad]"></a>HAL_QSPI_AutoPolling</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterMemory_QPI
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>

<P><STRONG><a name="[3b0]"></a>HAL_QSPI_Command</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterMemory_QPI
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[22e]"></a>HAL_QSPI_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_QSPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[230]"></a>HAL_QSPI_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_QSPI_Init &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[3b1]"></a>HAL_QSPI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_DeInit
</UL>

<P><STRONG><a name="[3b2]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[3b4]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[3b3]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[3b5]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ResetMemory
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_RCCEx_GetPeriphCLKConfig</STRONG> (Thumb, 448 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ClockConfig
</UL>

<P><STRONG><a name="[3bf]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1876 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_HDMIInitEx
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_ClockConfig
</UL>

<P><STRONG><a name="[3b6]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[3b7]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[3b8]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1204 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[20f]"></a>HAL_SAI_DMAStop</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
</UL>

<P><STRONG><a name="[3ba]"></a>HAL_SAI_DeInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SAI_DeInit &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspDeInit
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_Out_DeInit
</UL>

<P><STRONG><a name="[3bc]"></a>HAL_SAI_ErrorCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.HAL_SAI_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SAI_ErrorCallback &rArr; BSP_AUDIO_OUT_Error_CallBack &rArr; mute_all &rArr; ll_stop &rArr; BSP_AUDIO_OUT_Stop &rArr; HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Error_CallBack
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_IN_Error_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAError
</UL>

<P><STRONG><a name="[203]"></a>HAL_SAI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[20d]"></a>HAL_SAI_Init</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SAI_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_SetAudioFrameSlot
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIx_Out_Init
</UL>

<P><STRONG><a name="[3bb]"></a>HAL_SAI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
</UL>

<P><STRONG><a name="[3be]"></a>HAL_SAI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[20c]"></a>HAL_SAI_Transmit_DMA</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SAI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
</UL>

<P><STRONG><a name="[3c1]"></a>HAL_SAI_TxCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.HAL_SAI_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SAI_TxCpltCallback &rArr; BSP_AUDIO_OUT_TransferComplete_CallBack &rArr; chan_mix_all_helper &rArr; chan_proc_all_to_buf &rArr; mus_play &rArr; music_get_next_chunk &rArr; song_next_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_TransferComplete_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxCplt
</UL>

<P><STRONG><a name="[3c2]"></a>HAL_SAI_TxHalfCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.HAL_SAI_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SAI_TxHalfCpltCallback &rArr; BSP_AUDIO_OUT_HalfTransfer_CallBack &rArr; chan_mix_all_helper &rArr; chan_proc_all_to_buf &rArr; mus_play &rArr; music_get_next_chunk &rArr; song_next_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_HalfTransfer_CallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxHalfCplt
</UL>

<P><STRONG><a name="[3c3]"></a>HAL_SD_AbortCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery_sd.o(i.HAL_SD_AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_AbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[23f]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[3cb]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[52a]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 496 bytes, Stack size 12 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[238]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[23a]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[3c9]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_IRQHandler &rArr; SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC2_IRQHandler
</UL>

<P><STRONG><a name="[23e]"></a>HAL_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[3d2]"></a>HAL_SD_InitCard</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[3d1]"></a>HAL_SD_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[242]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[3cc]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery_sd.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[3cd]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery_sd.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[244]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[3a5]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[3e2]"></a>HDMI_IO_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.HDMI_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HDMI_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_GetID
</UL>

<P><STRONG><a name="[194]"></a>HDMI_IO_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.HDMI_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HDMI_IO_Init &rArr; I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV7533_Init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_GetID
</UL>

<P><STRONG><a name="[191]"></a>HDMI_IO_Read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, stm32f769i_discovery.o(i.HDMI_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HDMI_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_SetMute
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_SetFrequency
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_ReadID
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_AudioInit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV7533_PowerOn
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV7533_Configure
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_GetID
</UL>

<P><STRONG><a name="[192]"></a>HDMI_IO_Write</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.HDMI_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_SetMute
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_SetFrequency
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_AudioInit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV7533_PowerOn
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV7533_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV7533_Configure
</UL>

<P><STRONG><a name="[287]"></a>HU_Drawer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hu_stuff.o(i.HU_Drawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HU_Drawer &rArr; HUlib_drawSText &rArr; HUlib_drawTextLine &rArr; V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_drawTextLine
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_drawSText
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_drawIText
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[281]"></a>HU_Erase</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hu_stuff.o(i.HU_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HU_Erase &rArr; HUlib_eraseSText &rArr; HUlib_eraseTextLine &rArr; R_VideoErase &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_eraseTextLine
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_eraseSText
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_eraseIText
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[2c9]"></a>HU_Init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hu_stuff.o(i.HU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HU_Init &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[345]"></a>HU_Responder</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, hu_stuff.o(i.HU_Responder))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HU_Responder &rArr; M_StringCopy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_queueChatChar
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_resetIText
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_keyInIText
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Responder
</UL>

<P><STRONG><a name="[3ec]"></a>HU_Start</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, hu_stuff.o(i.HU_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HU_Start &rArr; HUlib_initSText &rArr; HUlib_initTextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Stop
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_initTextLine
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_initSText
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_initIText
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_addCharToTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayer
</UL>

<P><STRONG><a name="[3ed]"></a>HU_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hu_stuff.o(i.HU_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Start
</UL>

<P><STRONG><a name="[34f]"></a>HU_Ticker</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, hu_stuff.o(i.HU_Ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HU_Ticker &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_resetIText
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_keyInIText
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_addMessageToSText
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[317]"></a>HU_dequeueChatChar</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hu_stuff.o(i.HU_dequeueChatChar))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_BuildTiccmd
</UL>

<P><STRONG><a name="[3ea]"></a>HU_queueChatChar</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hu_stuff.o(i.HU_queueChatChar))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Responder
</UL>

<P><STRONG><a name="[3f0]"></a>HUlib_addCharToTextLine</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hu_lib.o(i.HUlib_addCharToTextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HUlib_addCharToTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Start
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_keyInIText
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_addMessageToSText
</UL>

<P><STRONG><a name="[3f3]"></a>HUlib_addLineToSText</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, hu_lib.o(i.HUlib_addLineToSText))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HUlib_addLineToSText
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_clearTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_addMessageToSText
</UL>

<P><STRONG><a name="[3f2]"></a>HUlib_addMessageToSText</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hu_lib.o(i.HUlib_addMessageToSText))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HUlib_addMessageToSText &rArr; HUlib_addCharToTextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_addLineToSText
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_addCharToTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Ticker
</UL>

<P><STRONG><a name="[3f4]"></a>HUlib_clearTextLine</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hu_lib.o(i.HUlib_clearTextLine))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_resetIText
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_initTextLine
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_addLineToSText
</UL>

<P><STRONG><a name="[3f5]"></a>HUlib_delCharFromIText</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hu_lib.o(i.HUlib_delCharFromIText))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HUlib_delCharFromIText
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_delCharFromTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_keyInIText
</UL>

<P><STRONG><a name="[3f6]"></a>HUlib_delCharFromTextLine</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hu_lib.o(i.HUlib_delCharFromTextLine))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_delCharFromIText
</UL>

<P><STRONG><a name="[3e4]"></a>HUlib_drawIText</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hu_lib.o(i.HUlib_drawIText))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HUlib_drawIText &rArr; HUlib_drawTextLine &rArr; V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_drawTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Drawer
</UL>

<P><STRONG><a name="[3e3]"></a>HUlib_drawSText</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hu_lib.o(i.HUlib_drawSText))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HUlib_drawSText &rArr; HUlib_drawTextLine &rArr; V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_drawTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Drawer
</UL>

<P><STRONG><a name="[3e5]"></a>HUlib_drawTextLine</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, hu_lib.o(i.HUlib_drawTextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HUlib_drawTextLine &rArr; V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Drawer
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_drawSText
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_drawIText
</UL>

<P><STRONG><a name="[3e7]"></a>HUlib_eraseIText</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hu_lib.o(i.HUlib_eraseIText))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HUlib_eraseIText &rArr; HUlib_eraseTextLine &rArr; R_VideoErase &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_eraseTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Erase
</UL>

<P><STRONG><a name="[3e6]"></a>HUlib_eraseSText</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hu_lib.o(i.HUlib_eraseSText))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HUlib_eraseSText &rArr; HUlib_eraseTextLine &rArr; R_VideoErase &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_eraseTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Erase
</UL>

<P><STRONG><a name="[3e8]"></a>HUlib_eraseTextLine</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hu_lib.o(i.HUlib_eraseTextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HUlib_eraseTextLine &rArr; R_VideoErase &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_VideoErase
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Erase
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_eraseSText
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_eraseIText
</UL>

<P><STRONG><a name="[3f1]"></a>HUlib_initIText</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, hu_lib.o(i.HUlib_initIText))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HUlib_initIText &rArr; HUlib_initTextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_initTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Start
</UL>

<P><STRONG><a name="[3ee]"></a>HUlib_initSText</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, hu_lib.o(i.HUlib_initSText))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HUlib_initSText &rArr; HUlib_initTextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_initTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Start
</UL>

<P><STRONG><a name="[3ef]"></a>HUlib_initTextLine</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hu_lib.o(i.HUlib_initTextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HUlib_initTextLine
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_clearTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Start
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_initSText
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_initIText
</UL>

<P><STRONG><a name="[3eb]"></a>HUlib_keyInIText</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hu_lib.o(i.HUlib_keyInIText))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HUlib_keyInIText &rArr; HUlib_delCharFromIText
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_delCharFromIText
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_addCharToTextLine
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Ticker
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Responder
</UL>

<P><STRONG><a name="[3e9]"></a>HUlib_resetIText</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hu_lib.o(i.HUlib_resetIText))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HUlib_resetIText
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_clearTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Ticker
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Responder
</UL>

<P><STRONG><a name="[ae]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2aa]"></a>I_AtExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_system.o(i.I_AtExit))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_InitNetGame
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Init
</UL>

<P><STRONG><a name="[5cc]"></a>I_BeginRead</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_video.o(i.I_BeginRead))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReadLump
</UL>

<P><STRONG><a name="[26d]"></a>I_BindJoystickVariables</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, i_joystick.o(i.I_BindJoystickVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I_BindJoystickVariables &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
</UL>

<P><STRONG><a name="[26e]"></a>I_BindSoundVariables</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_sound.o(i.I_BindSoundVariables))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
</UL>

<P><STRONG><a name="[26c]"></a>I_BindVideoVariables</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_video.o(i.I_BindVideoVariables))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
</UL>

<P><STRONG><a name="[2bf]"></a>I_CheckIsScreensaver</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_video.o(i.I_CheckIsScreensaver))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[4ff]"></a>I_ConsoleStdout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i_system.o(i.I_ConsoleStdout))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
</UL>

<P><STRONG><a name="[2ad]"></a>I_DisplayFPSDots</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_video.o(i.I_DisplayFPSDots))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[29f]"></a>I_EnableLoadingDisk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_video.o(i.I_EnableLoadingDisk))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[5cd]"></a>I_EndRead</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_video.o(i.I_EndRead))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReadLump
</UL>

<P><STRONG><a name="[2d1]"></a>I_Endoom</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_endoom.o(i.I_Endoom))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Endoom
</UL>

<P><STRONG><a name="[1f9]"></a>I_Error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i_system.o(i.I_Error))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMissionForPackName
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGameVersion
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringJoin
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindIWAD
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_ChangeTag2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockAllocatedSound
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_CacheSoundExt
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write8_file
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write8_buf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read8_file
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read8_buf
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveActivePlat
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddActivePlat
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMapThing
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_SlideTraverse
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_VanillaVersionCode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckDemoStatus
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_IdentifyVersion
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_CheckHeap
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_ScreenShot
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TextureNumForName
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FlatNumForName
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveThinkers
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoPlayDemo
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeathMatchSpawnPlayer
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckSpot
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAllocMemory
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SetSfxVolume
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SetMusicVolume
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawReadThis1
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_MakeDirectory
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDefaultForName
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TouchSpecialThing
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GiveAmmo
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindNextHighestFloor
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NewChaseDir
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Move
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateLookup
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FindPlane
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_StartButton
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerInSpecialSector
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReadLump
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnSpecials
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InitPicAnims
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateMultIcon
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateBinIcon
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_drawNum
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteDefs
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InstallSpriteLump
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_ChangeUser
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtendLumpInfo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_MMapFile
</UL>

<P><STRONG><a name="[290]"></a>I_FinishUpdate</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, i_video.o(i.I_FinishUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = I_FinishUpdate &rArr; lcd_refresh &rArr; lcd_set_layer &rArr; BSP_LCD_SetTransparency &rArr; HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_wait_ready
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_ready_layer
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[405]"></a>I_GetEvent</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, i_video.o(i.I_GetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I_GetEvent &rArr; post_event &rArr; post_key_up &rArr; D_PostEvent &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetTimeMS
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_PostEvent
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_main
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_read
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_event
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_map_get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_StartTic
</UL>

<P><STRONG><a name="[35d]"></a>I_GetMemoryValue</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, i_system.o(i.I_GetMemoryValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = I_GetMemoryValue &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StrToInt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSectorAtNullAddress
</UL>

<P><STRONG><a name="[41b]"></a>I_GetPaletteIndex</STRONG> (Thumb, 126 bytes, Stack size 28 bytes, i_video.o(i.I_GetPaletteIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I_GetPaletteIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawMouseSpeedBox
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SetPalette
</UL>

<P><STRONG><a name="[555]"></a>I_GetSfxLumpNum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i_sound.o(i.I_GetSfxLumpNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_GetSfxLumpNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>

<P><STRONG><a name="[292]"></a>I_GetTime</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, i_timer.o(i.I_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckDemoStatus
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoPlayDemo
</UL>

<P><STRONG><a name="[355]"></a>I_GetTimeMS</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i_timer.o(i.I_GetTimeMS))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdjustedTime
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetEvent
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_event
</UL>

<P><STRONG><a name="[29c]"></a>I_GraphicsCheckCommandLine</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_video.o(i.I_GraphicsCheckCommandLine))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[29e]"></a>I_InitGraphics</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i_video.o(i.I_InitGraphics))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_InitGraphics
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_map_init
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[2c1]"></a>I_InitJoystick</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_joystick.o(i.I_InitJoystick))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2c3]"></a>I_InitMusic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_sound.o(i.I_InitMusic))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2c2]"></a>I_InitSound</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, i_sound.o(i.I_InitSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I_InitSound &rArr; M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitTimidityConfig
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSfxModule
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMusicModule
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2c0]"></a>I_InitTimer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_timer.o(i.I_InitTimer))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[40b]"></a>I_InitTimidityConfig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dummy.o(i.I_InitTimidityConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitSound
</UL>

<P><STRONG><a name="[551]"></a>I_PrecacheSounds</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, i_sound.o(i.I_PrecacheSounds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I_PrecacheSounds
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Init
</UL>

<P><STRONG><a name="[2ab]"></a>I_PrintBanner</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i_system.o(i.I_PrintBanner))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I_PrintBanner
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_PrintStartupBanner
</UL>

<P><STRONG><a name="[2bc]"></a>I_PrintDivider</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i_system.o(i.I_PrintDivider))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_PrintStartupBanner
</UL>

<P><STRONG><a name="[2bd]"></a>I_PrintStartupBanner</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i_system.o(i.I_PrintStartupBanner))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I_PrintStartupBanner &rArr; I_PrintBanner
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_PrintDivider
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_PrintBanner
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[319]"></a>I_Quit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i_system.o(i.I_Quit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_Quit
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckDemoStatus
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuitResponse
</UL>

<P><STRONG><a name="[40e]"></a>I_ReadScreen</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i_video.o(i.I_ReadScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I_ReadScreen &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_StartScreen
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_EndScreen
</UL>

<P><STRONG><a name="[29d]"></a>I_SetGrabMouseCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_video.o(i.I_SetGrabMouseCallback))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[288]"></a>I_SetPalette</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, i_video.o(i.I_SetPalette))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = I_SetPalette &rArr; lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_config_layer
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_load_clut
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_layer_addr
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetPaletteIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_doPaletteStuff
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Stop
</UL>

<P><STRONG><a name="[29b]"></a>I_SetWindowTitle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_video.o(i.I_SetWindowTitle))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[554]"></a>I_ShutdownMusic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_sound.o(i.I_ShutdownMusic))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Shutdown
</UL>

<P><STRONG><a name="[553]"></a>I_ShutdownSound</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, i_sound.o(i.I_ShutdownSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_ShutdownSound
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Shutdown
</UL>

<P><STRONG><a name="[41c]"></a>I_Sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i_timer.o(i.I_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_WaitVBL
</UL>

<P><STRONG><a name="[556]"></a>I_SoundIsPlaying</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i_sound.o(i.I_SoundIsPlaying))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_SoundIsPlaying
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UpdateSounds
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopChannel
</UL>

<P><STRONG><a name="[2a4]"></a>I_StartFrame</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_video.o(i.I_StartFrame))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[41e]"></a>I_StartSound</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, i_sound.o(i.I_StartSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I_StartSound
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVolumeSeparation
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>

<P><STRONG><a name="[248]"></a>I_StartTic</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i_video.o(i.I_StartTic))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I_StartTic &rArr; I_GetEvent &rArr; post_event &rArr; post_key_up &rArr; D_PostEvent &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildNewTic
</UL>

<P><STRONG><a name="[557]"></a>I_StopSound</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, i_sound.o(i.I_StopSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_StopSound
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopChannel
</UL>

<P><STRONG><a name="[47b]"></a>I_Tactile</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_system.o(i.I_Tactile))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
</UL>

<P><STRONG><a name="[28f]"></a>I_UpdateNoBlit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i_video.o(i.I_UpdateNoBlit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I_UpdateNoBlit &rArr; draw_cross
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cross
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[559]"></a>I_UpdateSound</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i_sound.o(i.I_UpdateSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_UpdateSound
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UpdateSounds
</UL>

<P><STRONG><a name="[421]"></a>I_UpdateSoundParams</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, i_sound.o(i.I_UpdateSoundParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I_UpdateSoundParams
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVolumeSeparation
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UpdateSounds
</UL>

<P><STRONG><a name="[422]"></a>I_WaitVBL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i_timer.o(i.I_WaitVBL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I_WaitVBL &rArr; I_Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuitResponse
</UL>

<P><STRONG><a name="[423]"></a>I_ZoneBase</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, i_system.o(i.I_ZoneBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I_ZoneBase &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAllocMemory
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Init
</UL>

<P><STRONG><a name="[488]"></a>M_AddToBox</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, m_bbox.o(i.M_AddToBox))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_MarkRect
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GroupLines
</UL>

<P><STRONG><a name="[26b]"></a>M_ApplyPlatformDefaults</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_controls.o(i.M_ApplyPlatformDefaults))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
</UL>

<P><STRONG><a name="[26f]"></a>M_BindBaseControls</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, m_controls.o(i.M_BindBaseControls))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M_BindBaseControls &rArr; M_BindVariable &rArr; GetDefaultForName &rArr; SearchCollection &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
</UL>

<P><STRONG><a name="[273]"></a>M_BindChatControls</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, m_controls.o(i.M_BindChatControls))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = M_BindChatControls &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
</UL>

<P><STRONG><a name="[271]"></a>M_BindMapControls</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, m_controls.o(i.M_BindMapControls))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M_BindMapControls &rArr; M_BindVariable &rArr; GetDefaultForName &rArr; SearchCollection &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
</UL>

<P><STRONG><a name="[272]"></a>M_BindMenuControls</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, m_controls.o(i.M_BindMenuControls))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M_BindMenuControls &rArr; M_BindVariable &rArr; GetDefaultForName &rArr; SearchCollection &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
</UL>

<P><STRONG><a name="[274]"></a>M_BindVariable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, m_config.o(i.M_BindVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M_BindVariable &rArr; GetDefaultForName &rArr; SearchCollection &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDefaultForName
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindWeaponControls
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindMenuControls
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindMapControls
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindChatControls
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindBaseControls
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_BindJoystickVariables
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
</UL>

<P><STRONG><a name="[270]"></a>M_BindWeaponControls</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, m_controls.o(i.M_BindWeaponControls))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M_BindWeaponControls &rArr; M_BindVariable &rArr; GetDefaultForName &rArr; SearchCollection &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
</UL>

<P><STRONG><a name="[90]"></a>M_ChangeDetail</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, m_menu.o(i.M_ChangeDetail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M_ChangeDetail
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SetViewSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>M_ChangeMessages</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, m_menu.o(i.M_ChangeMessages))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[27a]"></a>M_CheckParm</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_argv.o(i.M_CheckParm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Endoom
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveGameSettings
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConnectData
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitSound
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_TimeDemo
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_BeginRecording
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_ConnectNetGame
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_CheckNetGame
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoPlayDemo
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ParmExists
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadRejectArray
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_OpenFile
</UL>

<P><STRONG><a name="[2b6]"></a>M_CheckParmWithArgs</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, m_argv.o(i.M_CheckParmWithArgs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGameVersion
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindIWAD
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ParseCommandLine
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadDefaults
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_RecordDemo
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_IdentifyVersion
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ZoneBase
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetMemoryValue
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpechitOverrun
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DonutOverrun
</UL>

<P><STRONG><a name="[8a]"></a>M_ChooseSkill</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m_menu.o(i.M_ChooseSkill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M_ChooseSkill &rArr; G_DeferedInitNew
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeferedInitNew
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartMessage
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ClearMenus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[487]"></a>M_ClearBox</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_bbox.o(i.M_ClearBox))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GroupLines
</UL>

<P><STRONG><a name="[42d]"></a>M_ClearMenus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_menu.o(i.M_ClearMenus))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_VerifyNightmare
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadSelect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_EndGameResponse
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DoSave
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ChooseSkill
</UL>

<P><STRONG><a name="[33f]"></a>M_ClearRandom</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_random.o(i.M_ClearRandom))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_InitNew
</UL>

<P><STRONG><a name="[42e]"></a>M_DoSave</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_menu.o(i.M_DoSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M_DoSave &rArr; G_SaveGame &rArr; M_StringCopy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_SaveGame
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ClearMenus
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickSaveResponse
</UL>

<P><STRONG><a name="[89]"></a>M_DrawEpisode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_menu.o(i.M_DrawEpisode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M_DrawEpisode &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>M_DrawLoad</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, m_menu.o(i.M_DrawLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M_DrawLoad &rArr; M_WriteText &rArr; V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteText
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSaveLoadBorder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>M_DrawMainMenu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_menu.o(i.M_DrawMainMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M_DrawMainMenu &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>M_DrawNewGame</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m_menu.o(i.M_DrawNewGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M_DrawNewGame &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>M_DrawNewLevel</STRONG> (Thumb, 42 bytes, Stack size 72 bytes, m_menu.o(i.M_DrawNewLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = M_DrawNewLevel &rArr; M_WriteText &rArr; V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteText
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>M_DrawOptions</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, m_menu.o(i.M_DrawOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M_DrawOptions &rArr; M_DrawThermo &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawThermo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>M_DrawReadThis1</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, m_menu.o(i.M_DrawReadThis1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = M_DrawReadThis1 &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>M_DrawReadThis2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_menu.o(i.M_DrawReadThis2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M_DrawReadThis2 &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>M_DrawSave</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, m_menu.o(i.M_DrawSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M_DrawSave &rArr; M_WriteText &rArr; V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteText
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringWidth
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSaveLoadBorder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[42f]"></a>M_DrawSaveLoadBorder</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, m_menu.o(i.M_DrawSaveLoadBorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = M_DrawSaveLoadBorder &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSave
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawLoad
</UL>

<P><STRONG><a name="[9b]"></a>M_DrawSound</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, m_menu.o(i.M_DrawSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M_DrawSound &rArr; M_DrawThermo &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawThermo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[433]"></a>M_DrawThermo</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, m_menu.o(i.M_DrawThermo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M_DrawThermo &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSound
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawOptions
</UL>

<P><STRONG><a name="[28d]"></a>M_Drawer</STRONG> (Thumb, 418 bytes, Stack size 112 bytes, m_menu.o(i.M_Drawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = M_Drawer &rArr; M_DrawOPLDev &rArr; M_WriteText &rArr; V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteText
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringWidth
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringHeight
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawOPLDev
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[8e]"></a>M_EndGame</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m_menu.o(i.M_EndGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M_EndGame &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[141]"></a>M_EndGameResponse</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_menu.o(i.M_EndGameResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = M_EndGameResponse &rArr; D_StartTitle
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_StartTitle
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ClearMenus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(i.M_EndGame)
</UL>
<P><STRONG><a name="[88]"></a>M_Episode</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, m_menu.o(i.M_Episode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M_Episode
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[437]"></a>M_ExtractFileBase</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, m_misc.o(i.M_ExtractFileBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M_ExtractFileBase
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
</UL>

<P><STRONG><a name="[257]"></a>M_FileExists</STRONG> (Thumb, 26 bytes, Stack size 288 bytes, m_misc.o(i.M_FileExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = M_FileExists &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByName
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDirectoryHasIWAD
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_ScreenShot
</UL>

<P><STRONG><a name="[5d1]"></a>M_FileLength</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_misc.o(i.M_FileLength))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_OpenFile
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_MMapFile
</UL>

<P><STRONG><a name="[97]"></a>M_FinishReadThis</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, m_menu.o(i.M_FinishReadThis))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M_FinishReadThis
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadThis2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[2bb]"></a>M_GetSaveGameDir</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, m_config.o(i.M_GetSaveGameDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = M_GetSaveGameDir &rArr; M_MakeDirectory &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringJoin
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_MakeDirectory
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2c4]"></a>M_Init</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, m_menu.o(i.M_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M_Init &rArr; M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2b1]"></a>M_LoadDefaults</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, m_config.o(i.M_LoadDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = M_LoadDefaults &rArr; M_StringJoin &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringJoin
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultCollection
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[83]"></a>M_LoadGame</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m_menu.o(i.M_LoadGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = M_LoadGame &rArr; M_ReadSaveStrings &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartMessage
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadSaveStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>M_LoadSelect</STRONG> (Thumb, 40 bytes, Stack size 272 bytes, m_menu.o(i.M_LoadSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = M_LoadSelect &rArr; P_SaveGameFile &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveGameFile
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_LoadGame
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ClearMenus
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickLoadResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[439]"></a>M_MakeDirectory</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, m_misc.o(i.M_MakeDirectory))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = M_MakeDirectory &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetConfigDir
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_GetSaveGameDir
</UL>

<P><STRONG><a name="[92]"></a>M_MouseStub</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_menu.o(i.M_MouseStub))
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>M_MusicVol</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, m_menu.o(i.M_MusicVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M_MusicVol &rArr; S_SetMusicVolume
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SetMusicVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>M_NewGame</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m_menu.o(i.M_NewGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M_NewGame &rArr; M_StartMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartMessage
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>M_Options</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, m_menu.o(i.M_Options))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M_Options
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[440]"></a>M_ParmExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m_argv.o(i.M_ParmExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M_ParmExists &rArr; M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatCopy
</UL>

<P><STRONG><a name="[441]"></a>M_QuickLoad</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, m_menu.o(i.M_QuickLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M_QuickLoad &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartMessage
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>

<P><STRONG><a name="[142]"></a>M_QuickLoadResponse</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_menu.o(i.M_QuickLoadResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = M_QuickLoadResponse &rArr; M_LoadSelect &rArr; P_SaveGameFile &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(i.M_QuickLoad)
</UL>
<P><STRONG><a name="[442]"></a>M_QuickSave</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, m_menu.o(i.M_QuickSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = M_QuickSave &rArr; M_ReadSaveStrings &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartControlPanel
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartMessage
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadSaveStrings
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>

<P><STRONG><a name="[143]"></a>M_QuickSaveResponse</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_menu.o(i.M_QuickSaveResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M_QuickSaveResponse &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DoSave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(i.M_QuickSave)
</UL>
<P><STRONG><a name="[86]"></a>M_QuitDOOM</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m_menu.o(i.M_QuitDOOM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M_QuitDOOM &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartMessage
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SelectEndMessage
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[144]"></a>M_QuitResponse</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, m_menu.o(i.M_QuitResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = M_QuitResponse &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Quit
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_WaitVBL
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_menu.o(i.M_QuitDOOM)
<LI> m_menu.o(i.M_Responder)
</UL>
<P><STRONG><a name="[539]"></a>M_Random</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_random.o(i.M_Random))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_initMelt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Ticker
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateAnimatedBack
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initAnimatedBack
</UL>

<P><STRONG><a name="[43b]"></a>M_ReadSaveStrings</STRONG> (Thumb, 126 bytes, Stack size 832 bytes, m_menu.o(i.M_ReadSaveStrings))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = M_ReadSaveStrings &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveGameFile
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SaveGame
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickSave
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadGame
</UL>

<P><STRONG><a name="[85]"></a>M_ReadThis</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, m_menu.o(i.M_ReadThis))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M_ReadThis
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>M_ReadThis2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_menu.o(i.M_ReadThis2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = M_ReadThis2 &rArr; M_FinishReadThis
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_FinishReadThis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[2da]"></a>M_Responder</STRONG> (Thumb, 2000 bytes, Stack size 24 bytes, m_menu.o(i.M_Responder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = M_Responder &rArr; M_SaveGame &rArr; M_ReadSaveStrings &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SetPalette
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartControlPanel
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Quit
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ScreenShot
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringWidth
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SizeDisplay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SaveGame
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuitResponse
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuitDOOM
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickSave
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickLoad
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadGame
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_EndGame
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DoSave
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ClearMenus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ChangeMessages
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ChangeDetail
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNullKey
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_ProcessEvents
</UL>

<P><STRONG><a name="[12f]"></a>M_SaveDefaults</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_config.o(i.M_SaveDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M_SaveDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDefaultCollection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> d_main.o(i.D_DoomMain)
</UL>
<P><STRONG><a name="[84]"></a>M_SaveGame</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, m_menu.o(i.M_SaveGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = M_SaveGame &rArr; M_ReadSaveStrings &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StartMessage
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadSaveStrings
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>M_SaveSelect</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, m_menu.o(i.M_SaveSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M_SaveSelect &rArr; M_StringCopy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[2ae]"></a>M_SetConfigDir</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_config.o(i.M_SetConfigDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = M_SetConfigDir &rArr; M_MakeDirectory &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_MakeDirectory
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDefaultConfigDir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2b0]"></a>M_SetConfigFilenames</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_config.o(i.M_SetConfigFilenames))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[436]"></a>M_SetupNextMenu</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_menu.o(i.M_SetupNextMenu))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Sound
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SaveGame
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadThis2
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadThis
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickSave
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Options
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_NewGame
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadGame
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_FinishReadThis
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Episode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetLevel
</UL>

<P><STRONG><a name="[99]"></a>M_SfxVol</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, m_menu.o(i.M_SfxVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M_SfxVol &rArr; S_SetSfxVolume
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SetSfxVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>M_SizeDisplay</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, m_menu.o(i.M_SizeDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M_SizeDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SetViewSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>M_Sound</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, m_menu.o(i.M_Sound))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M_Sound
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[344]"></a>M_StartControlPanel</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, m_menu.o(i.M_StartControlPanel))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Responder
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickSave
</UL>

<P><STRONG><a name="[42b]"></a>M_StartMessage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m_menu.o(i.M_StartMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M_StartMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SaveGame
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuitDOOM
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickSave
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickLoad
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_NewGame
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadGame
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_EndGame
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ChooseSkill
</UL>

<P><STRONG><a name="[2e4]"></a>M_StrToInt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, m_misc.o(i.M_StrToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetMemoryValue
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpechitOverrun
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DonutOverrun
</UL>

<P><STRONG><a name="[44b]"></a>M_StringConcat</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, m_misc.o(i.M_StringConcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M_StringConcat &rArr; M_StringCopy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringJoin
</UL>

<P><STRONG><a name="[25d]"></a>M_StringCopy</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, m_misc.o(i.M_StringCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M_StringCopy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringJoin
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSfxLumpName
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerQuitGame
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Drawer
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_LoadGame
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Responder
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_SaveGame
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringConcat
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SaveSelect
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadSaveStrings
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadSelect
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_loadUnloadData
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChecksumAddLump
</UL>

<P><STRONG><a name="[2b7]"></a>M_StringEndsWith</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, m_misc.o(i.M_StringEndsWith))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M_StringEndsWith &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[435]"></a>M_StringHeight</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, m_menu.o(i.M_StringHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M_StringHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Drawer
</UL>

<P><STRONG><a name="[25a]"></a>M_StringJoin</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, m_misc.o(i.M_StringJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M_StringJoin &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringConcat
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByName
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDirectoryHasIWAD
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadDefaults
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_GetSaveGameDir
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDefaultConfigDir
</UL>

<P><STRONG><a name="[434]"></a>M_StringWidth</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, m_menu.o(i.M_StringWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M_StringWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Drawer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSave
</UL>

<P><STRONG><a name="[30]"></a>M_Ticker</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, m_menu.o(i.M_Ticker))
<BR>[Address Reference Count : 1]<UL><LI> d_net.o(.data)
</UL>
<P><STRONG><a name="[140]"></a>M_VerifyNightmare</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m_menu.o(i.M_VerifyNightmare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M_VerifyNightmare &rArr; G_DeferedInitNew
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeferedInitNew
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ClearMenus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(i.M_ChooseSkill)
</UL>
<P><STRONG><a name="[31a]"></a>M_WriteFile</STRONG> (Thumb, 70 bytes, Stack size 584 bytes, m_misc.o(i.M_WriteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = M_WriteFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_writen
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckDemoStatus
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePCXfile
</UL>

<P><STRONG><a name="[430]"></a>M_WriteText</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, m_menu.o(i.M_WriteText))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M_WriteText &rArr; V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Drawer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSave
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawNewLevel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawLoad
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawOPLDev
</UL>

<P><STRONG><a name="[1aa]"></a>M_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, m_misc.o(i.M_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGameName
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Responder
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSfxLumpName
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveGameFile
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindChatControls
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_BindJoystickVariables
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_RecordDemo
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_BindVariables
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_ScreenShot
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_WriteSaveGameHeader
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ReadSaveGameHeader
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DemoVersionDescription
</UL>

<P><STRONG><a name="[44d]"></a>M_vsnprintf</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, m_misc.o(i.M_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
</UL>

<P><STRONG><a name="[af]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[28e]"></a>NetUpdate</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, d_loop.o(i.NetUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = NetUpdate &rArr; BuildNewTic &rArr; I_StartTic &rArr; I_GetEvent &rArr; post_event &rArr; post_key_up &rArr; D_PostEvent &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdjustedTime
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildNewTic
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderPlayerView
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[103]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.OTG_HS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OTG_HS_IRQHandler &rArr; HAL_HCD_IRQHandler &rArr; HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[44f]"></a>OTM8009A_IO_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.OTM8009A_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OTM8009A_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
</UL>

<P><STRONG><a name="[224]"></a>OTM8009A_Init</STRONG> (Thumb, 862 bytes, Stack size 16 bytes, otm8009a.o(i.OTM8009A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OTM8009A_Init &rArr; DSI_IO_WriteCmd &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_IO_Delay
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[14f]"></a>PIT_AddLineIntercepts</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, p_maputl.o(i.PIT_AddLineIntercepts))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PIT_AddLineIntercepts &rArr; P_PointOnDivlineSide &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PointOnDivlineSide
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MakeDivline
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InterceptVector
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterceptsOverrun
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PointOnLineSide
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_maputl.o(i.P_PathTraverse)
</UL>
<P><STRONG><a name="[150]"></a>PIT_AddThingIntercepts</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, p_maputl.o(i.PIT_AddThingIntercepts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PIT_AddThingIntercepts &rArr; P_PointOnDivlineSide &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PointOnDivlineSide
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InterceptVector
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterceptsOverrun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_maputl.o(i.P_PathTraverse)
</UL>
<P><STRONG><a name="[14a]"></a>PIT_ChangeSector</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, p_map.o(i.PIT_ChangeSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = PIT_ChangeSector &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ThingHeightClip
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_map.o(i.P_ChangeSector)
</UL>
<P><STRONG><a name="[14c]"></a>PIT_CheckLine</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, p_map.o(i.PIT_CheckLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = PIT_CheckLine &rArr; SpechitOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BoxOnLineSide
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpechitOverrun
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineOpening
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_map.o(i.P_CheckPosition)
</UL>
<P><STRONG><a name="[14b]"></a>PIT_CheckThing</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, p_map.o(i.PIT_CheckThing))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = PIT_CheckThing &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TouchSpecialThing
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_map.o(i.P_CheckPosition)
</UL>
<P><STRONG><a name="[151]"></a>PIT_RadiusAttack</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, p_map.o(i.PIT_RadiusAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = PIT_RadiusAttack &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_map.o(i.P_RadiusAttack)
</UL>
<P><STRONG><a name="[155]"></a>PIT_StompThing</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, p_map.o(i.PIT_StompThing))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = PIT_StompThing &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_map.o(i.P_TeleportMove)
</UL>
<P><STRONG><a name="[12b]"></a>PIT_VileCheck</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, p_enemy.o(i.PIT_VileCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = PIT_VileCheck &rArr; P_CheckPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_enemy.o(i.A_VileChase)
</UL>
<P><STRONG><a name="[146]"></a>PTR_AimTraverse</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, p_map.o(i.PTR_AimTraverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PTR_AimTraverse &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineOpening
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_map.o(i.P_AimLineAttack)
</UL>
<P><STRONG><a name="[14d]"></a>PTR_ShootTraverse</STRONG> (Thumb, 638 bytes, Stack size 56 bytes, p_map.o(i.PTR_ShootTraverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = PTR_ShootTraverse &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnBlood
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ShootSpecialLine
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPuff
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineOpening
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_map.o(i.P_LineAttack)
</UL>
<P><STRONG><a name="[153]"></a>PTR_SlideTraverse</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, p_map.o(i.PTR_SlideTraverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PTR_SlideTraverse &rArr; P_PointOnLineSide &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PointOnLineSide
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineOpening
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_map.o(i.P_SlideMove)
</UL>
<P><STRONG><a name="[156]"></a>PTR_UseTraverse</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, p_map.o(i.PTR_UseTraverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = PTR_UseTraverse &rArr; P_UseSpecialLine &rArr; EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PointOnLineSide
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineOpening
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_map.o(i.P_UseLines)
</UL>
<P><STRONG><a name="[2f7]"></a>P_ActivateInStasis</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, p_plats.o(i.P_ActivateInStasis))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
</UL>

<P><STRONG><a name="[2e9]"></a>P_ActivateInStasisCeiling</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, p_ceilng.o(i.P_ActivateInStasisCeiling))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoCeiling
</UL>

<P><STRONG><a name="[2eb]"></a>P_AddActiveCeiling</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, p_ceilng.o(i.P_AddActiveCeiling))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoCeiling
</UL>

<P><STRONG><a name="[2f8]"></a>P_AddActivePlat</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, p_plats.o(i.P_AddActivePlat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = P_AddActivePlat
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
</UL>

<P><STRONG><a name="[2e6]"></a>P_AddThinker</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, p_tick.o(i.P_AddThinker))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveThinkers
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnStrobeFlash
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnLightFlash
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnGlowingLight
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnFireFlicker
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_BuildStairs
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnDoorRaiseIn5Mins
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnDoorCloseIn30
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_VerticalDoor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoCeiling
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDonut
</UL>

<P><STRONG><a name="[1cb]"></a>P_AimLineAttack</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, p_map.o(i.P_AimLineAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = P_AimLineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PathTraverse
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SubstNullMobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BulletSlope
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayerMissile
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Saw
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SPosAttack
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Punch
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PosAttack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CPosAttack
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BFGSpray
</UL>

<P><STRONG><a name="[1ed]"></a>P_AproxDistance</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, p_maputl.o(i.P_AproxDistance))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ZMovement
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_HitSlideLine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Tracer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkullAttack
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LookForPlayers
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMissileRange
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMeleeRange
</UL>

<P><STRONG><a name="[337]"></a>P_ArchivePlayers</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, p_saveg.o(i.P_ArchivePlayers))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = P_ArchivePlayers &rArr; saveg_write_player_t &rArr; saveg_write_pspdef_t &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_player_t
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_pad
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
</UL>

<P><STRONG><a name="[33a]"></a>P_ArchiveSpecials</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, p_saveg.o(i.P_ArchiveSpecials))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = P_ArchiveSpecials &rArr; saveg_write_vldoor_t &rArr; saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_vldoor_t
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_strobe_t
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_plat_t
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_pad
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_lightflash_t
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_glow_t
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_floormove_t
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_ceiling_t
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
</UL>

<P><STRONG><a name="[339]"></a>P_ArchiveThinkers</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, p_saveg.o(i.P_ArchiveThinkers))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = P_ArchiveThinkers &rArr; saveg_write_mobj_t &rArr; saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_pad
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_mobj_t
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
</UL>

<P><STRONG><a name="[338]"></a>P_ArchiveWorld</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, p_saveg.o(i.P_ArchiveWorld))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = P_ArchiveWorld &rArr; saveg_write16
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write16
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
</UL>

<P><STRONG><a name="[471]"></a>P_BlockLinesIterator</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, p_maputl.o(i.P_BlockLinesIterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = P_BlockLinesIterator
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PathTraverse
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckPosition
</UL>

<P><STRONG><a name="[1f1]"></a>P_BlockThingsIterator</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, p_maputl.o(i.P_BlockThingsIterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = P_BlockThingsIterator
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PathTraverse
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckPosition
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileChase
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ChangeSector
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TeleportMove
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RadiusAttack
</UL>

<P><STRONG><a name="[455]"></a>P_BoxOnLineSide</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, p_maputl.o(i.P_BoxOnLineSide))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = P_BoxOnLineSide &rArr; P_PointOnLineSide &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PointOnLineSide
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CheckLine
</UL>

<P><STRONG><a name="[1e9]"></a>P_BringUpWeapon</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, p_pspr.o(i.P_BringUpWeapon))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = P_BringUpWeapon &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupPsprites
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Lower
</UL>

<P><STRONG><a name="[1e7]"></a>P_BulletSlope</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, p_pspr.o(i.P_BulletSlope))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = P_BulletSlope &rArr; P_AimLineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AimLineAttack
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun2
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FirePistol
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireCGun
</UL>

<P><STRONG><a name="[46a]"></a>P_CalcHeight</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, p_user.o(i.P_CalcHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = P_CalcHeight &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DeathThink
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerThink
</UL>

<P><STRONG><a name="[46c]"></a>P_ChangeSector</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, p_map.o(i.P_ChangeSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = P_ChangeSector &rArr; P_BlockThingsIterator
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BlockThingsIterator
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MovePlane
</UL>

<P><STRONG><a name="[46d]"></a>P_ChangeSwitchTexture</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, p_switch.o(i.P_ChangeSwitchTexture))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = P_ChangeSwitchTexture &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_StartButton
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ShootSpecialLine
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
</UL>

<P><STRONG><a name="[1dd]"></a>P_CheckAmmo</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, p_pspr.o(i.P_CheckAmmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = P_CheckAmmo &rArr; P_SetPsprite
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FireWeapon
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_ReFire
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CheckReload
</UL>

<P><STRONG><a name="[1d6]"></a>P_CheckMeleeRange</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, p_enemy.o(i.P_CheckMeleeRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = P_CheckMeleeRange &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AproxDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_TroopAttack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkelFist
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SargAttack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_HeadAttack
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BruisAttack
</UL>

<P><STRONG><a name="[1db]"></a>P_CheckMissileRange</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, p_enemy.o(i.P_CheckMissileRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = P_CheckMissileRange &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AproxDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
</UL>

<P><STRONG><a name="[46f]"></a>P_CheckMissileSpawn</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, p_mobj.o(i.P_CheckMissileSpawn))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ExplodeMissile
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryMove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayerMissile
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
</UL>

<P><STRONG><a name="[31c]"></a>P_CheckPosition</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, p_map.o(i.P_CheckPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = P_CheckPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BlockLinesIterator
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointInSubsector
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BlockThingsIterator
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NightmareRespawn
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ThingHeightClip
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckSpot
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryMove
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_VileCheck
</UL>

<P><STRONG><a name="[1d8]"></a>P_CheckSight</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, p_sight.o(i.P_CheckSight))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossBSPNode
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_RadiusAttack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileAttack
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpidRefire
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Look
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Fire
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CPosRefire
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LookForPlayers
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMissileRange
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMeleeRange
</UL>

<P><STRONG><a name="[472]"></a>P_CrossBSPNode</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, p_sight.o(i.P_CrossBSPNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DivlineSide
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSubsector
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossBSPNode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossBSPNode
</UL>

<P><STRONG><a name="[475]"></a>P_CrossSpecialLine</STRONG> (Thumb, 1630 bytes, Stack size 24 bytes, p_spec.o(i.P_CrossSpecialLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_StopPlat
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_SecretExitLevel
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ExitLevel
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_TurnTagLightsOff
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_StartLightStrobing
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_LightTurnOn
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_BuildStairs
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoCeiling
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_CeilingCrushStop
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_Teleport
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryMove
</UL>

<P><STRONG><a name="[473]"></a>P_CrossSubsector</STRONG> (Thumb, 392 bytes, Stack size 80 bytes, p_sight.o(i.P_CrossSubsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = P_CrossSubsector &rArr; P_InterceptVector2 &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DivlineSide
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InterceptVector2
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossBSPNode
</UL>

<P><STRONG><a name="[1ce]"></a>P_DamageMobj</STRONG> (Thumb, 624 bytes, Stack size 40 bytes, p_inter.o(i.P_DamageMobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Tactile
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_KillMobj
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_ShootTraverse
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_StompThing
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_RadiusAttack
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CheckThing
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChangeSector
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileAttack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_TroopAttack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkelFist
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SargAttack
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_HeadAttack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BruisAttack
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BFGSpray
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainShootSkull
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerInSpecialSector
</UL>

<P><STRONG><a name="[47d]"></a>P_DeathThink</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, p_user.o(i.P_DeathThink))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = P_DeathThink &rArr; P_MovePsprites &rArr; P_SetPsprite
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MovePsprites
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CalcHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerThink
</UL>

<P><STRONG><a name="[474]"></a>P_DivlineSide</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, p_sight.o(i.P_DivlineSide))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = P_DivlineSide
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSubsector
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossBSPNode
</UL>

<P><STRONG><a name="[47f]"></a>P_DropWeapon</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, p_pspr.o(i.P_DropWeapon))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = P_DropWeapon &rArr; P_SetPsprite
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_KillMobj
</UL>

<P><STRONG><a name="[470]"></a>P_ExplodeMissile</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, p_mobj.o(i.P_ExplodeMissile))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = P_ExplodeMissile &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ZMovement
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_XYMovement
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMissileSpawn
</UL>

<P><STRONG><a name="[2ea]"></a>P_FindHighestCeilingSurrounding</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, p_spec.o(i.P_FindHighestCeilingSurrounding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = P_FindHighestCeilingSurrounding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoCeiling
</UL>

<P><STRONG><a name="[2ef]"></a>P_FindHighestFloorSurrounding</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, p_spec.o(i.P_FindHighestFloorSurrounding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = P_FindHighestFloorSurrounding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
</UL>

<P><STRONG><a name="[2ee]"></a>P_FindLowestCeilingSurrounding</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, p_spec.o(i.P_FindLowestCeilingSurrounding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = P_FindLowestCeilingSurrounding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnDoorRaiseIn5Mins
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_VerticalDoor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
</UL>

<P><STRONG><a name="[2f0]"></a>P_FindLowestFloorSurrounding</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, p_spec.o(i.P_FindLowestFloorSurrounding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = P_FindLowestFloorSurrounding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
</UL>

<P><STRONG><a name="[480]"></a>P_FindMinSurroundingLight</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, p_spec.o(i.P_FindMinSurroundingLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = P_FindMinSurroundingLight
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnStrobeFlash
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnLightFlash
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnGlowingLight
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnFireFlicker
</UL>

<P><STRONG><a name="[2f1]"></a>P_FindNextHighestFloor</STRONG> (Thumb, 130 bytes, Stack size 128 bytes, p_spec.o(i.P_FindNextHighestFloor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = P_FindNextHighestFloor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
</UL>

<P><STRONG><a name="[2e7]"></a>P_FindSectorFromLineTag</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, p_spec.o(i.P_FindSectorFromLineTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_FindSectorFromLineTag
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_StartLightStrobing
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_BuildStairs
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoCeiling
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDonut
</UL>

<P><STRONG><a name="[1ec]"></a>P_FireWeapon</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, p_pspr.o(i.P_FireWeapon))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = P_FireWeapon &rArr; P_SetMobjState &rArr; P_RemoveMobj &rArr; S_StopSound &rArr; S_StopChannel &rArr; I_StopSound
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckAmmo
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NoiseAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_WeaponReady
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_ReFire
</UL>

<P><STRONG><a name="[482]"></a>P_GiveAmmo</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, p_inter.o(i.P_GiveAmmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = P_GiveAmmo
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TouchSpecialThing
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GiveWeapon
</UL>

<P><STRONG><a name="[4c0]"></a>P_GiveArmor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, p_inter.o(i.P_GiveArmor))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TouchSpecialThing
</UL>

<P><STRONG><a name="[484]"></a>P_GiveBody</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, p_inter.o(i.P_GiveBody))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TouchSpecialThing
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GivePower
</UL>

<P><STRONG><a name="[4c1]"></a>P_GiveCard</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, p_inter.o(i.P_GiveCard))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TouchSpecialThing
</UL>

<P><STRONG><a name="[483]"></a>P_GivePower</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, p_inter.o(i.P_GivePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = P_GivePower
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GiveBody
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Responder
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TouchSpecialThing
</UL>

<P><STRONG><a name="[485]"></a>P_GiveWeapon</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, p_inter.o(i.P_GiveWeapon))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = P_GiveWeapon &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GiveAmmo
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TouchSpecialThing
</UL>

<P><STRONG><a name="[486]"></a>P_GroupLines</STRONG> (Thumb, 518 bytes, Stack size 56 bytes, p_setup.o(i.P_GroupLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = P_GroupLines &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ClearBox
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_AddToBox
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[1e8]"></a>P_GunShot</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, p_pspr.o(i.P_GunShot))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = P_GunShot &rArr; P_LineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineAttack
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FirePistol
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireCGun
</UL>

<P><STRONG><a name="[489]"></a>P_HitSlideLine</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, p_map.o(i.P_HitSlideLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = P_HitSlideLine &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PointOnLineSide
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AproxDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SlideMove
</UL>

<P><STRONG><a name="[2c6]"></a>P_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, p_setup.o(i.P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = P_Init &rArr; R_InitSprites &rArr; R_InitSpriteDefs &rArr; W_GetNumForName &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSprites
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InitSwitchList
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InitPicAnims
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[48b]"></a>P_InitPicAnims</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, p_spec.o(i.P_InitPicAnims))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = P_InitPicAnims &rArr; R_FlatNumForName &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TextureNumForName
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FlatNumForName
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_CheckTextureNumForName
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Init
</UL>

<P><STRONG><a name="[48a]"></a>P_InitSwitchList</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, p_switch.o(i.P_InitSwitchList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = P_InitSwitchList &rArr; R_TextureNumForName &rArr; R_CheckTextureNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TextureNumForName
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Init
</UL>

<P><STRONG><a name="[4b3]"></a>P_InitThinkers</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, p_tick.o(i.P_InitThinkers))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveThinkers
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[453]"></a>P_InterceptVector</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, p_maputl.o(i.P_InterceptVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = P_InterceptVector &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AddThingIntercepts
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AddLineIntercepts
</UL>

<P><STRONG><a name="[47c]"></a>P_KillMobj</STRONG> (Thumb, 460 bytes, Stack size 24 bytes, p_inter.o(i.P_KillMobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Stop
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DropWeapon
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
</UL>

<P><STRONG><a name="[1d7]"></a>P_LineAttack</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, p_map.o(i.P_LineAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = P_LineAttack &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PathTraverse
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GunShot
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Saw
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SPosAttack
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Punch
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PosAttack
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CPosAttack
</UL>

<P><STRONG><a name="[456]"></a>P_LineOpening</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, p_maputl.o(i.P_LineOpening))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_LineOpening
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_UseTraverse
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_SlideTraverse
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_ShootTraverse
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_AimTraverse
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CheckLine
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RecursiveSound
</UL>

<P><STRONG><a name="[325]"></a>P_LoadBegin</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, p_saveg.o(i.P_LoadBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_LoadBegin
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[491]"></a>P_LoadBlockMap</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, p_setup.o(i.P_LoadBlockMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = P_LoadBlockMap &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReadLump
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[327]"></a>P_LoadEnd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, p_saveg.o(i.P_LoadEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_LoadEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[494]"></a>P_LoadLineDefs</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, p_setup.o(i.P_LoadLineDefs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = P_LoadLineDefs &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[495]"></a>P_LoadNodes</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, p_setup.o(i.P_LoadNodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = P_LoadNodes &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[498]"></a>P_LoadSectors</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, p_setup.o(i.P_LoadSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = P_LoadSectors &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FlatNumForName
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[499]"></a>P_LoadSegs</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, p_setup.o(i.P_LoadSegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = P_LoadSegs &rArr; GetSectorAtNullAddress &rArr; I_GetMemoryValue &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSectorAtNullAddress
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[49a]"></a>P_LoadSideDefs</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, p_setup.o(i.P_LoadSideDefs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = P_LoadSideDefs &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TextureNumForName
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[49b]"></a>P_LoadSubsectors</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, p_setup.o(i.P_LoadSubsectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = P_LoadSubsectors &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[49c]"></a>P_LoadThings</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, p_setup.o(i.P_LoadThings))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = P_LoadThings &rArr; P_SpawnMapThing &rArr; P_SpawnPlayer &rArr; ST_Start &rArr; ST_Stop &rArr; I_SetPalette &rArr; lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMapThing
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[49e]"></a>P_LoadVertexes</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, p_setup.o(i.P_LoadVertexes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = P_LoadVertexes &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[1d9]"></a>P_LookForPlayers</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, p_enemy.o(i.P_LookForPlayers))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = P_LookForPlayers &rArr; P_CheckSight &rArr; P_CrossBSPNode &rArr;  P_CrossBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckSight
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AproxDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnFly
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Look
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
</UL>

<P><STRONG><a name="[452]"></a>P_MakeDivline</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, p_maputl.o(i.P_MakeDivline))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AddLineIntercepts
</UL>

<P><STRONG><a name="[12a]"></a>P_MobjThinker</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, p_mobj.o(i.P_MobjThinker))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = P_MobjThinker &rArr; P_XYMovement &rArr; P_SlideMove &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ZMovement
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_XYMovement
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NightmareRespawn
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Address Reference Count : 9]<UL><LI> p_saveg.o(i.P_UnArchiveThinkers)
<LI> r_data.o(i.R_PrecacheLevel)
<LI> p_mobj.o(i.P_SpawnMobj)
<LI> p_telept.o(i.EV_Teleport)
<LI> p_saveg.o(i.P_ArchiveThinkers)
<LI> p_enemy.o(i.A_BossDeath)
<LI> p_enemy.o(i.A_BrainAwake)
<LI> p_enemy.o(i.A_KeenDie)
<LI> p_enemy.o(i.A_PainShootSkull)
</UL>
<P><STRONG><a name="[1dc]"></a>P_Move</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, p_enemy.o(i.P_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = P_Move &rArr; P_UseSpecialLine &rArr; EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseSpecialLine
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryMove
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryWalk
</UL>

<P><STRONG><a name="[4a2]"></a>P_MovePlayer</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, p_user.o(i.P_MovePlayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = P_MovePlayer &rArr; P_SetMobjState &rArr; P_RemoveMobj &rArr; S_StopSound &rArr; S_StopChannel &rArr; I_StopSound
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Thrust
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerThink
</UL>

<P><STRONG><a name="[47e]"></a>P_MovePsprites</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, p_pspr.o(i.P_MovePsprites))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = P_MovePsprites &rArr; P_SetPsprite
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetPsprite
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DeathThink
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerThink
</UL>

<P><STRONG><a name="[1da]"></a>P_NewChaseDir</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, p_enemy.o(i.P_NewChaseDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = P_NewChaseDir &rArr; P_TryWalk &rArr; P_Move &rArr; P_UseSpecialLine &rArr; EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryWalk
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
</UL>

<P><STRONG><a name="[4a1]"></a>P_NightmareRespawn</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, p_mobj.o(i.P_NightmareRespawn))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = P_NightmareRespawn &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointInSubsector
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MobjThinker
</UL>

<P><STRONG><a name="[481]"></a>P_NoiseAlert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, p_enemy.o(i.P_NoiseAlert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = P_NoiseAlert &rArr; P_RecursiveSound &rArr;  P_RecursiveSound (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RecursiveSound
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FireWeapon
</UL>

<P><STRONG><a name="[45e]"></a>P_PathTraverse</STRONG> (Thumb, 524 bytes, Stack size 80 bytes, p_maputl.o(i.P_PathTraverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TraverseIntercepts
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BlockLinesIterator
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BlockThingsIterator
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseLines
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SlideMove
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineAttack
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AimLineAttack
</UL>

<P><STRONG><a name="[4a7]"></a>P_PlayerInSpecialSector</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, p_spec.o(i.P_PlayerInSpecialSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = P_PlayerInSpecialSector &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ExitLevel
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerThink
</UL>

<P><STRONG><a name="[4a8]"></a>P_PlayerThink</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, p_user.o(i.P_PlayerThink))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = P_PlayerThink &rArr; P_PlayerInSpecialSector &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MovePsprites
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UseLines
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MovePlayer
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DeathThink
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CalcHeight
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerInSpecialSector
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Ticker
</UL>

<P><STRONG><a name="[450]"></a>P_PointOnDivlineSide</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, p_maputl.o(i.P_PointOnDivlineSide))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = P_PointOnDivlineSide &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AddThingIntercepts
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AddLineIntercepts
</UL>

<P><STRONG><a name="[451]"></a>P_PointOnLineSide</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, p_maputl.o(i.P_PointOnLineSide))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = P_PointOnLineSide &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AddLineIntercepts
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BoxOnLineSide
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_HitSlideLine
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_UseTraverse
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_SlideTraverse
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryMove
</UL>

<P><STRONG><a name="[1de]"></a>P_RadiusAttack</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, p_map.o(i.P_RadiusAttack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = P_RadiusAttack &rArr; P_BlockThingsIterator
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BlockThingsIterator
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileAttack
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Explode
</UL>

<P><STRONG><a name="[1cd]"></a>P_Random</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_random.o(i.P_Random))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GunShot
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMapThing
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ExplodeMissile
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMissileSpawn
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnBlood
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CheckThing
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChangeSector
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeathMatchSpawnPlayer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_TroopAttack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Tracer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpidRefire
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnFly
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkelFist
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Scream
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Saw
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SargAttack
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SPosAttack
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Punch
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PosAttack
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Look
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_HeadAttack
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FirePlasma
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CPosRefire
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CPosAttack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BruisAttack
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainScream
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainExplode
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BFGSpray
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LightFlash
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_FireFlicker
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnStrobeFlash
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnLightFlash
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_KillMobj
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPuff
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MobjThinker
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryWalk
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NewChaseDir
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMissileRange
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerInSpecialSector
</UL>

<P><STRONG><a name="[32c]"></a>P_ReadSaveGameEOF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, p_saveg.o(i.P_ReadSaveGameEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_ReadSaveGameEOF
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[326]"></a>P_ReadSaveGameHeader</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, p_saveg.o(i.P_ReadSaveGameHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = P_ReadSaveGameHeader &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_VanillaVersionCode
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[4a5]"></a>P_RecursiveSound</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, p_enemy.o(i.P_RecursiveSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = P_RecursiveSound &rArr;  P_RecursiveSound (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LineOpening
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RecursiveSound
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RecursiveSound
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NoiseAlert
</UL>

<P><STRONG><a name="[4aa]"></a>P_RemoveActiveCeiling</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, p_ceilng.o(i.P_RemoveActiveCeiling))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = P_RemoveActiveCeiling
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MoveCeiling
</UL>

<P><STRONG><a name="[4ac]"></a>P_RemoveActivePlat</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, p_plats.o(i.P_RemoveActivePlat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = P_RemoveActivePlat
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_PlatRaise
</UL>

<P><STRONG><a name="[1ef]"></a>P_RemoveMobj</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, p_mobj.o(i.P_RemoveMobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = P_RemoveMobj &rArr; S_StopSound &rArr; S_StopChannel &rArr; I_StopSound
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopSound
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnsetThingPosition
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_XYMovement
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NightmareRespawn
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChangeSector
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveThinkers
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckSpot
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnFly
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TouchSpecialThing
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>

<P><STRONG><a name="[4ab]"></a>P_RemoveThinker</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, p_tick.o(i.P_RemoveThinker))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveActivePlat
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MoveFloor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_VerticalDoor
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveActiveCeiling
</UL>

<P><STRONG><a name="[4ae]"></a>P_RespawnSpecials</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, p_mobj.o(i.P_RespawnSpecials))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = P_RespawnSpecials &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointInSubsector
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Ticker
</UL>

<P><STRONG><a name="[4af]"></a>P_RunThinkers</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, p_tick.o(i.P_RunThinkers))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = P_RunThinkers &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Ticker
</UL>

<P><STRONG><a name="[335]"></a>P_SaveBegin</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, p_saveg.o(i.P_SaveBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = P_SaveBegin &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
</UL>

<P><STRONG><a name="[2cd]"></a>P_SaveGameFile</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, p_saveg.o(i.P_SaveGameFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = P_SaveGameFile &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadSaveStrings
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadSelect
</UL>

<P><STRONG><a name="[33c]"></a>P_SaveWriteFile</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, p_saveg.o(i.P_SaveWriteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = P_SaveWriteFile &rArr; P_SaveEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
</UL>

<P><STRONG><a name="[1d4]"></a>P_SetMobjState</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, p_mobj.o(i.P_SetMobjState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = P_SetMobjState &rArr; P_RemoveMobj &rArr; S_StopSound &rArr; S_StopChannel &rArr; I_StopSound
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FireWeapon
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_XYMovement
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ExplodeMissile
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnBlood
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CheckThing
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChangeSector
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_WeaponReady
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileChase
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpidRefire
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnFly
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Look
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_GunFlash
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun2
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FirePistol
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireCGun
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CPosRefire
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainScream
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainExplode
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_KillMobj
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPuff
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MobjThinker
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MovePlayer
</UL>

<P><STRONG><a name="[1e6]"></a>P_SetPsprite</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, p_pspr.o(i.P_SetPsprite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = P_SetPsprite
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MovePsprites
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FireWeapon
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckAmmo
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BringUpWeapon
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_WeaponReady
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Raise
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Lower
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_GunFlash
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun2
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FirePlasma
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FirePistol
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireCGun
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DropWeapon
</UL>

<P><STRONG><a name="[1e3]"></a>P_SetThingPosition</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, p_maputl.o(i.P_SetThingPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = P_SetThingPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointInSubsector
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveThinkers
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Fire
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryMove
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TeleportMove
</UL>

<P><STRONG><a name="[32f]"></a>P_SetupLevel</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, p_setup.o(i.P_SetupLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = P_SetupLevel &rArr; S_Start &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeathMatchSpawnPlayer
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_FreeTags
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Start
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PrecacheLevel
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnSpecials
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadVertexes
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadThings
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSubsectors
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSideDefs
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSegs
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSectors
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadNodes
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadLineDefs
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadBlockMap
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GroupLines
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadReject
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InitThinkers
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadLevel
</UL>

<P><STRONG><a name="[4b6]"></a>P_SetupPsprites</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, p_pspr.o(i.P_SetupPsprites))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = P_SetupPsprites &rArr; P_BringUpWeapon &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BringUpWeapon
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayer
</UL>

<P><STRONG><a name="[45b]"></a>P_ShootSpecialLine</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, p_spec.o(i.P_ShootSpecialLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = P_ShootSpecialLine &rArr; EV_DoFloor &rArr; P_FindNextHighestFloor
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ChangeSwitchTexture
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_ShootTraverse
</UL>

<P><STRONG><a name="[4b7]"></a>P_SlideMove</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, p_map.o(i.P_SlideMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = P_SlideMove &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PathTraverse
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_HitSlideLine
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryMove
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_XYMovement
</UL>

<P><STRONG><a name="[45c]"></a>P_SpawnBlood</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, p_mobj.o(i.P_SpawnBlood))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = P_SpawnBlood &rArr; P_SpawnMobj &rArr; P_SetThingPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_ShootTraverse
</UL>

<P><STRONG><a name="[4b8]"></a>P_SpawnDoorCloseIn30</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, p_doors.o(i.P_SpawnDoorCloseIn30))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = P_SpawnDoorCloseIn30 &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnSpecials
</UL>

<P><STRONG><a name="[4b9]"></a>P_SpawnDoorRaiseIn5Mins</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, p_doors.o(i.P_SpawnDoorRaiseIn5Mins))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = P_SpawnDoorRaiseIn5Mins &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindLowestCeilingSurrounding
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnSpecials
</UL>

<P><STRONG><a name="[4ba]"></a>P_SpawnFireFlicker</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, p_lights.o(i.P_SpawnFireFlicker))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = P_SpawnFireFlicker &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindMinSurroundingLight
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnSpecials
</UL>

<P><STRONG><a name="[4bb]"></a>P_SpawnGlowingLight</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, p_lights.o(i.P_SpawnGlowingLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = P_SpawnGlowingLight &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindMinSurroundingLight
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnSpecials
</UL>

<P><STRONG><a name="[4bc]"></a>P_SpawnLightFlash</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, p_lights.o(i.P_SpawnLightFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = P_SpawnLightFlash &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindMinSurroundingLight
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnSpecials
</UL>

<P><STRONG><a name="[49d]"></a>P_SpawnMapThing</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, p_mobj.o(i.P_SpawnMapThing))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = P_SpawnMapThing &rArr; P_SpawnPlayer &rArr; ST_Start &rArr; ST_Stop &rArr; I_SetPalette &rArr; lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadThings
</UL>

<P><STRONG><a name="[1d5]"></a>P_SpawnMissile</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, p_mobj.o(i.P_SpawnMissile))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = P_SpawnMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMissileSpawn
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AproxDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_TroopAttack
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkelMissile
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_HeadAttack
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack3
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CyberAttack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BspiAttack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BruisAttack
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainSpit
</UL>

<P><STRONG><a name="[1cc]"></a>P_SpawnMobj</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, p_mobj.o(i.P_SpawnMobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = P_SpawnMobj &rArr; P_SetThingPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetThingPosition
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayerMissile
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMapThing
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RespawnSpecials
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NightmareRespawn
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnBlood
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChangeSector
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayer
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckSpot
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileTarget
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Tracer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnFly
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainScream
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainExplode
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BFGSpray
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_KillMobj
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPuff
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainShootSkull
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_Teleport
</UL>

<P><STRONG><a name="[31f]"></a>P_SpawnPlayer</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, p_mobj.o(i.P_SpawnPlayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = P_SpawnPlayer &rArr; ST_Start &rArr; ST_Stop &rArr; I_SetPalette &rArr; lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Start
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupPsprites
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Start
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_PlayerReborn
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMapThing
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoReborn
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeathMatchSpawnPlayer
</UL>

<P><STRONG><a name="[1e5]"></a>P_SpawnPlayerMissile</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, p_mobj.o(i.P_SpawnPlayerMissile))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = P_SpawnPlayerMissile &rArr; P_CheckMissileSpawn &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMissileSpawn
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AimLineAttack
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FirePlasma
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireMissile
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireBFG
</UL>

<P><STRONG><a name="[1f0]"></a>P_SpawnPuff</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, p_mobj.o(i.P_SpawnPuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = P_SpawnPuff &rArr; P_SpawnMobj &rArr; P_SetThingPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_ShootTraverse
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Tracer
</UL>

<P><STRONG><a name="[4b4]"></a>P_SpawnSpecials</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, p_spec.o(i.P_SpawnSpecials))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = P_SpawnSpecials &rArr; P_SpawnStrobeFlash &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnStrobeFlash
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnLightFlash
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnGlowingLight
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnFireFlicker
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnDoorRaiseIn5Mins
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnDoorCloseIn30
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[2fb]"></a>P_SpawnStrobeFlash</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, p_lights.o(i.P_SpawnStrobeFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = P_SpawnStrobeFlash &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindMinSurroundingLight
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_StartLightStrobing
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnSpecials
</UL>

<P><STRONG><a name="[46e]"></a>P_StartButton</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, p_switch.o(i.P_StartButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = P_StartButton
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ChangeSwitchTexture
</UL>

<P><STRONG><a name="[1e0]"></a>P_SubstNullMobj</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, p_mobj.o(i.P_SubstNullMobj))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnFly
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Fire
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack3
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack1
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AimLineAttack
</UL>

<P><STRONG><a name="[1ee]"></a>P_TeleportMove</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, p_map.o(i.P_TeleportMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = P_TeleportMove &rArr; P_SetThingPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointInSubsector
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnsetThingPosition
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetThingPosition
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BlockThingsIterator
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnFly
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_Teleport
</UL>

<P><STRONG><a name="[454]"></a>P_ThingHeightClip</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, p_map.o(i.P_ThingHeightClip))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = P_ThingHeightClip &rArr; P_CheckPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChangeSector
</UL>

<P><STRONG><a name="[4a3]"></a>P_Thrust</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, p_user.o(i.P_Thrust))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = P_Thrust &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MovePlayer
</UL>

<P><STRONG><a name="[34d]"></a>P_Ticker</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, p_tick.o(i.P_Ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = P_Ticker &rArr; P_PlayerThink &rArr; P_PlayerInSpecialSector &rArr; P_DamageMobj &rArr; P_KillMobj &rArr; AM_Stop &rArr; ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RespawnSpecials
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerThink
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RunThinkers
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UpdateSpecials
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[458]"></a>P_TouchSpecialThing</STRONG> (Thumb, 2178 bytes, Stack size 32 bytes, p_inter.o(i.P_TouchSpecialThing))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = P_TouchSpecialThing &rArr; P_GiveWeapon &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GiveWeapon
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GivePower
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GiveCard
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GiveBody
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GiveArmor
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GiveAmmo
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CheckThing
</UL>

<P><STRONG><a name="[4a6]"></a>P_TraverseIntercepts</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, p_maputl.o(i.P_TraverseIntercepts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = P_TraverseIntercepts
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PathTraverse
</UL>

<P><STRONG><a name="[1eb]"></a>P_TryMove</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, p_map.o(i.P_TryMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PointOnLineSide
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSpecialLine
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckPosition
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnsetThingPosition
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetThingPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_XYMovement
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckMissileSpawn
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SlideMove
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Move
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainShootSkull
</UL>

<P><STRONG><a name="[4a4]"></a>P_TryWalk</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, p_enemy.o(i.P_TryWalk))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = P_TryWalk &rArr; P_Move &rArr; P_UseSpecialLine &rArr; EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Move
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NewChaseDir
</UL>

<P><STRONG><a name="[328]"></a>P_UnArchivePlayers</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, p_saveg.o(i.P_UnArchivePlayers))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = P_UnArchivePlayers &rArr; saveg_read_player_t &rArr; saveg_read_pspdef_t &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_player_t
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_pad
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[32b]"></a>P_UnArchiveSpecials</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, p_saveg.o(i.P_UnArchiveSpecials))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = P_UnArchiveSpecials &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_vldoor_t
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_strobe_t
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_plat_t
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_pad
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_lightflash_t
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_glow_t
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_floormove_t
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_ceiling_t
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddActivePlat
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddActiveCeiling
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[32a]"></a>P_UnArchiveThinkers</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, p_saveg.o(i.P_UnArchiveThinkers))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = P_UnArchiveThinkers &rArr; P_SetThingPosition &rArr; R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_pad
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_mobj_t
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetThingPosition
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AddThinker
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InitThinkers
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[329]"></a>P_UnArchiveWorld</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, p_saveg.o(i.P_UnArchiveWorld))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = P_UnArchiveWorld &rArr; saveg_read16
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read16
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[1e2]"></a>P_UnsetThingPosition</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, p_maputl.o(i.P_UnsetThingPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = P_UnsetThingPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Fire
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryMove
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TeleportMove
</UL>

<P><STRONG><a name="[4bf]"></a>P_UpdateSpecials</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, p_spec.o(i.P_UpdateSpecials))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = P_UpdateSpecials &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ExitLevel
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Ticker
</UL>

<P><STRONG><a name="[4a9]"></a>P_UseLines</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, p_map.o(i.P_UseLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = P_UseLines &rArr; P_PathTraverse &rArr; P_TraverseIntercepts
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PathTraverse
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PlayerThink
</UL>

<P><STRONG><a name="[45d]"></a>P_UseSpecialLine</STRONG> (Thumb, 1452 bytes, Stack size 16 bytes, p_switch.o(i.P_UseSpecialLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = P_UseSpecialLine &rArr; EV_DoDonut &rArr; DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_SecretExitLevel
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ExitLevel
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_LightTurnOn
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_BuildStairs
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_VerticalDoor
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoLockedDoor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoCeiling
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ChangeSwitchTexture
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDonut
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_UseTraverse
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Move
</UL>

<P><STRONG><a name="[33b]"></a>P_WriteSaveGameEOF</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, p_saveg.o(i.P_WriteSaveGameEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_WriteSaveGameEOF
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
</UL>

<P><STRONG><a name="[336]"></a>P_WriteSaveGameHeader</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, p_saveg.o(i.P_WriteSaveGameHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = P_WriteSaveGameHeader &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_VanillaVersionCode
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
</UL>

<P><STRONG><a name="[49f]"></a>P_XYMovement</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, p_mobj.o(i.P_XYMovement))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = P_XYMovement &rArr; P_SlideMove &rArr; P_TryMove &rArr; P_CrossSpecialLine &rArr; EV_Teleport &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ExplodeMissile
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SlideMove
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TryMove
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetMobjState
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MobjThinker
</UL>

<P><STRONG><a name="[4a0]"></a>P_ZMovement</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, p_mobj.o(i.P_ZMovement))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = P_ZMovement &rArr; P_ExplodeMissile &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ExplodeMissile
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_AproxDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MobjThinker
</UL>

<P><STRONG><a name="[b4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[2be]"></a>PrintDehackedBanners</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, d_main.o(i.PrintDehackedBanners))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2c8]"></a>PrintGameVersion</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, d_main.o(i.PrintGameVersion))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[4d4]"></a>R_AddSprites</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, r_things.o(i.R_AddSprites))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = R_AddSprites &rArr; R_ProjectSprite &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ProjectSprite
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Subsector
</UL>

<P><STRONG><a name="[48d]"></a>R_CheckTextureNumForName</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, r_data.o(i.R_CheckTextureNumForName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_CheckTextureNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpNameHash
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TextureNumForName
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InitPicAnims
</UL>

<P><STRONG><a name="[50a]"></a>R_ClearClipSegs</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, r_bsp.o(i.R_ClearClipSegs))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderPlayerView
</UL>

<P><STRONG><a name="[50b]"></a>R_ClearDrawSegs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, r_bsp.o(i.R_ClearDrawSegs))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderPlayerView
</UL>

<P><STRONG><a name="[4d8]"></a>R_ClearPlanes</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, r_plane.o(i.R_ClearPlanes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_ClearPlanes
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderPlayerView
</UL>

<P><STRONG><a name="[50c]"></a>R_ClearSprites</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, r_things.o(i.R_ClearSprites))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderPlayerView
</UL>

<P><STRONG><a name="[157]"></a>R_DrawColumn</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, r_draw.o(i.R_DrawColumn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_DrawColumn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_main.o(i.R_ExecuteSetViewSize)
</UL>
<P><STRONG><a name="[4dc]"></a>R_DrawColumnInCache</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, r_data.o(i.R_DrawColumnInCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_DrawColumnInCache &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateComposite
</UL>

<P><STRONG><a name="[15b]"></a>R_DrawColumnLow</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, r_draw.o(i.R_DrawColumnLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_DrawColumnLow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_main.o(i.R_ExecuteSetViewSize)
</UL>
<P><STRONG><a name="[158]"></a>R_DrawFuzzColumn</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, r_draw.o(i.R_DrawFuzzColumn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_DrawFuzzColumn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_main.o(i.R_ExecuteSetViewSize)
</UL>
<P><STRONG><a name="[15c]"></a>R_DrawFuzzColumnLow</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, r_draw.o(i.R_DrawFuzzColumnLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_DrawFuzzColumnLow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_main.o(i.R_ExecuteSetViewSize)
</UL>
<P><STRONG><a name="[4dd]"></a>R_DrawMasked</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, r_things.o(i.R_DrawMasked))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = R_DrawMasked &rArr; R_DrawSprite &rArr; R_RenderMaskedSegRange &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SortVisSprites
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawSprite
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawPlayerSprites
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderMaskedSegRange
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderPlayerView
</UL>

<P><STRONG><a name="[4e9]"></a>R_DrawMaskedColumn</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, r_things.o(i.R_DrawMaskedColumn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_DrawMaskedColumn
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawVisSprite
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderMaskedSegRange
</UL>

<P><STRONG><a name="[4e2]"></a>R_DrawPSprite</STRONG> (Thumb, 352 bytes, Stack size 104 bytes, r_things.o(i.R_DrawPSprite))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = R_DrawPSprite &rArr; R_DrawVisSprite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawVisSprite
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawPlayerSprites
</UL>

<P><STRONG><a name="[4e5]"></a>R_DrawPlanes</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, r_plane.o(i.R_DrawPlanes))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = R_DrawPlanes &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GetColumn
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_MakeSpans
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderPlayerView
</UL>

<P><STRONG><a name="[4e1]"></a>R_DrawPlayerSprites</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, r_things.o(i.R_DrawPlayerSprites))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = R_DrawPlayerSprites &rArr; R_DrawPSprite &rArr; R_DrawVisSprite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawPSprite
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawMasked
</UL>

<P><STRONG><a name="[15a]"></a>R_DrawSpan</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, r_draw.o(i.R_DrawSpan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_DrawSpan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_main.o(i.R_ExecuteSetViewSize)
</UL>
<P><STRONG><a name="[15e]"></a>R_DrawSpanLow</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, r_draw.o(i.R_DrawSpanLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_DrawSpanLow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_main.o(i.R_ExecuteSetViewSize)
</UL>
<P><STRONG><a name="[4df]"></a>R_DrawSprite</STRONG> (Thumb, 350 bytes, Stack size 1312 bytes, r_things.o(i.R_DrawSprite))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = R_DrawSprite &rArr; R_RenderMaskedSegRange &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawVisSprite
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderMaskedSegRange
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointOnSegSide
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawMasked
</UL>

<P><STRONG><a name="[159]"></a>R_DrawTranslatedColumn</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, r_draw.o(i.R_DrawTranslatedColumn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_DrawTranslatedColumn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_main.o(i.R_ExecuteSetViewSize)
</UL>
<P><STRONG><a name="[15d]"></a>R_DrawTranslatedColumnLow</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, r_draw.o(i.R_DrawTranslatedColumnLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_DrawTranslatedColumnLow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_main.o(i.R_ExecuteSetViewSize)
</UL>
<P><STRONG><a name="[28a]"></a>R_DrawViewBorder</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, r_draw.o(i.R_DrawViewBorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = R_DrawViewBorder &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_MarkRect
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_VideoErase
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[4e4]"></a>R_DrawVisSprite</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, r_things.o(i.R_DrawVisSprite))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = R_DrawVisSprite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawMaskedColumn
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawSprite
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawPSprite
</UL>

<P><STRONG><a name="[27f]"></a>R_ExecuteSetViewSize</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, r_main.o(i.R_ExecuteSetViewSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = R_ExecuteSetViewSize &rArr; R_InitTextureMapping &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitBuffer
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextureMapping
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[289]"></a>R_FillBackScreen</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, r_draw.o(i.R_FillBackScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = R_FillBackScreen &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_RestoreBuffer
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_UseBuffer
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoSaveGame
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadGame
</UL>

<P><STRONG><a name="[4ee]"></a>R_FindPlane</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, r_plane.o(i.R_FindPlane))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_FindPlane
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Subsector
</UL>

<P><STRONG><a name="[32e]"></a>R_FlatNumForName</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, r_data.o(i.R_FlatNumForName))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = R_FlatNumForName &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadLevel
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InitPicAnims
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSectors
</UL>

<P><STRONG><a name="[4ef]"></a>R_GenerateComposite</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, r_data.o(i.R_GenerateComposite))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_ChangeTag2
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawColumnInCache
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GetColumn
</UL>

<P><STRONG><a name="[4f0]"></a>R_GenerateLookup</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, r_data.o(i.R_GenerateLookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = R_GenerateLookup &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
</UL>

<P><STRONG><a name="[4e6]"></a>R_GetColumn</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, r_data.o(i.R_GetColumn))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateComposite
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderSegLoop
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderMaskedSegRange
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawPlanes
</UL>

<P><STRONG><a name="[2c5]"></a>R_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, r_main.o(i.R_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = R_Init &rArr; R_InitData &rArr; R_InitTextures &rArr; R_GenerateLookup &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SetViewSize
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTranslationTables
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitData
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSkyMap
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitPlanes
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTables
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitPointToAngle
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitLightTables
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[4eb]"></a>R_InitBuffer</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, r_draw.o(i.R_InitBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_InitBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ExecuteSetViewSize
</UL>

<P><STRONG><a name="[4f8]"></a>R_InitColormaps</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_data.o(i.R_InitColormaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = R_InitColormaps &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitData
</UL>

<P><STRONG><a name="[4f1]"></a>R_InitData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, r_data.o(i.R_InitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = R_InitData &rArr; R_InitTextures &rArr; R_GenerateLookup &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteLumps
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitFlats
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitColormaps
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Init
</UL>

<P><STRONG><a name="[4fa]"></a>R_InitFlats</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, r_data.o(i.R_InitFlats))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = R_InitFlats &rArr; W_GetNumForName &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitData
</UL>

<P><STRONG><a name="[4f5]"></a>R_InitLightTables</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, r_main.o(i.R_InitLightTables))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_InitLightTables
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Init
</UL>

<P><STRONG><a name="[4f4]"></a>R_InitPlanes</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, r_plane.o(i.R_InitPlanes))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Init
</UL>

<P><STRONG><a name="[4f2]"></a>R_InitPointToAngle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, r_main.o(i.R_InitPointToAngle))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Init
</UL>

<P><STRONG><a name="[4f6]"></a>R_InitSkyMap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_sky.o(i.R_InitSkyMap))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Init
</UL>

<P><STRONG><a name="[4fc]"></a>R_InitSpriteDefs</STRONG> (Thumb, 514 bytes, Stack size 40 bytes, r_things.o(i.R_InitSpriteDefs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = R_InitSpriteDefs &rArr; W_GetNumForName &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InstallSpriteLump
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSprites
</UL>

<P><STRONG><a name="[4fb]"></a>R_InitSpriteLumps</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, r_data.o(i.R_InitSpriteLumps))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R_InitSpriteLumps &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitData
</UL>

<P><STRONG><a name="[48c]"></a>R_InitSprites</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, r_things.o(i.R_InitSprites))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = R_InitSprites &rArr; R_InitSpriteDefs &rArr; W_GetNumForName &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteDefs
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Init
</UL>

<P><STRONG><a name="[4f3]"></a>R_InitTables</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, r_main.o(i.R_InitTables))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_InitTables
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Init
</UL>

<P><STRONG><a name="[4ec]"></a>R_InitTextureMapping</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, r_main.o(i.R_InitTextureMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_InitTextureMapping &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ExecuteSetViewSize
</UL>

<P><STRONG><a name="[4f9]"></a>R_InitTextures</STRONG> (Thumb, 768 bytes, Stack size 112 bytes, r_data.o(i.R_InitTextures))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = R_InitTextures &rArr; R_GenerateLookup &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpName
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ConsoleStdout
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateLookup
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTextureHashTable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitData
</UL>

<P><STRONG><a name="[4f7]"></a>R_InitTranslationTables</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, r_draw.o(i.R_InitTranslationTables))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = R_InitTranslationTables &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Init
</UL>

<P><STRONG><a name="[4e7]"></a>R_MakeSpans</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, r_plane.o(i.R_MakeSpans))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = R_MakeSpans &rArr; R_MapPlane &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_MapPlane
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawPlanes
</UL>

<P><STRONG><a name="[500]"></a>R_MapPlane</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, r_plane.o(i.R_MapPlane))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_MapPlane &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_MakeSpans
</UL>

<P><STRONG><a name="[505]"></a>R_NewVisSprite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, r_things.o(i.R_NewVisSprite))
<BR><BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ProjectSprite
</UL>

<P><STRONG><a name="[31d]"></a>R_PointInSubsector</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, r_main.o(i.R_PointInSubsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = R_PointInSubsector &rArr; R_PointOnSide
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointOnSide
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RespawnSpecials
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NightmareRespawn
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CheckPosition
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckSpot
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TeleportMove
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetThingPosition
</UL>

<P><STRONG><a name="[4e8]"></a>R_PointOnSegSide</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, r_main.o(i.R_PointOnSegSide))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_PointOnSegSide
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawSprite
</UL>

<P><STRONG><a name="[502]"></a>R_PointOnSide</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, r_main.o(i.R_PointOnSide))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_PointOnSide
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointInSubsector
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderBSPNode
</UL>

<P><STRONG><a name="[4d1]"></a>R_PointToAngle</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, r_main.o(i.R_PointToAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlopeDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_CheckBBox
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AddLine
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ProjectSprite
</UL>

<P><STRONG><a name="[1df]"></a>R_PointToAngle2</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, r_main.o(i.R_PointToAngle2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_HitSlideLine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Tracer
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Saw
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Punch
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FaceTarget
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LookForPlayers
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DeathThink
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_AdjustSoundParams
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_updateFaceWidget
</UL>

<P><STRONG><a name="[504]"></a>R_PointToDist</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, r_main.o(i.R_PointToDist))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = R_PointToDist &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_StoreWallRange
</UL>

<P><STRONG><a name="[4b5]"></a>R_PrecacheLevel</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, r_data.o(i.R_PrecacheLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = R_PrecacheLevel &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[4d5]"></a>R_ProjectSprite</STRONG> (Thumb, 618 bytes, Stack size 88 bytes, r_things.o(i.R_ProjectSprite))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = R_ProjectSprite &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_NewVisSprite
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AddSprites
</UL>

<P><STRONG><a name="[506]"></a>R_RenderBSPNode</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, r_bsp.o(i.R_RenderBSPNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = R_RenderBSPNode &rArr;  R_RenderBSPNode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointOnSide
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderBSPNode
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Subsector
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_CheckBBox
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderPlayerView
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderBSPNode
</UL>

<P><STRONG><a name="[4e0]"></a>R_RenderMaskedSegRange</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, r_segs.o(i.R_RenderMaskedSegRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = R_RenderMaskedSegRange &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GetColumn
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawMaskedColumn
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawSprite
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawMasked
</UL>

<P><STRONG><a name="[286]"></a>R_RenderPlayerView</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, r_main.o(i.R_RenderPlayerView))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = R_RenderPlayerView &rArr; R_DrawMasked &rArr; R_DrawSprite &rArr; R_RenderMaskedSegRange &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetUpdate
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderBSPNode
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClearDrawSegs
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClearClipSegs
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawPlanes
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawMasked
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClearSprites
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClearPlanes
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SetupFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[50d]"></a>R_RenderSegLoop</STRONG> (Thumb, 734 bytes, Stack size 48 bytes, r_segs.o(i.R_RenderSegLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = R_RenderSegLoop &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GetColumn
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_StoreWallRange
</UL>

<P><STRONG><a name="[50e]"></a>R_ScaleFromGlobalAngle</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, r_main.o(i.R_ScaleFromGlobalAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_ScaleFromGlobalAngle &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_StoreWallRange
</UL>

<P><STRONG><a name="[42a]"></a>R_SetViewSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, r_main.o(i.R_SetViewSize))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SizeDisplay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ChangeDetail
</UL>

<P><STRONG><a name="[509]"></a>R_SetupFrame</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, r_main.o(i.R_SetupFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_SetupFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderPlayerView
</UL>

<P><STRONG><a name="[4de]"></a>R_SortVisSprites</STRONG> (Thumb, 162 bytes, Stack size 76 bytes, r_things.o(i.R_SortVisSprites))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = R_SortVisSprites
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawMasked
</UL>

<P><STRONG><a name="[4da]"></a>R_StoreWallRange</STRONG> (Thumb, 2576 bytes, Stack size 40 bytes, r_segs.o(i.R_StoreWallRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = R_StoreWallRange &rArr; R_RenderSegLoop &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderSegLoop
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_CheckPlane
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ScaleFromGlobalAngle
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToDist
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClipSolidWallSegment
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClipPassWallSegment
</UL>

<P><STRONG><a name="[340]"></a>R_TextureNumForName</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, r_data.o(i.R_TextureNumForName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = R_TextureNumForName &rArr; R_CheckTextureNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_CheckTextureNumForName
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_InitNew
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InitSwitchList
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InitPicAnims
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSideDefs
</UL>

<P><STRONG><a name="[3f7]"></a>R_VideoErase</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, r_draw.o(i.R_VideoErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_VideoErase &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawViewBorder
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_eraseTextLine
</UL>

<P><STRONG><a name="[11c]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.SDMMC2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDMMC2_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[511]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[514]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[3d7]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[516]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[517]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[519]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[3d8]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[3d9]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[51b]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[51c]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[51e]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[51f]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[520]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>

<P><STRONG><a name="[521]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[3ca]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[3dc]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[3dd]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[3d6]"></a>SDMMC_ConfigData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[523]"></a>SDMMC_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[529]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[524]"></a>SDMMC_GetResponse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[3c7]"></a>SDMMC_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[3d3]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[528]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[512]"></a>SDMMC_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[52b]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
</UL>

<P><STRONG><a name="[16c]"></a>SD_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>SD_ioctl</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_ioctl &rArr; BSP_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>SD_read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_read &rArr; BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_rxtx_wait
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>SD_status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SD_status &rArr; SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>SD_write</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_write &rArr; BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_rxtx_wait
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_CleanDCache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[52e]"></a>SHA1_Final</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, sha1.o(i.SHA1_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SHA1_Final &rArr; SHA1_Update &rArr;  SHA1_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_Checksum
</UL>

<P><STRONG><a name="[5cb]"></a>SHA1_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sha1.o(i.SHA1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_Checksum
</UL>

<P><STRONG><a name="[52f]"></a>SHA1_Update</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sha1.o(i.SHA1_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = SHA1_Update &rArr;  SHA1_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_UpdateString
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_UpdateInt32
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
</UL>

<P><STRONG><a name="[260]"></a>SHA1_UpdateInt32</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sha1.o(i.SHA1_UpdateInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SHA1_UpdateInt32 &rArr; SHA1_Update &rArr;  SHA1_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChecksumAddLump
</UL>

<P><STRONG><a name="[25e]"></a>SHA1_UpdateString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sha1.o(i.SHA1_UpdateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SHA1_UpdateString &rArr; SHA1_Update &rArr;  SHA1_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChecksumAddLump
</UL>

<P><STRONG><a name="[282]"></a>ST_Drawer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, st_stuff.o(i.ST_Drawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ST_Drawer &rArr; ST_doPaletteStuff &rArr; I_SetPalette &rArr; lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_doRefresh
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_doPaletteStuff
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_diffDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[2ca]"></a>ST_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st_stuff.o(i.ST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST_Init &rArr; ST_loadData &rArr; ST_loadGraphics &rArr; ST_loadUnloadGraphics &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_loadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[1b0]"></a>ST_Responder</STRONG> (Thumb, 1568 bytes, Stack size 32 bytes, st_stuff.o(i.ST_Responder))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ST_Responder &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cht_CheckCheat
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ChangeMusic
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DeferedInitNew
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cht_GetParam
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GivePower
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_initVariables
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Stop
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Responder
</UL>

<P><STRONG><a name="[4be]"></a>ST_Start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, st_stuff.o(i.ST_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ST_Start &rArr; ST_Stop &rArr; I_SetPalette &rArr; lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_initData
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_createWidgets
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayer
</UL>

<P><STRONG><a name="[536]"></a>ST_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, st_stuff.o(i.ST_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ST_Stop &rArr; I_SetPalette &rArr; lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SetPalette
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Start
</UL>

<P><STRONG><a name="[34e]"></a>ST_Ticker</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, st_stuff.o(i.ST_Ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST_Ticker &rArr; ST_updateWidgets &rArr; ST_updateFaceWidget &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Random
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_updateWidgets
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[54a]"></a>ST_calcPainOffset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, st_stuff.o(i.ST_calcPainOffset))
<BR><BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_updateFaceWidget
</UL>

<P><STRONG><a name="[538]"></a>ST_createWidgets</STRONG> (Thumb, 598 bytes, Stack size 32 bytes, st_stuff.o(i.ST_createWidgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST_createWidgets &rArr; STlib_initPercent &rArr; STlib_initNum
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_initPercent
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_initNum
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_initMultIcon
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_initBinIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Start
</UL>

<P><STRONG><a name="[533]"></a>ST_diffDraw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, st_stuff.o(i.ST_diffDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ST_diffDraw &rArr; ST_drawWidgets &rArr; STlib_updatePercent &rArr; STlib_updateNum &rArr; STlib_drawNum &rArr; V_CopyRect &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_drawWidgets
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Drawer
</UL>

<P><STRONG><a name="[531]"></a>ST_doPaletteStuff</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, st_stuff.o(i.ST_doPaletteStuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ST_doPaletteStuff &rArr; I_SetPalette &rArr; lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SetPalette
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Drawer
</UL>

<P><STRONG><a name="[532]"></a>ST_doRefresh</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st_stuff.o(i.ST_doRefresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ST_doRefresh &rArr; ST_drawWidgets &rArr; STlib_updatePercent &rArr; STlib_updateNum &rArr; STlib_drawNum &rArr; V_CopyRect &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_refreshBackground
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_drawWidgets
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Drawer
</UL>

<P><STRONG><a name="[53f]"></a>ST_drawWidgets</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, st_stuff.o(i.ST_drawWidgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ST_drawWidgets &rArr; STlib_updatePercent &rArr; STlib_updateNum &rArr; STlib_drawNum &rArr; V_CopyRect &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updatePercent
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateNum
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateMultIcon
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateBinIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_doRefresh
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_diffDraw
</UL>

<P><STRONG><a name="[537]"></a>ST_initData</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, st_stuff.o(i.ST_initData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ST_initData &rArr; STlib_init &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Start
</UL>

<P><STRONG><a name="[534]"></a>ST_loadData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st_stuff.o(i.ST_loadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST_loadData &rArr; ST_loadGraphics &rArr; ST_loadUnloadGraphics &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_loadGraphics
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
</UL>

<P><STRONG><a name="[546]"></a>ST_loadGraphics</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, st_stuff.o(i.ST_loadGraphics))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ST_loadGraphics &rArr; ST_loadUnloadGraphics &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_loadUnloadGraphics
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_loadData
</UL>

<P><STRONG><a name="[540]"></a>ST_refreshBackground</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, st_stuff.o(i.ST_refreshBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST_refreshBackground &rArr; V_CopyRect &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_RestoreBuffer
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_UseBuffer
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_doRefresh
</UL>

<P><STRONG><a name="[549]"></a>ST_updateFaceWidget</STRONG> (Thumb, 672 bytes, Stack size 24 bytes, st_stuff.o(i.ST_updateFaceWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST_updateFaceWidget &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_calcPainOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_updateWidgets
</UL>

<P><STRONG><a name="[53a]"></a>ST_updateWidgets</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, st_stuff.o(i.ST_updateWidgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ST_updateWidgets &rArr; ST_updateFaceWidget &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_updateFaceWidget
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Ticker
</UL>

<P><STRONG><a name="[54b]"></a>STlib_drawNum</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, st_lib.o(i.STlib_drawNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = STlib_drawNum &rArr; V_CopyRect &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateNum
</UL>

<P><STRONG><a name="[545]"></a>STlib_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st_lib.o(i.STlib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STlib_init &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_initData
</UL>

<P><STRONG><a name="[53d]"></a>STlib_initBinIcon</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st_lib.o(i.STlib_initBinIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STlib_initBinIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_createWidgets
</UL>

<P><STRONG><a name="[53e]"></a>STlib_initMultIcon</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, st_lib.o(i.STlib_initMultIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STlib_initMultIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_createWidgets
</UL>

<P><STRONG><a name="[53b]"></a>STlib_initNum</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, st_lib.o(i.STlib_initNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STlib_initNum
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_initPercent
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_createWidgets
</UL>

<P><STRONG><a name="[53c]"></a>STlib_initPercent</STRONG> (Thumb, 48 bytes, Stack size 44 bytes, st_lib.o(i.STlib_initPercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = STlib_initPercent &rArr; STlib_initNum
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_initNum
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_createWidgets
</UL>

<P><STRONG><a name="[543]"></a>STlib_updateBinIcon</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, st_lib.o(i.STlib_updateBinIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STlib_updateBinIcon &rArr; V_CopyRect &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_drawWidgets
</UL>

<P><STRONG><a name="[544]"></a>STlib_updateMultIcon</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, st_lib.o(i.STlib_updateMultIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = STlib_updateMultIcon &rArr; V_CopyRect &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_drawWidgets
</UL>

<P><STRONG><a name="[541]"></a>STlib_updateNum</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st_lib.o(i.STlib_updateNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = STlib_updateNum &rArr; STlib_drawNum &rArr; V_CopyRect &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_drawNum
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updatePercent
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_drawWidgets
</UL>

<P><STRONG><a name="[542]"></a>STlib_updatePercent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, st_lib.o(i.STlib_updatePercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = STlib_updatePercent &rArr; STlib_updateNum &rArr; STlib_drawNum &rArr; V_CopyRect &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateNum
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_drawWidgets
</UL>

<P><STRONG><a name="[b2]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[310]"></a>S_ChangeMusic</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, s_sound.o(i.S_ChangeMusic))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_play_song_num
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopMusic
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Responder
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_StartFinale
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_StartCast
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartMusic
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Ticker
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Start
</UL>

<P><STRONG><a name="[2c7]"></a>S_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, s_sound.o(i.S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = S_Init &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_AtExit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_PrecacheSounds
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SetSfxVolume
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SetMusicVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[34b]"></a>S_PauseSound</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, s_sound.o(i.S_PauseSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S_PauseSound
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[33e]"></a>S_ResumeSound</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, s_sound.o(i.S_ResumeSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S_ResumeSound
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_InitNew
</UL>

<P><STRONG><a name="[43f]"></a>S_SetMusicVolume</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, s_sound.o(i.S_SetMusicVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S_SetMusicVolume
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_set_vol
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_MusicVol
</UL>

<P><STRONG><a name="[44a]"></a>S_SetSfxVolume</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, s_sound.o(i.S_SetSfxVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S_SetSfxVolume
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SfxVol
</UL>

<P><STRONG><a name="[160]"></a>S_Shutdown</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, s_sound.o(i.S_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = S_Shutdown &rArr; I_ShutdownSound
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ShutdownSound
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ShutdownMusic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_sound.o(i.S_Init)
</UL>
<P><STRONG><a name="[4b1]"></a>S_Start</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, s_sound.o(i.S_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = S_Start &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ChangeMusic
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopChannel
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[295]"></a>S_StartMusic</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, s_sound.o(i.S_StartMusic))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = S_StartMusic &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ChangeMusic
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Ticker
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoAdvanceDemo
</UL>

<P><STRONG><a name="[1cf]"></a>S_StartSound</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, s_sound.o(i.S_StartSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopSound
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_StartSound
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetSfxLumpNum
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_GetChannel
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_AdjustSoundParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_BringUpWeapon
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ZMovement
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayerMissile
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RespawnSpecials
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_NightmareRespawn
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ExplodeMissile
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_UseTraverse
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_ShootTraverse
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastTicker
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastResponder
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_BunnyScroll
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Ticker
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckSpot
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_XScream
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_WeaponReady
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileStart
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileChase
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileAttack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_TroopAttack
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_StartFire
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnSound
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SpawnFly
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkullAttack
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkelWhoosh
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkelFist
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Scream
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Saw
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SPosAttack
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Punch
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PosAttack
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PlayerScream
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Pain
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_OpenShotgun2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Metal
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Look
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_LoadShotgun2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Hoof
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun2
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FirePistol
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireCrackle
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireCGun
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatRaise
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CloseShotgun2
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Chase
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_CPosAttack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BruisAttack
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainSpit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainScream
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainPain
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BrainAwake
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BabyMetal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BFGsound
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuitResponse
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickSaveResponse
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickSave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickLoadResponse
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_EndGame
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_TouchSpecialThing
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GiveWeapon
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MoveFloor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_PlatRaise
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_VerticalDoor
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_VerticalDoor
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoLockedDoor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MoveCeiling
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ChangeSwitchTexture
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_Teleport
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UpdateSpecials
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateStats
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateNetgameStats
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateDeathmatchStats
</UL>

<P><STRONG><a name="[54d]"></a>S_StopMusic</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, s_sound.o(i.S_StopMusic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S_StopMusic
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_stop
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ChangeMusic
</UL>

<P><STRONG><a name="[4ad]"></a>S_StopSound</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, s_sound.o(i.S_StopSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S_StopSound &rArr; S_StopChannel &rArr; I_StopSound
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveMobj
</UL>

<P><STRONG><a name="[2a6]"></a>S_UpdateSounds</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, s_sound.o(i.S_UpdateSounds))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = S_UpdateSounds &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_UpdateSoundParams
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_UpdateSound
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SoundIsPlaying
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopChannel
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_AdjustSoundParams
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[322]"></a>StatCopy</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, statdump.o(i.StatCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StatCopy &rArr; M_ParmExists &rArr; M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ParmExists
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoCompleted
</UL>

<P><STRONG><a name="[131]"></a>StatDump</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, statdump.o(i.StatDump))
<BR>[Address Reference Count : 1]<UL><LI> d_main.o(i.D_DoomMain)
</UL>
<P><STRONG><a name="[b5]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemInit_ExtMemCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(.text)
</UL>
<P><STRONG><a name="[55d]"></a>TS_IO_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.TS_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TS_IO_Init &rArr; I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_ReadID
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_Init
</UL>

<P><STRONG><a name="[55e]"></a>TS_IO_Read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, stm32f769i_discovery.o(i.TS_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DetectTouch
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_ReadID
</UL>

<P><STRONG><a name="[55f]"></a>TS_IO_ReadMultiple</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.TS_IO_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetXY
</UL>

<P><STRONG><a name="[560]"></a>TS_IO_Write</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.TS_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_EnableIT
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DisableIT
</UL>

<P><STRONG><a name="[154]"></a>T_FireFlicker</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, p_lights.o(i.T_FireFlicker))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T_FireFlicker
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_lights.o(i.P_SpawnFireFlicker)
</UL>
<P><STRONG><a name="[149]"></a>T_Glow</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, p_lights.o(i.T_Glow))
<BR>[Address Reference Count : 3]<UL><LI> p_saveg.o(i.P_UnArchiveSpecials)
<LI> p_saveg.o(i.P_ArchiveSpecials)
<LI> p_lights.o(i.P_SpawnGlowingLight)
</UL>
<P><STRONG><a name="[147]"></a>T_LightFlash</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, p_lights.o(i.T_LightFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T_LightFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Random
</UL>
<BR>[Address Reference Count : 3]<UL><LI> p_saveg.o(i.P_UnArchiveSpecials)
<LI> p_lights.o(i.P_SpawnLightFlash)
<LI> p_saveg.o(i.P_ArchiveSpecials)
</UL>
<P><STRONG><a name="[134]"></a>T_MoveCeiling</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, p_ceilng.o(i.T_MoveCeiling))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = T_MoveCeiling &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MovePlane
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveActiveCeiling
</UL>
<BR>[Address Reference Count : 4]<UL><LI> p_saveg.o(i.P_UnArchiveSpecials)
<LI> p_saveg.o(i.P_ArchiveSpecials)
<LI> p_ceilng.o(i.EV_DoCeiling)
<LI> p_ceilng.o(i.P_ActivateInStasisCeiling)
</UL>
<P><STRONG><a name="[133]"></a>T_MoveFloor</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, p_floor.o(i.T_MoveFloor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = T_MoveFloor &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MovePlane
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveThinker
</UL>
<BR>[Address Reference Count : 5]<UL><LI> p_saveg.o(i.P_UnArchiveSpecials)
<LI> p_floor.o(i.EV_DoFloor)
<LI> p_spec.o(i.EV_DoDonut)
<LI> p_floor.o(i.EV_BuildStairs)
<LI> p_saveg.o(i.P_ArchiveSpecials)
</UL>
<P><STRONG><a name="[561]"></a>T_MovePlane</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, p_floor.o(i.T_MovePlane))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = T_MovePlane &rArr; P_ChangeSector &rArr; P_BlockThingsIterator
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ChangeSector
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MoveFloor
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_PlatRaise
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_VerticalDoor
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MoveCeiling
</UL>

<P><STRONG><a name="[136]"></a>T_PlatRaise</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, p_plats.o(i.T_PlatRaise))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = T_PlatRaise &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveActivePlat
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MovePlane
</UL>
<BR>[Address Reference Count : 5]<UL><LI> p_saveg.o(i.P_UnArchiveSpecials)
<LI> p_plats.o(i.EV_DoPlat)
<LI> p_plats.o(i.P_ActivateInStasis)
<LI> p_saveg.o(i.P_ArchiveSpecials)
<LI> p_doors.o(i.EV_VerticalDoor)
</UL>
<P><STRONG><a name="[148]"></a>T_StrobeFlash</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, p_lights.o(i.T_StrobeFlash))
<BR>[Address Reference Count : 3]<UL><LI> p_saveg.o(i.P_UnArchiveSpecials)
<LI> p_lights.o(i.P_SpawnStrobeFlash)
<LI> p_saveg.o(i.P_ArchiveSpecials)
</UL>
<P><STRONG><a name="[135]"></a>T_VerticalDoor</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, p_doors.o(i.T_VerticalDoor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = T_VerticalDoor &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_MovePlane
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RemoveThinker
</UL>
<BR>[Address Reference Count : 6]<UL><LI> p_saveg.o(i.P_UnArchiveSpecials)
<LI> p_saveg.o(i.P_ArchiveSpecials)
<LI> p_doors.o(i.EV_DoDoor)
<LI> p_doors.o(i.EV_VerticalDoor)
<LI> p_doors.o(i.P_SpawnDoorCloseIn30)
<LI> p_doors.o(i.P_SpawnDoorRaiseIn5Mins)
</UL>
<P><STRONG><a name="[29a]"></a>TryRunTics</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, d_loop.o(i.TryRunTics))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TryRunTics &rArr; NetUpdate &rArr; BuildNewTic &rArr; I_StartTic &rArr; I_GetEvent &rArr; post_event &rArr; post_key_up &rArr; D_PostEvent &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Sleep
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetTime
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetUpdate
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicdupSquash
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinglePlayerClear
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayersInGame
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OldNetSync
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLowTic
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildNewTic
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[567]"></a>USBH_AllocPipe</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_pipes.o(i.USBH_AllocPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_AllocPipe
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[569]"></a>USBH_ClosePipe</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbh_pipes.o(i.USBH_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
</UL>

<P><STRONG><a name="[56b]"></a>USBH_ClrFeature</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[56d]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_CtlReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[56c]"></a>USBH_CtlReq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetProtocol
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetIdle
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetReport
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
</UL>

<P><STRONG><a name="[570]"></a>USBH_CtlSendData</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[571]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[572]"></a>USBH_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[582]"></a>USBH_FindInterface</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, usbh_core.o(i.USBH_FindInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_FindInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[581]"></a>USBH_FreePipe</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_pipes.o(i.USBH_FreePipe))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>

<P><STRONG><a name="[573]"></a>USBH_GetDescriptor</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetHIDReportDescriptor
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetHIDDescriptor
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[598]"></a>USBH_GetNextDesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_ctlreq.o(i.USBH_GetNextDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[574]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[576]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[578]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, usbh_ctlreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[589]"></a>USBH_HID_EventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_hid_gamepad.o(i.USBH_HID_EventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[163]"></a>USBH_HID_GamepadInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usb_hid_gamepad.o(i.USBH_HID_GamepadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_HID_GamepadInit
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_InterfaceInit)
</UL>
<P><STRONG><a name="[57a]"></a>USBH_HID_GetHIDDescriptor</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbh_hid.o(i.USBH_HID_GetHIDDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USBH_HID_GetHIDDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[57c]"></a>USBH_HID_GetHIDReportDescriptor</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbh_hid.o(i.USBH_HID_GetHIDReportDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USBH_HID_GetHIDReportDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[580]"></a>USBH_HID_GetReport</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbh_hid.o(i.USBH_HID_GetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USBH_HID_GetReport &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[161]"></a>USBH_HID_KeybdInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbh_hid_keybd.o(i.USBH_HID_KeybdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_HID_KeybdInit
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_InterfaceInit)
</UL>
<P><STRONG><a name="[162]"></a>USBH_HID_MouseInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh_hid_mouse.o(i.USBH_HID_MouseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_HID_MouseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_InterfaceInit)
</UL>
<P><STRONG><a name="[57d]"></a>USBH_HID_SetIdle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_hid.o(i.USBH_HID_SetIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USBH_HID_SetIdle &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[57e]"></a>USBH_HID_SetProtocol</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbh_hid.o(i.USBH_HID_SetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USBH_HID_SetProtocol &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[58d]"></a>USBH_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_init
</UL>

<P><STRONG><a name="[587]"></a>USBH_InterruptReceiveData</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, usbh_ioreq.o(i.USBH_InterruptReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_InterruptReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[56a]"></a>USBH_LL_ClosePipe</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
</UL>

<P><STRONG><a name="[370]"></a>USBH_LL_Connect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_LL_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>

<P><STRONG><a name="[372]"></a>USBH_LL_Disconnect</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
</UL>

<P><STRONG><a name="[591]"></a>USBH_LL_DriverVBUS</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_DriverVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_LL_DriverVBUS &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
</UL>

<P><STRONG><a name="[592]"></a>USBH_LL_GetSpeed</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_GetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_LL_GetSpeed &rArr; HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[588]"></a>USBH_LL_GetURBState</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_GetURBState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_LL_GetURBState
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetURBState
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[38f]"></a>USBH_LL_IncTimer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_IncTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_LL_IncTimer &rArr; USBH_HandleSof
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleSof
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
</UL>

<P><STRONG><a name="[58f]"></a>USBH_LL_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[596]"></a>USBH_LL_OpenPipe</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, usbh_conf.o(i.USBH_LL_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
</UL>

<P><STRONG><a name="[597]"></a>USBH_LL_ResetPort</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_LL_ResetPort &rArr; HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[595]"></a>USBH_LL_SetTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_SetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[585]"></a>USBH_LL_SetToggle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_SetToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_LL_SetToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[590]"></a>USBH_LL_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>

<P><STRONG><a name="[58a]"></a>USBH_LL_Stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>

<P><STRONG><a name="[56e]"></a>USBH_LL_SubmitURB</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, usbh_conf.o(i.USBH_LL_SubmitURB))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>

<P><STRONG><a name="[584]"></a>USBH_OpenPipe</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, usbh_pipes.o(i.USBH_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[59b]"></a>USBH_Process</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetSpeed
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_process
</UL>

<P><STRONG><a name="[632]"></a>USBH_RegisterClass</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_init
</UL>

<P><STRONG><a name="[583]"></a>USBH_SelectInterface</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SelectInterface))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[58c]"></a>USBH_SetAddress</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[59c]"></a>USBH_SetCfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[59d]"></a>USBH_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_Start &rArr; USBH_LL_DriverVBUS &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_init
</UL>

<P><STRONG><a name="[38a]"></a>USB_CoreInit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f7xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[389]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[59f]"></a>USB_DoPing</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f7xx_ll_usb.o(i.USB_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[392]"></a>USB_DriveVbus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[391]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[5a2]"></a>USB_FlushRxFifo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[5a1]"></a>USB_FlushTxFifo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[374]"></a>USB_GetCurrentFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
</UL>

<P><STRONG><a name="[376]"></a>USB_GetHostSpeed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_GetHostSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
</UL>

<P><STRONG><a name="[37e]"></a>USB_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[378]"></a>USB_HC_Halt</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, stm32f7xx_ll_usb.o(i.USB_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
</UL>

<P><STRONG><a name="[37a]"></a>USB_HC_Init</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, stm32f7xx_ll_usb.o(i.USB_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>

<P><STRONG><a name="[383]"></a>USB_HC_ReadInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_HC_ReadInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[37c]"></a>USB_HC_StartXfer</STRONG> (Thumb, 434 bytes, Stack size 36 bytes, stm32f7xx_ll_usb.o(i.USB_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>

<P><STRONG><a name="[38c]"></a>USB_HostInit</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32f7xx_ll_usb.o(i.USB_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_HostInit &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[380]"></a>USB_InitFSLSPClkSel</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[37f]"></a>USB_ReadInterrupts</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[3e1]"></a>USB_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f7xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
</UL>

<P><STRONG><a name="[38e]"></a>USB_ResetPort</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f7xx_ll_usb.o(i.USB_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
</UL>

<P><STRONG><a name="[38b]"></a>USB_SetCurrentMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f7xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[394]"></a>USB_StopHost</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, stm32f7xx_ll_usb.o(i.USB_StopHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
</UL>

<P><STRONG><a name="[5a0]"></a>USB_WritePacket</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f7xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[b1]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f769xx.o(RESET)
</UL>
<P><STRONG><a name="[548]"></a>V_CopyRect</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, v_video.o(i.V_CopyRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = V_CopyRect &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_MarkRect
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateMultIcon
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateBinIcon
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_drawNum
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_refreshBackground
</UL>

<P><STRONG><a name="[5a3]"></a>V_DrawBlock</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, v_video.o(i.V_DrawBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = V_DrawBlock &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_MarkRect
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_EndScreen
</UL>

<P><STRONG><a name="[5a4]"></a>V_DrawBox</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, v_video.o(i.V_DrawBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = V_DrawBox &rArr; V_DrawVertLine
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawVertLine
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawHorizLine
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawMouseSpeedBox
</UL>

<P><STRONG><a name="[5a7]"></a>V_DrawFilledBox</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, v_video.o(i.V_DrawFilledBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = V_DrawFilledBox
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawMouseSpeedBox
</UL>

<P><STRONG><a name="[5a5]"></a>V_DrawHorizLine</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, v_video.o(i.V_DrawHorizLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = V_DrawHorizLine
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawMouseSpeedBox
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawBox
</UL>

<P><STRONG><a name="[28b]"></a>V_DrawMouseSpeedBox</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, v_video.o(i.V_DrawMouseSpeedBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = V_DrawMouseSpeedBox &rArr; V_DrawBox &rArr; V_DrawVertLine
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetPaletteIndex
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawVertLine
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawHorizLine
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawFilledBox
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawBox
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[1bb]"></a>V_DrawPatch</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, v_video.o(i.V_DrawPatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_MarkRect
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawMarks
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_TextWrite
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastPrint
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastDrawer
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_BunnyScroll
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_ArtScreenDrawer
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchDirect
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FillBackScreen
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_PageDrawer
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updatePercent
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateMultIcon
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_updateBinIcon
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_drawNum
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_slamBackground
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawTime
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawStats
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawPercent
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawOnLnode
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNum
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNetgameStats
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawLF
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawEL
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawDeathmatchStats
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawAnimatedBack
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_refreshBackground
</UL>

<P><STRONG><a name="[28c]"></a>V_DrawPatchDirect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, v_video.o(i.V_DrawPatchDirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Drawer
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HUlib_drawTextLine
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteText
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawThermo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSound
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSaveLoadBorder
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSave
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawReadThis2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawReadThis1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawOptions
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawNewGame
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawMainMenu
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawLoad
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawEpisode
</UL>

<P><STRONG><a name="[309]"></a>V_DrawPatchFlipped</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, v_video.o(i.V_DrawPatchFlipped))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = V_DrawPatchFlipped &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_MarkRect
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastDrawer
</UL>

<P><STRONG><a name="[5a6]"></a>V_DrawVertLine</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, v_video.o(i.V_DrawVertLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = V_DrawVertLine
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawMouseSpeedBox
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawBox
</UL>

<P><STRONG><a name="[2af]"></a>V_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, v_video.o(i.V_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[19e]"></a>V_MarkRect</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, v_video.o(i.V_MarkRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_AddToBox
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Drawer
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawBlock
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatchFlipped
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_TextWrite
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_BunnyScroll
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_ScreenWipe
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawViewBorder
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_CopyRect
</UL>

<P><STRONG><a name="[2a0]"></a>V_RestoreBuffer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, v_video.o(i.V_RestoreBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FillBackScreen
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_refreshBackground
</UL>

<P><STRONG><a name="[349]"></a>V_ScreenShot</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, v_video.o(i.V_ScreenShot))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = V_ScreenShot &rArr; WritePCXfile &rArr; M_WriteFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_FileExists
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePCXfile
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[4ed]"></a>V_UseBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, v_video.o(i.V_UseBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FillBackScreen
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_refreshBackground
</UL>

<P><STRONG><a name="[283]"></a>WI_Drawer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_Drawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WI_Drawer &rArr; WI_drawDeathmatchStats &rArr; WI_drawLF &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawStats
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawShowNextLoc
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNoState
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNetgameStats
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawDeathmatchStats
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[34c]"></a>WI_End</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WI_End &rArr; WI_unloadData &rArr; WI_loadUnloadData &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_unloadData
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[323]"></a>WI_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WI_Start &rArr; WI_loadData &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_loadData
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initVariables
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initStats
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initNetgameStats
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initDeathmatchStats
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoCompleted
</UL>

<P><STRONG><a name="[350]"></a>WI_Ticker</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_Ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = WI_Ticker &rArr; WI_updateNoState &rArr; G_WorldDone &rArr; F_StartFinale &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ChangeMusic
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateStats
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateShowNextLoc
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateNoState
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateNetgameStats
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateDeathmatchStats
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_checkForAccelerate
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
</UL>

<P><STRONG><a name="[5b4]"></a>WI_checkForAccelerate</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, wi_stuff.o(i.WI_checkForAccelerate))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Ticker
</UL>

<P><STRONG><a name="[5ba]"></a>WI_drawAnimatedBack</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_drawAnimatedBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WI_drawAnimatedBack &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawStats
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawShowNextLoc
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNetgameStats
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawDeathmatchStats
</UL>

<P><STRONG><a name="[5a9]"></a>WI_drawDeathmatchStats</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, wi_stuff.o(i.WI_drawDeathmatchStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WI_drawDeathmatchStats &rArr; WI_drawLF &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_slamBackground
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNum
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawLF
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawAnimatedBack
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Drawer
</UL>

<P><STRONG><a name="[5be]"></a>WI_drawEL</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_drawEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WI_drawEL &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawShowNextLoc
</UL>

<P><STRONG><a name="[5bc]"></a>WI_drawLF</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, wi_stuff.o(i.WI_drawLF))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WI_drawLF &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawStats
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNetgameStats
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawDeathmatchStats
</UL>

<P><STRONG><a name="[5aa]"></a>WI_drawNetgameStats</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, wi_stuff.o(i.WI_drawNetgameStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WI_drawNetgameStats &rArr; WI_drawPercent &rArr; WI_drawNum &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_slamBackground
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawPercent
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNum
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawLF
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawAnimatedBack
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Drawer
</UL>

<P><STRONG><a name="[5ad]"></a>WI_drawNoState</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_drawNoState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WI_drawNoState &rArr; WI_drawShowNextLoc &rArr; WI_drawOnLnode &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawShowNextLoc
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Drawer
</UL>

<P><STRONG><a name="[5bd]"></a>WI_drawNum</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, wi_stuff.o(i.WI_drawNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WI_drawNum &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawTime
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawPercent
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNetgameStats
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawDeathmatchStats
</UL>

<P><STRONG><a name="[5c0]"></a>WI_drawOnLnode</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, wi_stuff.o(i.WI_drawOnLnode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WI_drawOnLnode &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawShowNextLoc
</UL>

<P><STRONG><a name="[5bf]"></a>WI_drawPercent</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_drawPercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WI_drawPercent &rArr; WI_drawNum &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNum
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawStats
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNetgameStats
</UL>

<P><STRONG><a name="[5ac]"></a>WI_drawShowNextLoc</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_drawShowNextLoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WI_drawShowNextLoc &rArr; WI_drawOnLnode &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_slamBackground
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawOnLnode
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawEL
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawAnimatedBack
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Drawer
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNoState
</UL>

<P><STRONG><a name="[5ab]"></a>WI_drawStats</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_drawStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WI_drawStats &rArr; WI_drawTime &rArr; WI_drawNum &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_slamBackground
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawTime
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawPercent
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawLF
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawAnimatedBack
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Drawer
</UL>

<P><STRONG><a name="[5c1]"></a>WI_drawTime</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, wi_stuff.o(i.WI_drawTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WI_drawTime &rArr; WI_drawNum &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNum
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawStats
</UL>

<P><STRONG><a name="[5c3]"></a>WI_fragSum</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_fragSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WI_fragSum
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateNetgameStats
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateDeathmatchStats
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initNetgameStats
</UL>

<P><STRONG><a name="[5c2]"></a>WI_initAnimatedBack</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_initAnimatedBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WI_initAnimatedBack
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Random
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initStats
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initShowNextLoc
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initNetgameStats
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initDeathmatchStats
</UL>

<P><STRONG><a name="[5b1]"></a>WI_initDeathmatchStats</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_initDeathmatchStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WI_initDeathmatchStats &rArr; WI_initAnimatedBack
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initAnimatedBack
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Start
</UL>

<P><STRONG><a name="[5b2]"></a>WI_initNetgameStats</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_initNetgameStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WI_initNetgameStats &rArr; WI_initAnimatedBack
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initAnimatedBack
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_fragSum
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Start
</UL>

<P><STRONG><a name="[5c7]"></a>WI_initNoState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wi_stuff.o(i.WI_initNoState))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateStats
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateShowNextLoc
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateNetgameStats
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateDeathmatchStats
</UL>

<P><STRONG><a name="[5c4]"></a>WI_initShowNextLoc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_initShowNextLoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WI_initShowNextLoc &rArr; WI_initAnimatedBack
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initAnimatedBack
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateStats
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateNetgameStats
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateDeathmatchStats
</UL>

<P><STRONG><a name="[5b3]"></a>WI_initStats</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_initStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WI_initStats &rArr; WI_initAnimatedBack
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initAnimatedBack
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Start
</UL>

<P><STRONG><a name="[5af]"></a>WI_initVariables</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, wi_stuff.o(i.WI_initVariables))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Start
</UL>

<P><STRONG><a name="[5b0]"></a>WI_loadData</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_loadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WI_loadData &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_loadUnloadData
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Start
</UL>

<P><STRONG><a name="[5bb]"></a>WI_slamBackground</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_slamBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WI_slamBackground &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawStats
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawShowNextLoc
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawNetgameStats
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_drawDeathmatchStats
</UL>

<P><STRONG><a name="[5ae]"></a>WI_unloadData</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_unloadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WI_unloadData &rArr; WI_loadUnloadData &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_loadUnloadData
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_End
</UL>

<P><STRONG><a name="[5c6]"></a>WI_updateAnimatedBack</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_updateAnimatedBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WI_updateAnimatedBack
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Random
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateStats
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateShowNextLoc
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateNoState
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateNetgameStats
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateDeathmatchStats
</UL>

<P><STRONG><a name="[5b5]"></a>WI_updateDeathmatchStats</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_updateDeathmatchStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WI_updateDeathmatchStats &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateAnimatedBack
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initShowNextLoc
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initNoState
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_fragSum
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Ticker
</UL>

<P><STRONG><a name="[5b6]"></a>WI_updateNetgameStats</STRONG> (Thumb, 888 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_updateNetgameStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WI_updateNetgameStats &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateAnimatedBack
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initShowNextLoc
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initNoState
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_fragSum
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Ticker
</UL>

<P><STRONG><a name="[5b9]"></a>WI_updateNoState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_updateNoState))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = WI_updateNoState &rArr; G_WorldDone &rArr; F_StartFinale &rArr; S_ChangeMusic &rArr; music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_WorldDone
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateAnimatedBack
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Ticker
</UL>

<P><STRONG><a name="[5b8]"></a>WI_updateShowNextLoc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_updateShowNextLoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WI_updateShowNextLoc &rArr; WI_updateAnimatedBack
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateAnimatedBack
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initNoState
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Ticker
</UL>

<P><STRONG><a name="[5b7]"></a>WI_updateStats</STRONG> (Thumb, 866 bytes, Stack size 8 bytes, wi_stuff.o(i.WI_updateStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WI_updateStats &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_updateAnimatedBack
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initShowNextLoc
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_initNoState
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_Ticker
</UL>

<P><STRONG><a name="[267]"></a>W_AddFile</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, w_wad.o(i.W_AddFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = W_AddFile &rArr; ExtendLumpInfo &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ExtractFileBase
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtendLumpInfo
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_Read
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_OpenFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_ForeachFileHdlr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_AddFile
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ParseCommandLine
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_ForeachFileHdlr
</UL>

<P><STRONG><a name="[1be]"></a>W_CacheLumpName</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, w_wad.o(i.W_CacheLumpName))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Endoom
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_loadPics
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_TextWrite
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastDrawer
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_BunnyScroll
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_ArtScreenDrawer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FillBackScreen
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Drawer
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_PageDrawer
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_ScreenShot
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoPlayDemo
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawThermo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSound
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSaveLoadBorder
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawSave
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawReadThis2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawReadThis1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawOptions
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawNewGame
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawMainMenu
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawLoad
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawEpisode
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STlib_init
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_loadData
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_loadCallback
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_loadCallback
</UL>

<P><STRONG><a name="[251]"></a>W_CacheLumpNum</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, w_wad.o(i.W_CacheLumpNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_ChangeTag2
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReadLump
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheSFX
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_CastDrawer
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteLumps
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitColormaps
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GetColumn
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateLookup
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateComposite
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PrecacheLevel
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadVertexes
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadThings
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSubsectors
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSideDefs
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSegs
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSectors
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadNodes
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadLineDefs
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadReject
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawVisSprite
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawPlanes
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_doPaletteStuff
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Stop
</UL>

<P><STRONG><a name="[297]"></a>W_CheckNumForName</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, w_wad.o(i.W_CheckNumForName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpNameHash
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConnectData
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_SetGameDescription
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_IdentifyVersion
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoAdvanceDemo
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FlatNumForName
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_SecretExitLevel
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InitPicAnims
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_loadUnloadData
</UL>

<P><STRONG><a name="[425]"></a>W_Checksum</STRONG> (Thumb, 62 bytes, Stack size 104 bytes, w_checksum.o(i.W_Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = W_Checksum &rArr; ChecksumAddLump &rArr; SHA1_UpdateString &rArr; SHA1_Update &rArr;  SHA1_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Init
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChecksumAddLump
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConnectData
</UL>

<P><STRONG><a name="[2d5]"></a>W_ForEach</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, w_file.o(i.W_ForEach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W_ForEach
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByExt
</UL>

<P><STRONG><a name="[2b8]"></a>W_GenerateHashTable</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, w_wad.o(i.W_GenerateHashTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W_GenerateHashTable &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpNameHash
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[40f]"></a>W_GetNumForName</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, w_wad.o(i.W_GetNumForName))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W_GetNumForName &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpName
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_GetSfxLumpNum
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteLumps
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitFlats
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitColormaps
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteDefs
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_loadData
</UL>

<P><STRONG><a name="[252]"></a>W_LumpLength</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w_wad.o(i.W_LumpLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W_LumpLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheSFX
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadVertexes
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadThings
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSubsectors
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSideDefs
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSegs
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSectors
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadNodes
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadLineDefs
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadBlockMap
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadReject
</UL>

<P><STRONG><a name="[354]"></a>W_LumpNameHash</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, w_wad.o(i.W_LumpNameHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W_LumpNameHash
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GenerateHashTable
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTextureHashTable
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_CheckTextureNumForName
</UL>

<P><STRONG><a name="[5c8]"></a>W_OpenFile</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, w_file.o(i.W_OpenFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W_OpenFile &rArr; M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
</UL>

<P><STRONG><a name="[2b5]"></a>W_ParseCommandLine</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, w_main.o(i.W_ParseCommandLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = W_ParseCommandLine &rArr; D_TryFindWADByName &rArr; D_FindWADByName &rArr; M_FileExists &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_TryFindWADByName
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[5c9]"></a>W_Read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, w_file.o(i.W_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReadLump
</UL>

<P><STRONG><a name="[492]"></a>W_ReadLump</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, w_wad.o(i.W_ReadLump))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W_ReadLump &rArr; W_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EndRead
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_BeginRead
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadBlockMap
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadReject
</UL>

<P><STRONG><a name="[1bf]"></a>W_ReleaseLumpName</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, w_wad.o(i.W_ReleaseLumpName))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W_ReleaseLumpName &rArr; W_GetNumForName &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_unloadPics
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckDemoStatus
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_unloadCallback
</UL>

<P><STRONG><a name="[254]"></a>W_ReleaseLumpNum</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, w_wad.o(i.W_ReleaseLumpNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W_ReleaseLumpNum &rArr; Z_ChangeTag2
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_ChangeTag2
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpName
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheSFX
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadVertexes
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadThings
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSubsectors
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSideDefs
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSegs
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSectors
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadNodes
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadLineDefs
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawPlanes
</UL>

<P><STRONG><a name="[a4]"></a>W_StdC_Read</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, w_file_stdc.o(i.W_StdC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = W_StdC_Read &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readn
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w_file_stdc.o(.data)
</UL>
<P><STRONG><a name="[341]"></a>WeaponSelectable</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, g_game.o(i.WeaponSelectable))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_NextWeapon
</UL>

<P><STRONG><a name="[5a8]"></a>WritePCXfile</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, v_video.o(i.WritePCXfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = WritePCXfile &rArr; M_WriteFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_ScreenShot
</UL>

<P><STRONG><a name="[3ff]"></a>Z_ChangeTag2</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, z_zone.o(i.Z_ChangeTag2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Z_ChangeTag2
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_CacheSoundExt
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateComposite
</UL>

<P><STRONG><a name="[300]"></a>Z_ChangeUser</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, z_zone.o(i.Z_ChangeUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Z_ChangeUser
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtendLumpInfo
</UL>

<P><STRONG><a name="[330]"></a>Z_CheckHeap</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, z_zone.o(i.Z_CheckHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Z_CheckHeap
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoLoadLevel
</UL>

<P><STRONG><a name="[301]"></a>Z_Free</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, z_zone.o(i.Z_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAllocatedSound
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_shittyColMajorXform
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_exitMelt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GenerateHashTable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FillBackScreen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckDemoStatus
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveThinkers
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseDemoBuffer
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateLookup
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_RunThinkers
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_FreeTags
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PrecacheLevel
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtendLumpInfo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_CloseFile
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePCXfile
</UL>

<P><STRONG><a name="[4b2]"></a>Z_FreeTags</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, z_zone.o(i.Z_FreeTags))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Z_FreeTags &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[2ac]"></a>Z_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, z_zone.o(i.Z_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Z_Init &rArr; I_ZoneBase &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ZoneBase
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[1f5]"></a>Z_Malloc</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, z_zone.o(i.Z_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGameName
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_CacheSoundExt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSound
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoPlat
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_shittyColMajorXform
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_initMelt
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_StartScreen
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_EndScreen
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GenerateHashTable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FillBackScreen
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_RecordDemo
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveThinkers
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMobj
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveBegin
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseDemoBuffer
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnStrobeFlash
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnLightFlash
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnGlowingLight
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnFireFlicker
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_BuildStairs
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnDoorRaiseIn5Mins
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnDoorCloseIn30
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_VerticalDoor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDoor
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoCeiling
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTranslationTables
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteLumps
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitFlats
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateLookup
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateComposite
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateTextureHashTable
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDonut
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PrecacheLevel
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadVertexes
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSubsectors
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSideDefs
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSegs
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadSectors
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadNodes
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadLineDefs
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadBlockMap
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_GroupLines
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadReject
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteDefs
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_loadData
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtendLumpInfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_OpenFile
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_MMapFile
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePCXfile
</UL>

<P><STRONG><a name="[5d5]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[679]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1bd]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_unloadPics
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_loadPics
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ext_sound
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_ext_sound
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_open_wav
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_BunnyScroll
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveGameFile
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HU_Ticker
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuitDOOM
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickSave
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuickLoad
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_DrawNewLevel
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_ForeachFileHdlr
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_loadUnloadData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_Foreach
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_loadUnloadGraphics
</UL>

<P><STRONG><a name="[67a]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[67b]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[5d7]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[649]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_scan_dir_for_num
</UL>

<P><STRONG><a name="[67d]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[67e]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[5d8]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67f]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[680]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[681]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[44e]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_vsnprintf
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[682]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[25b]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByName
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDirectoryHasIWAD
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_MakeDirectory
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[43c]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringJoin
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveGameFile
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_MakeDirectory
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[683]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[684]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[685]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b]"></a>adv7533_AudioInit</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, adv7533.o(i.adv7533_AudioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = adv7533_AudioInit &rArr; adv7533_SetFrequency &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Read
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_SetFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>adv7533_DeInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adv7533.o(i.adv7533_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adv7533_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>adv7533_Pause</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adv7533.o(i.adv7533_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = adv7533_Pause &rArr; adv7533_SetMute &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_SetMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>adv7533_Play</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, adv7533.o(i.adv7533_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = adv7533_Play &rArr; adv7533_SetMute &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_SetMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>adv7533_ReadID</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adv7533.o(i.adv7533_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = adv7533_ReadID &rArr; HDMI_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>adv7533_Reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adv7533.o(i.adv7533_Reset))
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>adv7533_Resume</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adv7533.o(i.adv7533_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = adv7533_Resume &rArr; adv7533_SetMute &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_SetMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>adv7533_SetFrequency</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, adv7533.o(i.adv7533_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = adv7533_SetFrequency &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_AudioInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>adv7533_SetMute</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adv7533.o(i.adv7533_SetMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = adv7533_SetMute &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_Stop
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_Resume
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_Play
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_Pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>adv7533_SetOutputMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adv7533.o(i.adv7533_SetOutputMode))
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>adv7533_SetVolume</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adv7533.o(i.adv7533_SetVolume))
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>adv7533_Stop</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, adv7533.o(i.adv7533_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = adv7533_Stop &rArr; adv7533_SetMute &rArr; HDMI_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv7533_SetMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv7533.o(.data)
</UL>
<P><STRONG><a name="[5e2]"></a>audio_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, audio_main.o(i.audio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = audio_init &rArr; ll_init &rArr; AUDIO_InitApplication &rArr; BSP_AUDIO_OUT_Init &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_init
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_play
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[411]"></a>audio_is_playing</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, audio_main.o(i.audio_is_playing))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_SoundIsPlaying
</UL>

<P><STRONG><a name="[50f]"></a>audio_pause</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, audio_main.o(i.audio_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = audio_pause &rArr; chan_remove_helper &rArr; chan_unlink
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_remove_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSoundOnChannel
</UL>

<P><STRONG><a name="[416]"></a>audio_play_channel</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, audio_main.o(i.audio_play_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = audio_play_channel &rArr; chan_add_helper &rArr; chan_link
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_add_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_StartSound
</UL>

<P><STRONG><a name="[648]"></a>audio_resume</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, audio_main.o(i.audio_resume))
<BR><BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_play_song_num
</UL>

<P><STRONG><a name="[410]"></a>audio_sdown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, audio_main.o(i.audio_sdown))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_ShutdownSound
</UL>

<P><STRONG><a name="[417]"></a>audio_set_pan</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, audio_main.o(i.audio_set_pan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = audio_set_pan
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_UpdateSoundParams
</UL>

<P><STRONG><a name="[2a5]"></a>audio_update</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, audio_main.o(i.audio_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = audio_update &rArr; music_tickle &rArr; song_repeat &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_tickle
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_resume
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_mix_all_helper
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_state_control
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_clr_buf_all
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[605]"></a>button_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, button.o(i.button_init))
<BR><BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_main
</UL>

<P><STRONG><a name="[400]"></a>cache_ext_sound</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, audio_main.o(i.cache_ext_sound))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = cache_ext_sound &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handle
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_CacheSoundExt
</UL>

<P><STRONG><a name="[1ac]"></a>cht_CheckCheat</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, m_cheat.o(i.cht_CheckCheat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cht_CheckCheat
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Responder
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
</UL>

<P><STRONG><a name="[535]"></a>cht_GetParam</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, m_cheat.o(i.cht_GetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cht_GetParam &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Responder
</UL>

<P><STRONG><a name="[602]"></a>d_main</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dd_main.o(i.d_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = d_main &rArr; D_DoomMain &rArr; D_DoomLoop &rArr; D_Display &rArr; R_RenderPlayerView &rArr; R_DrawMasked &rArr; R_DrawSprite &rArr; R_RenderMaskedSegRange &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_init
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfx_init
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62e]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[65f]"></a>disk_ioctl</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[619]"></a>disk_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[62d]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[618]"></a>disk_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[253]"></a>expand_native_sound</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, i_sdlsound.o(i.expand_native_sound))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = expand_native_sound &rArr; AllocateSound &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSound
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheSFX
</UL>

<P><STRONG><a name="[446]"></a>f_close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ext_sound
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_ext_sound
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_close_wav
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteFile
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadSaveStrings
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_MMapFile
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_CloseFile
</UL>

<P><STRONG><a name="[5d0]"></a>f_closedir</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = f_closedir &rArr; validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_scan_dir_for_num
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_Foreach
</UL>

<P><STRONG><a name="[5d2]"></a>f_lseek</STRONG> (Thumb, 688 bytes, Stack size 72 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_Read
</UL>

<P><STRONG><a name="[43e]"></a>f_mkdir</STRONG> (Thumb, 386 bytes, Stack size 104 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_MakeDirectory
</UL>

<P><STRONG><a name="[623]"></a>f_mount</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[444]"></a>f_open</STRONG> (Thumb, 594 bytes, Stack size 120 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ext_sound
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_ext_sound
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_open_wav
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteFile
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadSaveStrings
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_OpenFile
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_MMapFile
</UL>

<P><STRONG><a name="[5ce]"></a>f_opendir</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_scan_dir_for_num
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_Foreach
</UL>

<P><STRONG><a name="[445]"></a>f_read</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_ext_sound
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_fill_next_buf
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_open_wav
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readn
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_ReadSaveStrings
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_MMapFile
</UL>

<P><STRONG><a name="[5cf]"></a>f_readdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_scan_dir_for_num
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_Foreach
</UL>

<P><STRONG><a name="[5d3]"></a>f_readn</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ff_gen_drv.o(i.f_readn))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_readn &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read8_file
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_StdC_Read
</UL>

<P><STRONG><a name="[438]"></a>f_stat</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_FileExists
</UL>

<P><STRONG><a name="[614]"></a>f_sync</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[62c]"></a>f_write</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_writen
</UL>

<P><STRONG><a name="[44c]"></a>f_writen</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, ff_gen_drv.o(i.f_writen))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_writen &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write8_file
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteFile
</UL>

<P><STRONG><a name="[5ff]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, unicode.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[61b]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ff_memalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[622]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_memfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5fa]"></a>ff_wtoupper</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, unicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[57f]"></a>fifo_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_hid.o(i.fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GamepadInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_MouseInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_KeybdInit
</UL>

<P><STRONG><a name="[586]"></a>fifo_write</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, usbh_hid.o(i.fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[2a8]"></a>fps_update</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, dd_main.o(i.fps_update))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[2a7]"></a>frame_end</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dd_main.o(i.frame_end))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[2a3]"></a>frame_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dd_main.o(i.frame_start))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[17]"></a>ft6x06_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ft6x06_Init &rArr; TS_IO_Init &rArr; I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_GetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>ft6x06_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ft6x06.o(i.ft6x06_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ft6x06_ReadID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>ft6x06_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>ft6x06_TS_ClearIT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_ClearIT))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>ft6x06_TS_DetectTouch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ft6x06_TS_DetectTouch &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>ft6x06_TS_DisableIT</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ft6x06_TS_DisableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>ft6x06_TS_EnableIT</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ft6x06_TS_EnableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>ft6x06_TS_GetXY</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ft6x06.o(i.ft6x06_TS_GetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ft6x06_TS_GetXY &rArr; TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>ft6x06_TS_ITStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_ITStatus))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>ft6x06_TS_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ft6x06.o(i.ft6x06_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ft6x06_TS_Start &rArr; ft6x06_TS_DisableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DisableIT
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_Configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[631]"></a>gamepad_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_hid_gamepad.o(i.gamepad_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gamepad_init &rArr; USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RegisterClass
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a2]"></a>gamepad_process</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_hid_gamepad.o(i.gamepad_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gamepad_process &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomLoop
</UL>

<P><STRONG><a name="[408]"></a>gamepad_read</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, usb_hid_gamepad.o(i.gamepad_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gamepad_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetEvent
</UL>

<P><STRONG><a name="[2ed]"></a>getNextSector</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, p_spec.o(i.getNextSector))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindMinSurroundingLight
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_TurnTagLightsOff
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_LightTurnOn
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindNextHighestFloor
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindLowestFloorSurrounding
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindHighestFloorSurrounding
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindLowestCeilingSurrounding
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_FindHighestCeilingSurrounding
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDonut
</UL>

<P><STRONG><a name="[2f4]"></a>getSector</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, p_spec.o(i.getSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSector
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
</UL>

<P><STRONG><a name="[2f3]"></a>getSide</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, p_spec.o(i.getSide))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSide
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
</UL>

<P><STRONG><a name="[3fe]"></a>get_ext_snd_size</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, audio_main.o(i.get_ext_snd_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ext_snd_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_CacheSoundExt
</UL>

<P><STRONG><a name="[61d]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[634]"></a>gfx_clear_screen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx_main.o(i.gfx_clear_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gfx_clear_screen &rArr; BSP_LCD_Clear &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfx_init
</UL>

<P><STRONG><a name="[603]"></a>gfx_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx.o(i.gfx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gfx_init &rArr; gfx_clear_screen &rArr; BSP_LCD_Clear &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfx_clear_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_main
</UL>

<P><STRONG><a name="[63a]"></a>lcd_attach_buf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_main.o(i.lcd_attach_buf))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[419]"></a>lcd_config_layer</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, lcd_main.o(i.lcd_config_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lcd_config_layer &rArr; _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BSP_LCD_LayerDefaultInit
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SetPalette
</UL>

<P><STRONG><a name="[418]"></a>lcd_get_layer_addr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lcd_main.o(i.lcd_get_layer_addr))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SetPalette
</UL>

<P><STRONG><a name="[403]"></a>lcd_get_ready_layer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lcd_main.o(i.lcd_get_ready_layer))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_FinishUpdate
</UL>

<P><STRONG><a name="[41a]"></a>lcd_load_clut</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_main.o(i.lcd_load_clut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lcd_load_clut &rArr; HAL_LTDC_ConfigCLUT
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_EnableCLUT
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigCLUT
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SetPalette
</UL>

<P><STRONG><a name="[402]"></a>lcd_refresh</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd_main.o(i.lcd_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lcd_refresh &rArr; lcd_set_layer &rArr; BSP_LCD_SetTransparency &rArr; HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_FinishUpdate
</UL>

<P><STRONG><a name="[637]"></a>lcd_set_layer</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lcd_main.o(i.lcd_set_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lcd_set_layer &rArr; BSP_LCD_SetTransparency &rArr; HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTransparency
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh
</UL>

<P><STRONG><a name="[401]"></a>lcd_wait_ready</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_main.o(i.lcd_wait_ready))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_FinishUpdate
</UL>

<P><STRONG><a name="[16b]"></a>ll_ready_remove_handle</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, audio_main.o(i.ll_ready_remove_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ll_ready_remove_handle &rArr; chan_invalidate
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_main.o(i.ll_init)
</UL>
<P><STRONG><a name="[123]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = main &rArr; d_main &rArr; D_DoomMain &rArr; D_DoomLoop &rArr; D_Display &rArr; R_RenderPlayerView &rArr; R_DrawMasked &rArr; R_DrawSprite &rArr; R_RenderMaskedSegRange &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_attach_buf
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_init
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_main
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[641]"></a>music_get_next_chunk</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, music_main.o(i.music_get_next_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = music_get_next_chunk &rArr; song_next_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_next_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_play
</UL>

<P><STRONG><a name="[640]"></a>music_get_volume</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, music_main.o(i.music_get_volume))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_play
</UL>

<P><STRONG><a name="[5e6]"></a>music_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, music_main.o(i.music_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = music_init &rArr; song_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_reset
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[490]"></a>music_pause</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, music_main.o(i.music_pause))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_PauseSound
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveBegin
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadBegin
</UL>

<P><STRONG><a name="[54e]"></a>music_play_song_num</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, music_main.o(i.music_play_song_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = music_play_song_num &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_resume
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_play_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ChangeMusic
</UL>

<P><STRONG><a name="[638]"></a>music_playing</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, music_main.o(i.music_playing))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_ready_first_link_handle
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_ready_empty_handle
</UL>

<P><STRONG><a name="[493]"></a>music_resume</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, music_main.o(i.music_resume))
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveEnd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_ResumeSound
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadEnd
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopMusic
</UL>

<P><STRONG><a name="[552]"></a>music_set_vol</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, music_main.o(i.music_set_vol))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_SetMusicVolume
</UL>

<P><STRONG><a name="[558]"></a>music_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, music_main.o(i.music_stop))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopMusic
</UL>

<P><STRONG><a name="[5ec]"></a>music_tickle</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, music_main.o(i.music_tickle))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = music_tickle &rArr; song_repeat &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_repeat
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_fill_next_buf
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_reset
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_close_wav
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_update
</UL>

<P><STRONG><a name="[63b]"></a>qspi_flash_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, qspi_flash.o(i.qspi_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = qspi_flash_init &rArr; BSP_QSPI_Init &rArr; QSPI_OutDrvStrengthCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_GetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35a]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileNumber
</UL>

<P><STRONG><a name="[3fd]"></a>search_ext_sound</STRONG> (Thumb, 144 bytes, Stack size 104 bytes, audio_main.o(i.search_ext_sound))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = search_ext_sound &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snd_ext_get_slot
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snd_ext_alloc_slot
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snd_cache_set_name
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handle
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_CacheSoundExt
</UL>

<P><STRONG><a name="[41d]"></a>sleep_ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dd_main.o(i.sleep_ms))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Sleep
</UL>

<P><STRONG><a name="[604]"></a>touch_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, input_main.o(i.touch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touch_init &rArr; BSP_TS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_state_tbl_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_main
</UL>

<P><STRONG><a name="[406]"></a>touch_main</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, input_main.o(i.touch_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touch_main &rArr; touch_read &rArr; BSP_TS_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_read
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetEvent
</UL>

<P><STRONG><a name="[662]"></a>touch_read</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, input_main.o(i.touch_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touch_read &rArr; BSP_TS_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_main
</UL>

<P><STRONG><a name="[661]"></a>touch_state_tbl_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, input_main.o(i.touch_state_tbl_init))
<BR><BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_init
</UL>

<P><STRONG><a name="[2f2]"></a>twoSided</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, p_spec.o(i.twoSided))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoFloor
</UL>

<P><STRONG><a name="[291]"></a>wipe_EndScreen</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, f_wipe.o(i.wipe_EndScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wipe_EndScreen &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawBlock
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ReadScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[293]"></a>wipe_ScreenWipe</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, f_wipe.o(i.wipe_ScreenWipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wipe_ScreenWipe &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_MarkRect
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[280]"></a>wipe_StartScreen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, f_wipe.o(i.wipe_StartScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wipe_StartScreen &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ReadScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_Display
</UL>

<P><STRONG><a name="[32]"></a>wipe_doColorXForm</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, f_wipe.o(i.wipe_doColorXForm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wipe_doColorXForm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f_wipe.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>wipe_doMelt</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, f_wipe.o(i.wipe_doMelt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wipe_doMelt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f_wipe.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>wipe_exitColorXForm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, f_wipe.o(i.wipe_exitColorXForm))
<BR>[Address Reference Count : 1]<UL><LI> f_wipe.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>wipe_exitMelt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, f_wipe.o(i.wipe_exitMelt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wipe_exitMelt &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f_wipe.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>wipe_initColorXForm</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, f_wipe.o(i.wipe_initColorXForm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wipe_initColorXForm &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f_wipe.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>wipe_initMelt</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, f_wipe.o(i.wipe_initMelt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wipe_initMelt &rArr; wipe_shittyColMajorXform &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Random
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_shittyColMajorXform
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f_wipe.o(.data)
</UL>
<P><STRONG><a name="[665]"></a>wipe_shittyColMajorXform</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, f_wipe.o(i.wipe_shittyColMajorXform))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wipe_shittyColMajorXform &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_initMelt
</UL>

<P><STRONG><a name="[22]"></a>wm8994_DeInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm8994.o(i.wm8994_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wm8994_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>wm8994_Init</STRONG> (Thumb, 2906 bytes, Stack size 40 bytes, wm8994.o(i.wm8994_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wm8994_Init &rArr; wm8994_SetVolume &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Delay
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetVolume
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>wm8994_Pause</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wm8994_Pause &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>wm8994_Play</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm8994.o(i.wm8994_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wm8994_Play &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>wm8994_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm8994.o(i.wm8994_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wm8994_ReadID &rArr; AUDIO_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>wm8994_Reset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wm8994_Reset &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>wm8994_Resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wm8994_Resume &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>wm8994_SetFrequency</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wm8994_SetFrequency &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>wm8994_SetMute</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_SetMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Stop
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetVolume
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Resume
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Play
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>wm8994_SetOutputMode</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_SetOutputMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wm8994_SetOutputMode &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>wm8994_SetVolume</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, wm8994.o(i.wm8994_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wm8994_SetVolume &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>wm8994_Stop</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wm8994.o(i.wm8994_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wm8994_Stop &rArr; wm8994_SetMute &rArr; CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODEC_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm8994.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3f9]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[3f8]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[39b]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[39f]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[39c]"></a>I2C_TransferConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f7xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[39a]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[39d]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[3a0]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[3aa]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[3ab]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[368]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[369]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[36b]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[366]"></a>DMA2D_SetConfig</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, stm32f7xx_hal_dma2d.o(i.DMA2D_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
</UL>

<P><STRONG><a name="[3a7]"></a>LTDC_SetConfig</STRONG> (Thumb, 530 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[13d]"></a>SD_DMAError</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMAError &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
<LI> stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[13c]"></a>SD_DMAReceiveCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_DMAReceiveCplt &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[13b]"></a>SD_DMARxAbort</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMARxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMARxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[13e]"></a>SD_DMATransmitCplt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.SD_DMATransmitCplt))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[13a]"></a>SD_DMATxAbort</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMATxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[527]"></a>SD_FindSCR</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, stm32f7xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[3d5]"></a>SD_InitCard</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, stm32f7xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[3d4]"></a>SD_PowerON</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[3cf]"></a>SD_Read_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_Read_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Read_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[3c8]"></a>SD_SendStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[3c6]"></a>SD_WideBus_Disable</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[3c5]"></a>SD_WideBus_Enable</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[3ce]"></a>SD_Write_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_Write_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Write_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[518]"></a>SDMMC_GetCmdError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdError))
<BR><BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
</UL>

<P><STRONG><a name="[513]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[51d]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[515]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[522]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[51a]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp7))
<BR><BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
</UL>

<P><STRONG><a name="[36e]"></a>DSI_ConfigPacketHeader</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, stm32f7xx_hal_dsi.o(i.DSI_ConfigPacketHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DSI_ConfigPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>

<P><STRONG><a name="[139]"></a>SAI_DMAError</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f7xx_hal_sai.o(i.SAI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SAI_DMAError &rArr; HAL_SAI_ErrorCallback &rArr; BSP_AUDIO_OUT_Error_CallBack &rArr; mute_all &rArr; ll_stop &rArr; BSP_AUDIO_OUT_Stop &rArr; HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[138]"></a>SAI_DMATxCplt</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f7xx_hal_sai.o(i.SAI_DMATxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SAI_DMATxCplt &rArr; HAL_SAI_TxCpltCallback &rArr; BSP_AUDIO_OUT_TransferComplete_CallBack &rArr; chan_mix_all_helper &rArr; chan_proc_all_to_buf &rArr; mus_play &rArr; music_get_next_chunk &rArr; song_next_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_InterruptFlag
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[137]"></a>SAI_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f7xx_hal_sai.o(i.SAI_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SAI_DMATxHalfCplt &rArr; HAL_SAI_TxHalfCpltCallback &rArr; BSP_AUDIO_OUT_HalfTransfer_CallBack &rArr; chan_mix_all_helper &rArr; chan_proc_all_to_buf &rArr; mus_play &rArr; music_get_next_chunk &rArr; song_next_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sai.o(i.HAL_SAI_Transmit_DMA)
</UL>
<P><STRONG><a name="[3b9]"></a>SAI_Disable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f7xx_hal_sai.o(i.SAI_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DMAStop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAError
</UL>

<P><STRONG><a name="[3c0]"></a>SAI_InterruptFlag</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f7xx_hal_sai.o(i.SAI_InterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Transmit_DMA
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMATxCplt
</UL>

<P><STRONG><a name="[3af]"></a>QSPI_Config</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, stm32f7xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[3ae]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>

<P><STRONG><a name="[384]"></a>HCD_HC_IN_IRQHandler</STRONG> (Thumb, 1376 bytes, Stack size 24 bytes, stm32f7xx_hal_hcd.o(i.HCD_HC_IN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_HC_IN_IRQHandler &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[385]"></a>HCD_HC_OUT_IRQHandler</STRONG> (Thumb, 1316 bytes, Stack size 24 bytes, stm32f7xx_hal_hcd.o(i.HCD_HC_OUT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_HC_OUT_IRQHandler &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[381]"></a>HCD_Port_IRQHandler</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32f7xx_hal_hcd.o(i.HCD_Port_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HCD_Port_IRQHandler &rArr; HAL_HCD_Connect_Callback &rArr; USBH_LL_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortEnabled_Callback
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_PortDisabled_Callback
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[386]"></a>HCD_RXQLVL_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, stm32f7xx_hal_hcd.o(i.HCD_RXQLVL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HCD_RXQLVL_IRQHandler &rArr; USB_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[59e]"></a>USB_CoreReset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f7xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[55c]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, system_stm32f7xx.o(i.SystemInit_ExtMemCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit_ExtMemCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[52d]"></a>SCB_CleanDCache</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, sd_diskio.o(i.SCB_CleanDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_CleanDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[525]"></a>SD_CheckStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[52c]"></a>sd_rxtx_wait</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sd_diskio.o(i.sd_rxtx_wait))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[24c]"></a>CPU_CACHE_Enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.CPU_CACHE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPU_CACHE_Enable &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24e]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
</UL>

<P><STRONG><a name="[24d]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, main.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
</UL>

<P><STRONG><a name="[55b]"></a>SystemClock_Config</STRONG> (Thumb, 202 bytes, Stack size 232 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>AUDIO_InitApplication</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, audio_main.o(i.AUDIO_InitApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AUDIO_InitApplication &rArr; BSP_AUDIO_OUT_Init &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_SetAudioFrameSlot
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_init
</UL>

<P><STRONG><a name="[5e0]"></a>audio_clr_buf_all</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, audio_main.o(i.audio_clr_buf_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = audio_clr_buf_all
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_update
</UL>

<P><STRONG><a name="[5ea]"></a>audio_state_control</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, audio_main.o(i.audio_state_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = audio_state_control
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_update
</UL>

<P><STRONG><a name="[5e9]"></a>chan_add_helper</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, audio_main.o(i.chan_add_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chan_add_helper &rArr; chan_link
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handle
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_link
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_channel
</UL>

<P><STRONG><a name="[5ee]"></a>chan_invalidate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, audio_main.o(i.chan_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chan_invalidate
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_ready_remove_handle
</UL>

<P><STRONG><a name="[5ed]"></a>chan_link</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, audio_main.o(i.chan_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chan_link
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_add_helper
</UL>

<P><STRONG><a name="[201]"></a>chan_mix_all_helper</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, audio_main.o(i.chan_mix_all_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = chan_mix_all_helper &rArr; chan_proc_all_to_buf &rArr; mus_play &rArr; music_get_next_chunk &rArr; song_next_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc_all_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_update
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_TransferComplete_CallBack
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_HalfTransfer_CallBack
</UL>

<P><STRONG><a name="[5f2]"></a>chan_move_win</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, audio_main.o(i.chan_move_win))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chan_move_win
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc_raw_all_ex
</UL>

<P><STRONG><a name="[5ef]"></a>chan_proc_all_to_buf</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, audio_main.o(i.chan_proc_all_to_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = chan_proc_all_to_buf &rArr; mus_play &rArr; music_get_next_chunk &rArr; song_next_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_play
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_remove_helper
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc_raw_all_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_mix_all_helper
</UL>

<P><STRONG><a name="[5f0]"></a>chan_proc_raw_all_ex</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, audio_main.o(i.chan_proc_raw_all_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = chan_proc_raw_all_ex &rArr; mix_to_master_raw1
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_to_master_raw1
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_move_win
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc_all_to_buf
</UL>

<P><STRONG><a name="[5e8]"></a>chan_remove_helper</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, audio_main.o(i.chan_remove_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chan_remove_helper &rArr; chan_unlink
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pause
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute_all
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc_all_to_buf
</UL>

<P><STRONG><a name="[5f4]"></a>chan_unlink</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, audio_main.o(i.chan_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chan_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_remove_helper
</UL>

<P><STRONG><a name="[5e1]"></a>clear_buf</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, audio_main.o(i.clear_buf))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_mix_all_helper
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_clr_buf_all
</UL>

<P><STRONG><a name="[1ff]"></a>error_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, audio_main.o(i.error_handle))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ext_sound
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_snd_size
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_ext_sound
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Error_CallBack
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_add_helper
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_state_control
</UL>

<P><STRONG><a name="[5e3]"></a>ll_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, audio_main.o(i.ll_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ll_init &rArr; AUDIO_InitApplication &rArr; BSP_AUDIO_OUT_Init &rArr; BSP_AUDIO_OUT_ClockConfig &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_InitApplication
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[5e5]"></a>ll_pause</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, audio_main.o(i.ll_pause))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_ready_empty_handle
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[5e4]"></a>ll_play</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, audio_main.o(i.ll_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ll_play &rArr; BSP_AUDIO_OUT_Play &rArr; HAL_SAI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[169]"></a>ll_ready_empty_handle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, audio_main.o(i.ll_ready_empty_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_ready_empty_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_playing
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_main.o(i.ll_init)
</UL>
<P><STRONG><a name="[16a]"></a>ll_ready_first_link_handle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, audio_main.o(i.ll_ready_first_link_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_ready_first_link_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_playing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_main.o(i.ll_init)
</UL>
<P><STRONG><a name="[5eb]"></a>ll_resume</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, audio_main.o(i.ll_resume))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_update
</UL>

<P><STRONG><a name="[639]"></a>ll_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, audio_main.o(i.ll_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ll_stop &rArr; BSP_AUDIO_OUT_Stop &rArr; HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mute_all
</UL>

<P><STRONG><a name="[642]"></a>mix_mus_to_master</STRONG> (Thumb, 154 bytes, Stack size 28 bytes, audio_main.o(i.mix_mus_to_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mix_mus_to_master
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_play
</UL>

<P><STRONG><a name="[5f3]"></a>mix_to_master_raw1</STRONG> (Thumb, 150 bytes, Stack size 28 bytes, audio_main.o(i.mix_to_master_raw1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mix_to_master_raw1
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc_raw_all_ex
</UL>

<P><STRONG><a name="[5f1]"></a>mus_play</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, audio_main.o(i.mus_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mus_play &rArr; music_get_next_chunk &rArr; song_next_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_get_volume
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_get_next_chunk
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_mus_to_master
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc_all_to_buf
</UL>

<P><STRONG><a name="[1fe]"></a>mute_all</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, audio_main.o(i.mute_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mute_all &rArr; ll_stop &rArr; BSP_AUDIO_OUT_Stop &rArr; HAL_SAI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_stop
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_remove_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Error_CallBack
</UL>

<P><STRONG><a name="[65d]"></a>snd_cache_set_name</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, audio_main.o(i.snd_cache_set_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = snd_cache_set_name &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ext_sound
</UL>

<P><STRONG><a name="[65c]"></a>snd_ext_alloc_slot</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, audio_main.o(i.snd_ext_alloc_slot))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ext_sound
</UL>

<P><STRONG><a name="[65b]"></a>snd_ext_get_slot</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, audio_main.o(i.snd_ext_get_slot))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ext_sound
</UL>

<P><STRONG><a name="[663]"></a>clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, input_main.o(i.clear))
<BR><BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_read
</UL>

<P><STRONG><a name="[5d4]"></a>_BSP_LCD_LayerDefaultInit</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, lcd_main.o(i._BSP_LCD_LayerDefaultInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _BSP_LCD_LayerDefaultInit &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_config_layer
</UL>

<P><STRONG><a name="[1f3]"></a>AllocateSound</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, i_sdlsound.o(i.AllocateSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AllocateSound &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReserveCacheSpace
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAndFreeSound
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocatedSoundLink
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_native_sound
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandSoundData_SDL
</UL>

<P><STRONG><a name="[1f7]"></a>AllocatedSoundLink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, i_sdlsound.o(i.AllocatedSoundLink))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockAllocatedSound
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSound
</UL>

<P><STRONG><a name="[315]"></a>AllocatedSoundUnlink</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, i_sdlsound.o(i.AllocatedSoundUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockAllocatedSound
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAllocatedSound
</UL>

<P><STRONG><a name="[24f]"></a>CacheSFX</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, i_sdlsound.o(i.CacheSFX))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = CacheSFX &rArr; I_CacheSoundExt &rArr; search_ext_sound &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpNum
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_native_sound
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_CacheSoundExt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandSoundData_SDL
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockSound
</UL>

<P><STRONG><a name="[13f]"></a>ExpandSoundData_SDL</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, i_sdlsound.o(i.ExpandSoundData_SDL))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ExpandSoundData_SDL &rArr; AllocateSound &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSound
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheSFX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_sdlsound.o(i.I_SDL_InitSound)
</UL>
<P><STRONG><a name="[1f6]"></a>FindAndFreeSound</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, i_sdlsound.o(i.FindAndFreeSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FindAndFreeSound &rArr; FreeAllocatedSound &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAllocatedSound
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReserveCacheSpace
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSound
</UL>

<P><STRONG><a name="[314]"></a>FreeAllocatedSound</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i_sdlsound.o(i.FreeAllocatedSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FreeAllocatedSound &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocatedSoundUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSoundOnChannel
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAndFreeSound
</UL>

<P><STRONG><a name="[414]"></a>GetAllocatedSoundBySfxInfoAndPitch</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, i_sdlsound.o(i.GetAllocatedSoundBySfxInfoAndPitch))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockSound
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_StartSound
</UL>

<P><STRONG><a name="[35e]"></a>GetSfxLumpName</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, i_sdlsound.o(i.GetSfxLumpName))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetSfxLumpName &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_GetSfxLumpNum
</UL>

<P><STRONG><a name="[250]"></a>I_CacheSoundExt</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, i_sdlsound.o(i.I_CacheSoundExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = I_CacheSoundExt &rArr; search_ext_sound &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ext_sound
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_snd_size
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_ext_sound
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_ChangeTag2
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheSFX
</UL>

<P><STRONG><a name="[4]"></a>I_SDL_GetSfxLumpNum</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, i_sdlsound.o(i.I_SDL_GetSfxLumpNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I_SDL_GetSfxLumpNum &rArr; GetSfxLumpName &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_GetNumForName
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSfxLumpName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_sdlsound.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>I_SDL_InitSound</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, i_sdlsound.o(i.I_SDL_InitSound))
<BR>[Address Reference Count : 1]<UL><LI> i_sdlsound.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>I_SDL_PrecacheSounds</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i_sdlsound.o(i.I_SDL_PrecacheSounds))
<BR>[Address Reference Count : 1]<UL><LI> i_sdlsound.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>I_SDL_ShutdownSound</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i_sdlsound.o(i.I_SDL_ShutdownSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_SDL_ShutdownSound
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_sdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_sdlsound.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>I_SDL_SoundIsPlaying</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i_sdlsound.o(i.I_SDL_SoundIsPlaying))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_SDL_SoundIsPlaying
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_is_playing
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_UpdateSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_sdlsound.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>I_SDL_StartSound</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, i_sdlsound.o(i.I_SDL_StartSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = I_SDL_StartSound &rArr; LockSound &rArr; CacheSFX &rArr; I_CacheSoundExt &rArr; search_ext_sound &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_channel
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSoundOnChannel
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockSound
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockAllocatedSound
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_UpdateSoundParams
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllocatedSoundBySfxInfoAndPitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_sdlsound.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>I_SDL_StopSound</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i_sdlsound.o(i.I_SDL_StopSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I_SDL_StopSound &rArr; ReleaseSoundOnChannel &rArr; audio_pause &rArr; chan_remove_helper &rArr; chan_unlink
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSoundOnChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_sdlsound.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>I_SDL_UpdateSound</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i_sdlsound.o(i.I_SDL_UpdateSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I_SDL_UpdateSound &rArr; ReleaseSoundOnChannel &rArr; audio_pause &rArr; chan_remove_helper &rArr; chan_unlink
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSoundOnChannel
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_SoundIsPlaying
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_sdlsound.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>I_SDL_UpdateSoundParams</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, i_sdlsound.o(i.I_SDL_UpdateSoundParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I_SDL_UpdateSoundParams &rArr; audio_set_pan
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_set_pan
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_StartSound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_sdlsound.o(.data)
</UL>
<P><STRONG><a name="[415]"></a>LockAllocatedSound</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i_sdlsound.o(i.LockAllocatedSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LockAllocatedSound
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocatedSoundUnlink
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocatedSoundLink
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockSound
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_StartSound
</UL>

<P><STRONG><a name="[413]"></a>LockSound</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, i_sdlsound.o(i.LockSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = LockSound &rArr; CacheSFX &rArr; I_CacheSoundExt &rArr; search_ext_sound &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockAllocatedSound
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllocatedSoundBySfxInfoAndPitch
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheSFX
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_StartSound
</UL>

<P><STRONG><a name="[412]"></a>ReleaseSoundOnChannel</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, i_sdlsound.o(i.ReleaseSoundOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReleaseSoundOnChannel &rArr; audio_pause &rArr; chan_remove_helper &rArr; chan_unlink
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pause
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockAllocatedSound
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAllocatedSound
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_UpdateSound
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_StopSound
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDL_StartSound
</UL>

<P><STRONG><a name="[1f4]"></a>ReserveCacheSpace</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i_sdlsound.o(i.ReserveCacheSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReserveCacheSpace &rArr; FindAndFreeSound &rArr; FreeAllocatedSound &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAndFreeSound
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSound
</UL>

<P><STRONG><a name="[510]"></a>UnlockAllocatedSound</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i_sdlsound.o(i.UnlockAllocatedSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UnlockAllocatedSound
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSoundOnChannel
</UL>

<P><STRONG><a name="[63f]"></a>error_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, music_main.o(i.error_handle))
<BR><BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_fill_next_buf
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_open_wav
</UL>

<P><STRONG><a name="[63c]"></a>mus_close_wav</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, music_main.o(i.mus_close_wav))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mus_close_wav &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_tickle
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_play_helper
</UL>

<P><STRONG><a name="[63e]"></a>mus_open_wav</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, music_main.o(i.mus_open_wav))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mus_open_wav &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handle
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_play_helper
</UL>

<P><STRONG><a name="[644]"></a>mus_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, music_main.o(i.mus_reset))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_tickle
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_init
</UL>

<P><STRONG><a name="[645]"></a>music_play_helper</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, music_main.o(i.music_play_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_fill_next_buf
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_scan_dir_for_num
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_open_wav
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_close_wav
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_repeat
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_play_song_num
</UL>

<P><STRONG><a name="[646]"></a>music_scan_dir_for_num</STRONG> (Thumb, 174 bytes, Stack size 368 bytes, music_main.o(i.music_scan_dir_for_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_play_helper
</UL>

<P><STRONG><a name="[647]"></a>song_fill_next_buf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, music_main.o(i.song_fill_next_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = song_fill_next_buf &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_tickle
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_play_helper
</UL>

<P><STRONG><a name="[643]"></a>song_next_ram</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, music_main.o(i.song_next_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = song_next_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_get_next_chunk
</UL>

<P><STRONG><a name="[64a]"></a>song_repeat</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, music_main.o(i.song_repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = song_repeat &rArr; music_play_helper &rArr; music_scan_dir_for_num &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_play_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_tickle
</UL>

<P><STRONG><a name="[63d]"></a>song_reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, music_main.o(i.song_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = song_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_init
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mus_close_wav
</UL>

<P><STRONG><a name="[168]"></a>USBH_UserProcess</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_hid_gamepad.o(i.USBH_UserProcess))
<BR>[Address Reference Count : 1]<UL><LI> usb_hid_gamepad.o(i.gamepad_init)
</UL>
<P><STRONG><a name="[633]"></a>set_state</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_hid_gamepad.o(i.set_state))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gamepad_read
</UL>

<P><STRONG><a name="[62f]"></a>ft6x06_GetInstance</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_Init
</UL>

<P><STRONG><a name="[630]"></a>ft6x06_TS_Configure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_Start
</UL>

<P><STRONG><a name="[24b]"></a>CODEC_IO_Write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wm8994.o(i.CODEC_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CODEC_IO_Write &rArr; AUDIO_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Stop
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetVolume
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetOutputMode
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetMute
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_SetFrequency
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Reset
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Pause
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm8994_Init
</UL>

<P><STRONG><a name="[3fa]"></a>I2Cx_Error</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f769i_discovery.o(i.I2Cx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2Cx_Error &rArr; I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[1c3]"></a>I2Cx_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f769i_discovery.o(i.I2Cx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2Cx_Init &rArr; I2Cx_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Init
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Init
</UL>

<P><STRONG><a name="[3fc]"></a>I2Cx_MspInit</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f769i_discovery.o(i.I2Cx_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2Cx_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[1c5]"></a>I2Cx_ReadMultiple</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, stm32f769i_discovery.o(i.I2Cx_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Read
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Read
</UL>

<P><STRONG><a name="[1c7]"></a>I2Cx_WriteMultiple</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, stm32f769i_discovery.o(i.I2Cx_WriteMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_IO_Write
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Write
</UL>

<P><STRONG><a name="[222]"></a>LCD_IO_GetID</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f769i_discovery_lcd.o(i.LCD_IO_GetID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_IO_GetID &rArr; HDMI_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Init
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[214]"></a>LL_FillBuffer</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stm32f769i_discovery_lcd.o(i.LL_FillBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>

<P><STRONG><a name="[202]"></a>SAIx_Out_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.SAIx_Out_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAIx_Out_DeInit &rArr; HAL_SAI_DeInit &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[205]"></a>SAIx_Out_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f769i_discovery_audio.o(i.SAIx_Out_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SAIx_Out_Init &rArr; HAL_SAI_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_AUDIO_OUT_Init
</UL>

<P><STRONG><a name="[4ce]"></a>QSPI_AutoPollingMemReady</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, stm32f769i_discovery_qspi.o(i.QSPI_AutoPollingMemReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
</UL>

<P><STRONG><a name="[234]"></a>QSPI_DummyCyclesCfg</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, stm32f769i_discovery_qspi.o(i.QSPI_DummyCyclesCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = QSPI_DummyCyclesCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[233]"></a>QSPI_EnterFourBytesAddress</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, stm32f769i_discovery_qspi.o(i.QSPI_EnterFourBytesAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = QSPI_EnterFourBytesAddress &rArr; QSPI_AutoPollingMemReady &rArr; HAL_QSPI_AutoPolling &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_AutoPollingMemReady
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[232]"></a>QSPI_EnterMemory_QPI</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, stm32f769i_discovery_qspi.o(i.QSPI_EnterMemory_QPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QSPI_EnterMemory_QPI &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[235]"></a>QSPI_OutDrvStrengthCfg</STRONG> (Thumb, 278 bytes, Stack size 72 bytes, stm32f769i_discovery_qspi.o(i.QSPI_OutDrvStrengthCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = QSPI_OutDrvStrengthCfg &rArr; QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[231]"></a>QSPI_ResetMemory</STRONG> (Thumb, 454 bytes, Stack size 96 bytes, stm32f769i_discovery_qspi.o(i.QSPI_ResetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = QSPI_ResetMemory &rArr; HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_QSPI_Init
</UL>

<P><STRONG><a name="[4cf]"></a>QSPI_WriteEnable</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, stm32f769i_discovery_qspi.o(i.QSPI_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QSPI_WriteEnable &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_AutoPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_OutDrvStrengthCfg
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterFourBytesAddress
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_DummyCyclesCfg
</UL>

<P><STRONG><a name="[5f5]"></a>check_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[600]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[626]"></a>chk_lock</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[625]"></a>clear_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clear_lock))
<BR><BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[617]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[60d]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[5f9]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5fb]"></a>create_chain</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[5fe]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[616]"></a>dec_lock</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>

<P><STRONG><a name="[606]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[609]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[608]"></a>dir_next</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[60e]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[610]"></a>dir_register</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[607]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[627]"></a>enq_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[61a]"></a>find_volume</STRONG> (Thumb, 750 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[61c]"></a>follow_path</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[612]"></a>gen_numname</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5fc]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[62a]"></a>get_fileinfo</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[624]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[629]"></a>inc_lock</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[628]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[5f8]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[5f7]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[60b]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[611]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[601]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5f6]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[60f]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[5fd]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[613]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[621]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[61f]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[61e]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[62b]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[60a]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[620]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[60c]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[615]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1a2]"></a>FixedDiv</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, am_map.o(i.FixedDiv))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_restoreScaleAndLoc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_minOutWindowScale
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_maxOutWindowScale
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_findMinMaxBoundaries
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_changeWindowScale
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_LevelInit
</UL>

<P><STRONG><a name="[1a5]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, am_map.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_rotate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_initVariables
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawMarks
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_drawLineCharacter
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_doFollowPlayer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_clipMline
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_changeWindowScale
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_activateNewScale
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AM_Responder
</UL>

<P><STRONG><a name="[246]"></a>AddIWADDir</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, d_iwad.o(i.AddIWADDir))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildIWADDirList
</UL>

<P><STRONG><a name="[245]"></a>BuildIWADDirList</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, d_iwad.o(i.BuildIWADDirList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BuildIWADDirList
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIWADDir
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByName
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindIWAD
</UL>

<P><STRONG><a name="[255]"></a>CheckDirectoryHasIWAD</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, d_iwad.o(i.CheckDirectoryHasIWAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = CheckDirectoryHasIWAD &rArr; M_FileExists &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringJoin
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_FileExists
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirIsFile
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchDirectoryForIWAD
</UL>

<P><STRONG><a name="[256]"></a>DirIsFile</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, d_iwad.o(i.DirIsFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DirIsFile &rArr; strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByName
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDirectoryHasIWAD
</UL>

<P><STRONG><a name="[2d3]"></a>IdentifyIWADByName</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, d_iwad.o(i.IdentifyIWADByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IdentifyIWADByName &rArr; strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindIWAD
</UL>

<P><STRONG><a name="[2d4]"></a>SearchDirectoryForIWAD</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, d_iwad.o(i.SearchDirectoryForIWAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = SearchDirectoryForIWAD &rArr; CheckDirectoryHasIWAD &rArr; M_FileExists &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDirectoryHasIWAD
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindIWAD
</UL>

<P><STRONG><a name="[258]"></a>strdup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, d_iwad.o(i.strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strdup &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByName
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDirectoryHasIWAD
</UL>

<P><STRONG><a name="[247]"></a>BuildNewTic</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, d_loop.o(i.BuildNewTic))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BuildNewTic &rArr; I_StartTic &rArr; I_GetEvent &rArr; post_event &rArr; post_key_up &rArr; D_PostEvent &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_StartTic
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetUpdate
</UL>

<P><STRONG><a name="[2de]"></a>GetAdjustedTime</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, d_loop.o(i.GetAdjustedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetAdjustedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetTimeMS
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetUpdate
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_StartGameLoop
</UL>

<P><STRONG><a name="[562]"></a>GetLowTic</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, d_loop.o(i.GetLowTic))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
</UL>

<P><STRONG><a name="[563]"></a>OldNetSync</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, d_loop.o(i.OldNetSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OldNetSync
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
</UL>

<P><STRONG><a name="[564]"></a>PlayersInGame</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, d_loop.o(i.PlayersInGame))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
</UL>

<P><STRONG><a name="[565]"></a>SinglePlayerClear</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, d_loop.o(i.SinglePlayerClear))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
</UL>

<P><STRONG><a name="[566]"></a>TicdupSquash</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, d_loop.o(i.TicdupSquash))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryRunTics
</UL>

<P><STRONG><a name="[266]"></a>D_AddFile</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, d_main.o(i.D_AddFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = D_AddFile &rArr; W_AddFile &rArr; ExtendLumpInfo &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[268]"></a>D_AddPwads</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, d_main.o(i.D_AddPwads))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = D_AddPwads &rArr; D_FindWADByExt &rArr; W_ForEach
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByExt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[12e]"></a>D_Endoom</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, d_main.o(i.D_Endoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = D_Endoom &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Endoom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> d_main.o(i.D_DoomMain)
</UL>
<P><STRONG><a name="[12c]"></a>D_ForeachFileHdlr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, d_main.o(i.D_ForeachFileHdlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = D_ForeachFileHdlr &rArr; W_AddFile &rArr; ExtendLumpInfo &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> d_main.o(i.D_AddPwads)
</UL>
<P><STRONG><a name="[2dd]"></a>GetGameName</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, d_main.o(i.GetGameName))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetGameName &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_VanillaVersionCode
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_SetGameDescription
</UL>

<P><STRONG><a name="[2b4]"></a>InitGameVersion</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, d_main.o(i.InitGameVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitGameVersion &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoomMain
</UL>

<P><STRONG><a name="[2d6]"></a>SetMissionForPackName</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, d_main.o(i.SetMissionForPackName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetMissionForPackName &rArr; strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_IdentifyVersion
</UL>

<P><STRONG><a name="[27c]"></a>InitConnectData</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, d_net.o(i.InitConnectData))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = InitConnectData &rArr; W_Checksum &rArr; ChecksumAddLump &rArr; SHA1_UpdateString &rArr; SHA1_Update &rArr;  SHA1_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_Checksum
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_ConnectNetGame
</UL>

<P><STRONG><a name="[279]"></a>LoadGameSettings</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, d_net.o(i.LoadGameSettings))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_CheckNetGame
</UL>

<P><STRONG><a name="[4cd]"></a>PlayerQuitGame</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, d_net.o(i.PlayerQuitGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = PlayerQuitGame &rArr; G_CheckDemoStatus &rArr; M_WriteFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CheckDemoStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTic
</UL>

<P><STRONG><a name="[2f]"></a>RunTic</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, d_net.o(i.RunTic))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = RunTic &rArr; G_Ticker &rArr; V_ScreenShot &rArr; WritePCXfile &rArr; M_WriteFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Ticker
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerQuitGame
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_DoAdvanceDemo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> d_net.o(.data)
</UL>
<P><STRONG><a name="[277]"></a>SaveGameSettings</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, d_net.o(i.SaveGameSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SaveGameSettings &rArr; M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_CheckNetGame
</UL>

<P><STRONG><a name="[304]"></a>F_ArtScreenDrawer</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, f_finale.o(i.F_ArtScreenDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = F_ArtScreenDrawer &rArr; F_BunnyScroll &rArr; S_StartSound &rArr; S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_DrawPatch
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_BunnyScroll
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Drawer
</UL>

<P><STRONG><a name="[2e0]"></a>DemoVersionDescription</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, g_game.o(i.DemoVersionDescription))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DemoVersionDescription &rArr; M_snprintf &rArr; M_vsnprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_DoPlayDemo
</UL>

<P><STRONG><a name="[318]"></a>G_NextWeapon</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, g_game.o(i.G_NextWeapon))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = G_NextWeapon
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeaponSelectable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_BuildTiccmd
</UL>

<P><STRONG><a name="[352]"></a>IncreaseDemoBuffer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, g_game.o(i.IncreaseDemoBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IncreaseDemoBuffer &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_WriteDemoTiccmd
</UL>

<P><STRONG><a name="[41f]"></a>CheckVolumeSeparation</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, i_sound.o(i.CheckVolumeSeparation))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_UpdateSoundParams
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_StartSound
</UL>

<P><STRONG><a name="[40d]"></a>InitMusicModule</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, i_sound.o(i.InitMusicModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitMusicModule
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndDeviceInList
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitSound
</UL>

<P><STRONG><a name="[40c]"></a>InitSfxModule</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, i_sound.o(i.InitSfxModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitSfxModule
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndDeviceInList
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitSound
</UL>

<P><STRONG><a name="[426]"></a>SndDeviceInList</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i_sound.o(i.SndDeviceInList))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSfxModule
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMusicModule
</UL>

<P><STRONG><a name="[1f8]"></a>AutoAllocMemory</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, i_system.o(i.AutoAllocMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AutoAllocMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ZoneBase
</UL>

<P><STRONG><a name="[404]"></a>SCB_CleanDCache</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, i_video.o(i.SCB_CleanDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_CleanDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_FinishUpdate
</UL>

<P><STRONG><a name="[420]"></a>draw_cross</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, i_video.o(i.draw_cross))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = draw_cross
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_UpdateNoBlit
</UL>

<P><STRONG><a name="[407]"></a>key_map_get_key</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, i_video.o(i.key_map_get_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = key_map_get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetEvent
</UL>

<P><STRONG><a name="[40a]"></a>key_map_init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, i_video.o(i.key_map_init))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_InitGraphics
</UL>

<P><STRONG><a name="[409]"></a>post_event</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, i_video.o(i.post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = post_event &rArr; post_key_up &rArr; D_PostEvent &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetTimeMS
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_PostEvent
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_key_up
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GetEvent
</UL>

<P><STRONG><a name="[64b]"></a>post_key_up</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, i_video.o(i.post_key_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = post_key_up &rArr; D_PostEvent &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_PostEvent
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_event
</UL>

<P><STRONG><a name="[356]"></a>GetDefaultConfigDir</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, m_config.o(i.GetDefaultConfigDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetDefaultConfigDir &rArr; M_StringJoin &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringJoin
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetConfigDir
</UL>

<P><STRONG><a name="[358]"></a>GetDefaultForName</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m_config.o(i.GetDefaultForName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetDefaultForName &rArr; SearchCollection &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchCollection
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_BindVariable
</UL>

<P><STRONG><a name="[43a]"></a>LoadDefaultCollection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_config.o(i.LoadDefaultCollection))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_LoadDefaults
</UL>

<P><STRONG><a name="[449]"></a>SaveDefaultCollection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_config.o(i.SaveDefaultCollection))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SaveDefaults
</UL>

<P><STRONG><a name="[359]"></a>SearchCollection</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, m_config.o(i.SearchCollection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SearchCollection &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDefaultForName
</UL>

<P><STRONG><a name="[357]"></a>strdup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, m_config.o(i.strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strdup &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_GetSaveGameDir
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDefaultConfigDir
</UL>

<P><STRONG><a name="[145]"></a>D_ForeachFileHdlr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, m_menu.o(i.D_ForeachFileHdlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = D_ForeachFileHdlr &rArr; W_AddFile &rArr; ExtendLumpInfo &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(i.M_SetLevel)
</UL>
<P><STRONG><a name="[448]"></a>IsNullKey</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_menu.o(i.IsNullKey))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Responder
</UL>

<P><STRONG><a name="[431]"></a>M_DrawOPLDev</STRONG> (Thumb, 56 bytes, Stack size 1040 bytes, m_menu.o(i.M_DrawOPLDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = M_DrawOPLDev &rArr; M_WriteText &rArr; V_DrawPatchDirect &rArr; V_DrawPatch &rArr; V_MarkRect
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_WriteText
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Drawer
</UL>

<P><STRONG><a name="[443]"></a>M_SelectEndMessage</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, m_menu.o(i.M_SelectEndMessage))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_QuitDOOM
</UL>

<P><STRONG><a name="[8c]"></a>M_SetLevel</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, m_menu.o(i.M_SetLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M_SetLevel &rArr; D_FindWADByExt &rArr; W_ForEach
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D_FindWADByExt
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_SetupNextMenu
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_menu.o(.data)
</UL>
<P><STRONG><a name="[1d0]"></a>CheckBossEnd</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, p_enemy.o(i.CheckBossEnd))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_BossDeath
</UL>

<P><STRONG><a name="[1e1]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, p_enemy.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_VileAttack
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Tracer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_SkullAttack
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Fire
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack3
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FatAttack1
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_PainShootSkull
</UL>

<P><STRONG><a name="[47a]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, p_inter.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_DamageMobj
</UL>

<P><STRONG><a name="[45a]"></a>FixedDiv</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, p_map.o(i.FixedDiv))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_ShootTraverse
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_AimTraverse
</UL>

<P><STRONG><a name="[459]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, p_map.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SlideMove
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_HitSlideLine
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_ShootTraverse
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_AimTraverse
</UL>

<P><STRONG><a name="[457]"></a>SpechitOverrun</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, p_map.o(i.SpechitOverrun))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SpechitOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StrToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CheckLine
</UL>

<P><STRONG><a name="[48f]"></a>FixedDiv</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, p_maputl.o(i.FixedDiv))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InterceptVector
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PathTraverse
</UL>

<P><STRONG><a name="[48e]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, p_maputl.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PointOnDivlineSide
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InterceptVector
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PointOnLineSide
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_PathTraverse
</UL>

<P><STRONG><a name="[428]"></a>InterceptsMemoryOverrun</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, p_maputl.o(i.InterceptsMemoryOverrun))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InterceptsMemoryOverrun
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterceptsOverrun
</UL>

<P><STRONG><a name="[427]"></a>InterceptsOverrun</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, p_maputl.o(i.InterceptsOverrun))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InterceptsOverrun &rArr; InterceptsMemoryOverrun
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterceptsMemoryOverrun
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AddThingIntercepts
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AddLineIntercepts
</UL>

<P><STRONG><a name="[4bd]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, p_mobj.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_XYMovement
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnPlayerMissile
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SpawnMissile
</UL>

<P><STRONG><a name="[1e4]"></a>DecreaseAmmo</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, p_pspr.o(i.DecreaseAmmo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DecreaseAmmo
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun2
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireShotgun
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FirePlasma
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FirePistol
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireMissile
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireCGun
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_FireBFG
</UL>

<P><STRONG><a name="[1f2]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, p_pspr.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_WeaponReady
</UL>

<P><STRONG><a name="[4b0]"></a>P_SaveEnd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, p_saveg.o(i.P_SaveEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P_SaveEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SaveWriteFile
</UL>

<P><STRONG><a name="[4cc]"></a>saveg_read16</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_read16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = saveg_read16
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_ticcmd_t
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_mapthing_t
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_floormove_t
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveWorld
</UL>

<P><STRONG><a name="[650]"></a>saveg_read32</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_read32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_readp
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_vldoor_t
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_strobe_t
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_pspdef_t
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_player_t
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_plat_t
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_mobj_t
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_lightflash_t
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_glow_t
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_floormove_t
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_ceiling_t
</UL>

<P><STRONG><a name="[14e]"></a>saveg_read8_buf</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_read8_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = saveg_read8_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_saveg.o(i.P_LoadBegin)
</UL>
<P><STRONG><a name="[a1]"></a>saveg_read8_file</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read8_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = saveg_read8_file &rArr; f_readn &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readn
</UL>
<BR>[Address Reference Count : 2]<UL><LI> p_saveg.o(i.P_LoadEnd)
<LI> p_saveg.o(.data)
</UL>
<P><STRONG><a name="[64d]"></a>saveg_read_actionf_t</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_read_actionf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = saveg_read_actionf_t &rArr; saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_readp
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_thinker_t
</UL>

<P><STRONG><a name="[4c4]"></a>saveg_read_ceiling_t</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_ceiling_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_read_ceiling_t &rArr; saveg_read_thinker_t &rArr; saveg_read_actionf_t &rArr; saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_thinker_t
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
</UL>

<P><STRONG><a name="[4c6]"></a>saveg_read_floormove_t</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_floormove_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_read_floormove_t &rArr; saveg_read_thinker_t &rArr; saveg_read_actionf_t &rArr; saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_thinker_t
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read16
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
</UL>

<P><STRONG><a name="[4ca]"></a>saveg_read_glow_t</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_glow_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_read_glow_t &rArr; saveg_read_thinker_t &rArr; saveg_read_actionf_t &rArr; saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_thinker_t
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
</UL>

<P><STRONG><a name="[4c8]"></a>saveg_read_lightflash_t</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_lightflash_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_read_lightflash_t &rArr; saveg_read_thinker_t &rArr; saveg_read_actionf_t &rArr; saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_thinker_t
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
</UL>

<P><STRONG><a name="[651]"></a>saveg_read_mapthing_t</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_read_mapthing_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = saveg_read_mapthing_t &rArr; saveg_read16
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read16
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_mobj_t
</UL>

<P><STRONG><a name="[4cb]"></a>saveg_read_mobj_t</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_mobj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_read_mobj_t &rArr; saveg_read_thinker_t &rArr; saveg_read_actionf_t &rArr; saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_readp
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_thinker_t
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_mapthing_t
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveThinkers
</UL>

<P><STRONG><a name="[4c2]"></a>saveg_read_pad</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = saveg_read_pad
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveThinkers
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchivePlayers
</UL>

<P><STRONG><a name="[4c7]"></a>saveg_read_plat_t</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_plat_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_read_plat_t &rArr; saveg_read_thinker_t &rArr; saveg_read_actionf_t &rArr; saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_thinker_t
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
</UL>

<P><STRONG><a name="[4c3]"></a>saveg_read_player_t</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_player_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = saveg_read_player_t &rArr; saveg_read_pspdef_t &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_readp
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_ticcmd_t
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_pspdef_t
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchivePlayers
</UL>

<P><STRONG><a name="[653]"></a>saveg_read_pspdef_t</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_pspdef_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = saveg_read_pspdef_t &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_player_t
</UL>

<P><STRONG><a name="[4c9]"></a>saveg_read_strobe_t</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_strobe_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_read_strobe_t &rArr; saveg_read_thinker_t &rArr; saveg_read_actionf_t &rArr; saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_thinker_t
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
</UL>

<P><STRONG><a name="[64f]"></a>saveg_read_thinker_t</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_read_thinker_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = saveg_read_thinker_t &rArr; saveg_read_actionf_t &rArr; saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_readp
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_actionf_t
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_vldoor_t
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_strobe_t
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_plat_t
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_mobj_t
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_lightflash_t
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_glow_t
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_floormove_t
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_ceiling_t
</UL>

<P><STRONG><a name="[652]"></a>saveg_read_ticcmd_t</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_read_ticcmd_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = saveg_read_ticcmd_t &rArr; saveg_read16
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read16
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_player_t
</UL>

<P><STRONG><a name="[4c5]"></a>saveg_read_vldoor_t</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_read_vldoor_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_read_vldoor_t &rArr; saveg_read_thinker_t &rArr; saveg_read_actionf_t &rArr; saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_thinker_t
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_UnArchiveSpecials
</UL>

<P><STRONG><a name="[64e]"></a>saveg_readp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_readp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = saveg_readp &rArr; saveg_read32
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read32
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_thinker_t
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_player_t
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_mobj_t
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_read_actionf_t
</UL>

<P><STRONG><a name="[469]"></a>saveg_write16</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_write16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = saveg_write16
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_ticcmd_t
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_mapthing_t
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_floormove_t
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveWorld
</UL>

<P><STRONG><a name="[657]"></a>saveg_write32</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_write32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_writep
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_vldoor_t
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_strobe_t
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_pspdef_t
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_player_t
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_plat_t
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_mobj_t
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_lightflash_t
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_glow_t
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_floormove_t
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_ceiling_t
</UL>

<P><STRONG><a name="[152]"></a>saveg_write8_buf</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_write8_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = saveg_write8_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p_saveg.o(i.P_SaveBegin)
</UL>
<P><STRONG><a name="[a0]"></a>saveg_write8_file</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write8_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = saveg_write8_file &rArr; f_writen &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_writen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> p_saveg.o(i.P_SaveEnd)
<LI> p_saveg.o(.data)
</UL>
<P><STRONG><a name="[654]"></a>saveg_write_actionf_t</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_write_actionf_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_writep
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_thinker_t
</UL>

<P><STRONG><a name="[461]"></a>saveg_write_ceiling_t</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_ceiling_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_write_ceiling_t &rArr; saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_thinker_t
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveSpecials
</UL>

<P><STRONG><a name="[463]"></a>saveg_write_floormove_t</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_floormove_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_write_floormove_t &rArr; saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_thinker_t
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write16
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveSpecials
</UL>

<P><STRONG><a name="[467]"></a>saveg_write_glow_t</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_glow_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_write_glow_t &rArr; saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_thinker_t
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveSpecials
</UL>

<P><STRONG><a name="[465]"></a>saveg_write_lightflash_t</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_lightflash_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_write_lightflash_t &rArr; saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_thinker_t
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveSpecials
</UL>

<P><STRONG><a name="[658]"></a>saveg_write_mapthing_t</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_write_mapthing_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = saveg_write_mapthing_t &rArr; saveg_write16
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write16
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_mobj_t
</UL>

<P><STRONG><a name="[468]"></a>saveg_write_mobj_t</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_mobj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_write_mobj_t &rArr; saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_writep
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_thinker_t
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_mapthing_t
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveThinkers
</UL>

<P><STRONG><a name="[45f]"></a>saveg_write_pad</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = saveg_write_pad
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveThinkers
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveSpecials
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchivePlayers
</UL>

<P><STRONG><a name="[464]"></a>saveg_write_plat_t</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_plat_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_write_plat_t &rArr; saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_thinker_t
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveSpecials
</UL>

<P><STRONG><a name="[460]"></a>saveg_write_player_t</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_player_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = saveg_write_player_t &rArr; saveg_write_pspdef_t &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_writep
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_ticcmd_t
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_pspdef_t
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchivePlayers
</UL>

<P><STRONG><a name="[65a]"></a>saveg_write_pspdef_t</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_pspdef_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = saveg_write_pspdef_t &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_player_t
</UL>

<P><STRONG><a name="[466]"></a>saveg_write_strobe_t</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_strobe_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_write_strobe_t &rArr; saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_thinker_t
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveSpecials
</UL>

<P><STRONG><a name="[656]"></a>saveg_write_thinker_t</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_write_thinker_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_writep
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_actionf_t
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_vldoor_t
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_strobe_t
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_plat_t
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_mobj_t
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_lightflash_t
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_glow_t
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_floormove_t
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_ceiling_t
</UL>

<P><STRONG><a name="[659]"></a>saveg_write_ticcmd_t</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_write_ticcmd_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = saveg_write_ticcmd_t &rArr; saveg_write16
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write16
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_player_t
</UL>

<P><STRONG><a name="[462]"></a>saveg_write_vldoor_t</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, p_saveg.o(i.saveg_write_vldoor_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saveg_write_vldoor_t &rArr; saveg_write_thinker_t &rArr; saveg_write_actionf_t &rArr; saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_thinker_t
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_ArchiveSpecials
</UL>

<P><STRONG><a name="[655]"></a>saveg_writep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, p_saveg.o(i.saveg_writep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = saveg_writep &rArr; saveg_write32
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write32
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_thinker_t
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_player_t
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_mobj_t
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveg_write_actionf_t
</UL>

<P><STRONG><a name="[496]"></a>P_LoadReject</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, p_setup.o(i.P_LoadReject))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = P_LoadReject &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpLength
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpNum
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReadLump
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadRejectArray
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_SetupLevel
</UL>

<P><STRONG><a name="[497]"></a>PadRejectArray</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, p_setup.o(i.PadRejectArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PadRejectArray &rArr; M_CheckParm &rArr; M_CheckParmWithArgs &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParm
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_LoadReject
</UL>

<P><STRONG><a name="[479]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, p_sight.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSubsector
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_InterceptVector2
</UL>

<P><STRONG><a name="[478]"></a>P_InterceptVector2</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, p_sight.o(i.P_InterceptVector2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = P_InterceptVector2 &rArr; FixedMul
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CrossSubsector
</UL>

<P><STRONG><a name="[2e3]"></a>DonutOverrun</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, p_spec.o(i.DonutOverrun))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DonutOverrun &rArr; M_StrToInt &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_CheckParmWithArgs
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StrToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EV_DoDonut
</UL>

<P><STRONG><a name="[46b]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, p_user.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_Thrust
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_CalcHeight
</UL>

<P><STRONG><a name="[4d0]"></a>R_AddLine</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, r_bsp.o(i.R_AddLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = R_AddLine &rArr; R_ClipSolidWallSegment &rArr; R_StoreWallRange &rArr; R_RenderSegLoop &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClipSolidWallSegment
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClipPassWallSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Subsector
</UL>

<P><STRONG><a name="[4d6]"></a>R_CheckBBox</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, r_bsp.o(i.R_CheckBBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = R_CheckBBox &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderBSPNode
</UL>

<P><STRONG><a name="[4d2]"></a>R_ClipPassWallSegment</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, r_bsp.o(i.R_ClipPassWallSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = R_ClipPassWallSegment &rArr; R_StoreWallRange &rArr; R_RenderSegLoop &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_StoreWallRange
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AddLine
</UL>

<P><STRONG><a name="[4d3]"></a>R_ClipSolidWallSegment</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, r_bsp.o(i.R_ClipSolidWallSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = R_ClipSolidWallSegment &rArr; R_StoreWallRange &rArr; R_RenderSegLoop &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_StoreWallRange
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AddLine
</UL>

<P><STRONG><a name="[507]"></a>R_Subsector</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, r_bsp.o(i.R_Subsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = R_Subsector &rArr; R_AddLine &rArr; R_ClipSolidWallSegment &rArr; R_StoreWallRange &rArr; R_RenderSegLoop &rArr; R_GetColumn &rArr; R_GenerateComposite &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FindPlane
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AddSprites
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AddLine
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderBSPNode
</UL>

<P><STRONG><a name="[353]"></a>GenerateTextureHashTable</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, r_data.o(i.GenerateTextureHashTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GenerateTextureHashTable &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_LumpNameHash
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextures
</UL>

<P><STRONG><a name="[4ea]"></a>FixedDiv</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, r_main.o(i.FixedDiv))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ExecuteSetViewSize
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SetupFrame
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToDist
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextureMapping
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTables
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitLightTables
</UL>

<P><STRONG><a name="[4fe]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, r_main.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ScaleFromGlobalAngle
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToDist
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitTextureMapping
</UL>

<P><STRONG><a name="[503]"></a>SlopeDiv</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_main.o(i.SlopeDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SlopeDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle
</UL>

<P><STRONG><a name="[4d9]"></a>FixedDiv</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, r_plane.o(i.FixedDiv))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ClearPlanes
</UL>

<P><STRONG><a name="[501]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, r_plane.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_MapPlane
</UL>

<P><STRONG><a name="[508]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, r_segs.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_StoreWallRange
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderSegLoop
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_RenderMaskedSegRange
</UL>

<P><STRONG><a name="[4d7]"></a>R_CheckPlane</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, r_segs.o(i.R_CheckPlane))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_CheckPlane
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_StoreWallRange
</UL>

<P><STRONG><a name="[4e3]"></a>FixedMul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, r_things.o(i.FixedMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FixedMul
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ProjectSprite
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawVisSprite
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DrawPSprite
</UL>

<P><STRONG><a name="[4fd]"></a>R_InstallSpriteLump</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, r_things.o(i.R_InstallSpriteLump))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_InstallSpriteLump
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_InitSpriteDefs
</UL>

<P><STRONG><a name="[54c]"></a>S_AdjustSoundParams</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, s_sound.o(i.S_AdjustSoundParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = S_AdjustSoundParams &rArr; R_PointToAngle2 &rArr; R_PointToAngle &rArr; SlopeDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_PointToAngle2
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UpdateSounds
</UL>

<P><STRONG><a name="[54f]"></a>S_GetChannel</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, s_sound.o(i.S_GetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = S_GetChannel &rArr; S_StopChannel &rArr; I_StopSound
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StartSound
</UL>

<P><STRONG><a name="[550]"></a>S_StopChannel</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, s_sound.o(i.S_StopChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = S_StopChannel &rArr; I_StopSound
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_StopSound
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SoundIsPlaying
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_StopSound
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_UpdateSounds
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_Start
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_GetChannel
</UL>

<P><STRONG><a name="[530]"></a>Transform</STRONG> (Thumb, 6208 bytes, Stack size 92 bytes, sha1.o(i.Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
</UL>

<P><STRONG><a name="[15f]"></a>ST_loadCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, st_stuff.o(i.ST_loadCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ST_loadCallback &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st_stuff.o(i.ST_loadGraphics)
</UL>
<P><STRONG><a name="[547]"></a>ST_loadUnloadGraphics</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, st_stuff.o(i.ST_loadUnloadGraphics))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST_loadUnloadGraphics &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_loadGraphics
</UL>

<P><STRONG><a name="[25c]"></a>ChecksumAddLump</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, w_checksum.o(i.ChecksumAddLump))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ChecksumAddLump &rArr; SHA1_UpdateString &rArr; SHA1_Update &rArr;  SHA1_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_UpdateString
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_UpdateInt32
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_Checksum
</UL>

<P><STRONG><a name="[25f]"></a>GetFileNumber</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, w_checksum.o(i.GetFileNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetFileNumber &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChecksumAddLump
</UL>

<P><STRONG><a name="[a3]"></a>W_StdC_CloseFile</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, w_file_stdc.o(i.W_StdC_CloseFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W_StdC_CloseFile &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w_file_stdc.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>W_StdC_Foreach</STRONG> (Thumb, 130 bytes, Stack size 488 bytes, w_file_stdc.o(i.W_StdC_Foreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = W_StdC_Foreach &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w_file_stdc.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>W_StdC_MMapFile</STRONG> (Thumb, 114 bytes, Stack size 576 bytes, w_file_stdc.o(i.W_StdC_MMapFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = W_StdC_MMapFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_FileLength
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w_file_stdc.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>W_StdC_OpenFile</STRONG> (Thumb, 76 bytes, Stack size 576 bytes, w_file_stdc.o(i.W_StdC_OpenFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = W_StdC_OpenFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_FileLength
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w_file_stdc.o(.data)
</UL>
<P><STRONG><a name="[2ff]"></a>ExtendLumpInfo</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, w_wad.o(i.ExtendLumpInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ExtendLumpInfo &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Malloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_Free
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_Error
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_ChangeUser
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_AddFile
</UL>

<P><STRONG><a name="[164]"></a>WI_loadCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_loadCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WI_loadCallback &rArr; W_CacheLumpName &rArr; W_CacheLumpNum &rArr; Z_Malloc &rArr; Z_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CacheLumpName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wi_stuff.o(i.WI_loadData)
</UL>
<P><STRONG><a name="[5c5]"></a>WI_loadUnloadData</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, wi_stuff.o(i.WI_loadUnloadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WI_loadUnloadData &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_StringCopy
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_CheckNumForName
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_unloadData
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WI_loadData
</UL>

<P><STRONG><a name="[165]"></a>WI_unloadCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wi_stuff.o(i.WI_unloadCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WI_unloadCallback &rArr; W_ReleaseLumpName &rArr; W_GetNumForName &rArr; W_CheckNumForName &rArr; strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_ReleaseLumpName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wi_stuff.o(i.WI_unloadData)
</UL>
<P><STRONG><a name="[58e]"></a>DeInitStateMachine</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, usbh_core.o(i.DeInitStateMachine))
<BR><BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[58b]"></a>USBH_HandleEnum</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[594]"></a>USBH_HandleSof</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_HandleSof))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_HandleSof
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_IncTimer
</UL>

<P><STRONG><a name="[56f]"></a>USBH_HandleControl</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[575]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, usbh_ctlreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[577]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_ctlreq.o(i.USBH_ParseDevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[59a]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ParseEPDesc))
<BR><BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[599]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[579]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbh_ctlreq.o(i.USBH_ParseStringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[a9]"></a>USBH_HID_ClassRequest</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, usbh_hid.o(i.USBH_HID_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = USBH_HID_ClassRequest &rArr; USBH_HID_GetHIDReportDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetProtocol
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetIdle
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetHIDReportDescriptor
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetHIDDescriptor
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ParseHIDDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>USBH_HID_InterfaceDeInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbh_hid.o(i.USBH_HID_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_HID_InterfaceDeInit &rArr; USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>USBH_HID_InterfaceInit</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, usbh_hid.o(i.USBH_HID_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_HID_InterfaceInit &rArr; USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SelectInterface
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[57b]"></a>USBH_HID_ParseHIDDesc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH_HID_ParseHIDDesc))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[aa]"></a>USBH_HID_Process</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, usbh_hid.o(i.USBH_HID_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USBH_HID_Process &rArr; USBH_HID_GetReport &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_EventCallback
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetReport
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>USBH_HID_SOFProcess</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH_HID_SOFProcess))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[568]"></a>USBH_GetFreePipe</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbh_pipes.o(i.USBH_GetFreePipe))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
</UL>

<P><STRONG><a name="[5da]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5d6]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[5dd]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5dc]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[166]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vsnprintf)
<LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[167]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[5d9]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[128]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
